/*
 * This file is autogenerated from api.xml by api_codegen.py
 *
 * Copyright (c) 2019 Qualcomm Technologies International, Ltd.
 */
#include "trap_api/ps.h" 
#include "trap_api/usb.h" 
#include "trap_api/micbias.h" 
#include "trap_api/audio_power.h" 
#include "trap_api/boot.h" 
#include "trap_api/transform.h" 
#include "trap_api/csb.h" 
#include "trap_api/source.h" 
#include "trap_api/inquiry.h" 
#include "trap_api/adc.h" 
#include "trap_api/test.h" 
#include "trap_api/audio_pwm.h" 
#include "trap_api/codec_.h" 
#include "trap_api/crypto.h" 
#include "trap_api/status.h" 
#include "trap_api/usb_hub.h" 
#include "trap_api/sram.h" 
#include "trap_api/lcd.h" 
#include "trap_api/util.h" 
#include "trap_api/host.h" 
#include "trap_api/bitserial_api.h" 
#include "trap_api/sink.h" 
#include "trap_api/otp.h" 
#include "trap_api/psu.h" 
#include "trap_api/dormant.h" 
#include "trap_api/charger.h" 
#include "trap_api/partition.h" 
#include "trap_api/sdmmc.h" 
#include "trap_api/audio_clock.h" 
#include "trap_api/feature.h" 
#include "trap_api/imageupgrade.h" 
#include "trap_api/i2c.h" 
#include "trap_api/capacitivesensor.h" 
#include "trap_api/voltsense.h" 
#include "trap_api/nfc.h" 
#include "trap_api/audio_anc.h" 
#include "trap_api/stream.h" 
#include "trap_api/pio.h" 
#include "trap_api/audio_mclk.h" 
#include "trap_api/energy.h" 
#include "trap_api/vm.h" 
#include "trap_api/infrared.h" 
#include "trap_api/file.h" 
#include "trap_api/operator.h" 
#include "trap_api/message.h" 
#include "trap_api/font.h" 
#include "trap_api/native.h" 
#if TRAPSET_MICBIAS
typedef struct IPC_MICBIAS_CONFIGURE {
    IPC_HEADER header;
    mic_bias_id mic;
    mic_bias_config_key key;
    uint16 value;
} IPC_MICBIAS_CONFIGURE;

#endif /* TRAPSET_MICBIAS */


#if TRAPSET_USB
typedef struct IPC_USB_ATTACHED_STATUS {
    IPC_HEADER header;
} IPC_USB_ATTACHED_STATUS;

typedef struct IPC_USB_ADD_INTERFACE {
    IPC_HEADER header;
    const UsbCodes * codes;
    uint16 type;
    const uint8 * if_descriptor;
    uint16 descriptor_length;
} IPC_USB_ADD_INTERFACE;

typedef struct IPC_USB_ADD_END_POINTS {
    IPC_HEADER header;
    UsbInterface interface;
    uint16 num_end_points;
    const EndPointInfo * end_point_info;
} IPC_USB_ADD_END_POINTS;

typedef struct IPC_USB_ADD_DESCRIPTOR {
    IPC_HEADER header;
    UsbInterface interface;
    uint16 type;
    const uint8 * descriptor;
    uint16 descriptor_length;
} IPC_USB_ADD_DESCRIPTOR;

typedef struct IPC_USB_ADD_STRING_DESCRIPTOR {
    IPC_HEADER header;
    uint8 string_index;
    const uint16 * string_descriptor;
} IPC_USB_ADD_STRING_DESCRIPTOR;

typedef struct IPC_USB_ADD_INTERFACE_ASSOCIATION_DESCRIPTOR {
    IPC_HEADER header;
    uint16 if_num;
    const uint8 * ia_descriptor;
    uint16 descriptor_length;
} IPC_USB_ADD_INTERFACE_ASSOCIATION_DESCRIPTOR;

typedef struct IPC_STREAM_USB_CLASS_SINK {
    IPC_HEADER header;
    UsbInterface interface;
} IPC_STREAM_USB_CLASS_SINK;

typedef struct IPC_STREAM_USB_END_POINT_SINK {
    IPC_HEADER header;
    uint16 end_point;
} IPC_STREAM_USB_END_POINT_SINK;

typedef struct IPC_STREAM_USB_VENDOR_SINK {
    IPC_HEADER header;
} IPC_STREAM_USB_VENDOR_SINK;

typedef struct IPC_USB_ADD_CONFIGURATION {
    IPC_HEADER header;
    const ConfigDescriptorInfo * desc_info;
} IPC_USB_ADD_CONFIGURATION;

typedef struct IPC_USB_DEVICE_STATE {
    IPC_HEADER header;
} IPC_USB_DEVICE_STATE;

typedef struct IPC_USB_ADD_ALT_INTERFACE {
    IPC_HEADER header;
    UsbInterface interface;
    const uint8 * if_descriptor;
    uint16 descriptor_length;
} IPC_USB_ADD_ALT_INTERFACE;

typedef struct IPC_USB_DEBUG_ALLOW {
    IPC_HEADER header;
    bool flag;
} IPC_USB_DEBUG_ALLOW;

typedef struct IPC_USBALTINTERFACE_RSP {
    IPC_HEADER header;
    UsbAltInterface ret;
} IPC_USBALTINTERFACE_RSP;
typedef struct IPC_USB_ATTACHED_STATUS_RSP {
    IPC_HEADER header;
    usb_attached_status ret;
} IPC_USB_ATTACHED_STATUS_RSP;
typedef struct IPC_USBINTERFACE_RSP {
    IPC_HEADER header;
    UsbInterface ret;
} IPC_USBINTERFACE_RSP;
typedef struct IPC_USB_DEVICE_STATE_RSP {
    IPC_HEADER header;
    usb_device_state ret;
} IPC_USB_DEVICE_STATE_RSP;
#endif /* TRAPSET_USB */


#if TRAPSET_RFCOMM
typedef struct IPC_STREAM_RFCOMM_SINK {
    IPC_HEADER header;
    uint16 conn_id;
} IPC_STREAM_RFCOMM_SINK;

typedef struct IPC_SINK_GET_RFCOMM_CONN_ID {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_RFCOMM_CONN_ID;

#endif /* TRAPSET_RFCOMM */


#if TRAPSET_AUDIO_MCLK
typedef struct IPC_AUDIO_MASTER_CLOCK_CONFIGURE {
    IPC_HEADER header;
    bool use_external;
    uint32 frequency;
} IPC_AUDIO_MASTER_CLOCK_CONFIGURE;

typedef struct IPC_SOURCE_MASTER_CLOCK_ENABLE {
    IPC_HEADER header;
    uint16 source;
    vm_mclk_enable enable;
} IPC_SOURCE_MASTER_CLOCK_ENABLE;

typedef struct IPC_SINK_MASTER_CLOCK_ENABLE {
    IPC_HEADER header;
    uint16 sink;
    vm_mclk_enable enable;
} IPC_SINK_MASTER_CLOCK_ENABLE;

#endif /* TRAPSET_AUDIO_MCLK */


#if TRAPSET_CHARGER
typedef struct IPC_CHARGER_CONFIGURE {
    IPC_HEADER header;
    charger_config_key key;
    uint16 value;
} IPC_CHARGER_CONFIGURE;

typedef struct IPC_CHARGER_STATUS {
    IPC_HEADER header;
} IPC_CHARGER_STATUS;

typedef struct IPC_CHARGER_STATUS_RSP {
    IPC_HEADER header;
    charger_status ret;
} IPC_CHARGER_STATUS_RSP;
#endif /* TRAPSET_CHARGER */


#if TRAPSET_INFRARED
typedef struct IPC_INFRARED_CONFIGURE {
    IPC_HEADER header;
    infrared_config_key key;
    uint32 value;
} IPC_INFRARED_CONFIGURE;

#endif /* TRAPSET_INFRARED */


#if TRAPSET_CHARGER2
typedef struct IPC_CHARGER_GET_BATTERY_STATUS_AT_BOOT {
    IPC_HEADER header;
} IPC_CHARGER_GET_BATTERY_STATUS_AT_BOOT;

typedef struct IPC_CHARGER_BATTERY_STATUS_RSP {
    IPC_HEADER header;
    charger_battery_status ret;
} IPC_CHARGER_BATTERY_STATUS_RSP;
#endif /* TRAPSET_CHARGER2 */


#if TRAPSET_ATT
typedef struct IPC_STREAM_ATT_SOURCE {
    IPC_HEADER header;
    uint16 cid;
    uint16 handle;
} IPC_STREAM_ATT_SOURCE;

typedef struct IPC_VM_CLEAR_ADVERTISING_REPORT_FILTER {
    IPC_HEADER header;
} IPC_VM_CLEAR_ADVERTISING_REPORT_FILTER;

typedef struct IPC_VM_ADD_ADVERTISING_REPORT_FILTER {
    IPC_HEADER header;
    uint16 operation;
    uint16 ad_type;
    uint16 interval;
    uint16 pattern_length;
    uint8 * pattern_addr;
} IPC_VM_ADD_ADVERTISING_REPORT_FILTER;

typedef struct IPC_STREAM_ATT_SOURCE_ADD_HANDLE {
    IPC_HEADER header;
    uint16 cid;
    uint16 handle;
} IPC_STREAM_ATT_SOURCE_ADD_HANDLE;

typedef struct IPC_STREAM_ATT_SOURCE_REMOVE_ALL_HANDLES {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_SOURCE_REMOVE_ALL_HANDLES;

typedef struct IPC_STREAM_ATT_SINK {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_SINK;

typedef struct IPC_STREAM_ATT_SERVER_SOURCE {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_SERVER_SOURCE;

typedef struct IPC_STREAM_ATT_CLIENT_SOURCE {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_CLIENT_SOURCE;

typedef struct IPC_STREAM_ATT_ADD_HANDLE {
    IPC_HEADER header;
    uint16 source;
    uint16 handle;
} IPC_STREAM_ATT_ADD_HANDLE;

typedef struct IPC_STREAM_ATT_REMOVE_ALL_HANDLES {
    IPC_HEADER header;
    uint16 source;
} IPC_STREAM_ATT_REMOVE_ALL_HANDLES;

typedef struct IPC_STREAM_ATT_CLIENT_SINK {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_CLIENT_SINK;

typedef struct IPC_STREAM_ATT_SERVER_SINK {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_ATT_SERVER_SINK;

#endif /* TRAPSET_ATT */


#if TRAPSET_REFORMATSQIF
typedef struct IPC_STREAM_REFORMAT_SERIAL_FLASH_SINK {
    IPC_HEADER header;
    partition_filesystem_devices device;
} IPC_STREAM_REFORMAT_SERIAL_FLASH_SINK;

#endif /* TRAPSET_REFORMATSQIF */


#if TRAPSET_FILE
typedef struct IPC_FILE_FIND {
    IPC_HEADER header;
    FILE_INDEX start;
    const char * name;
    uint16 length;
} IPC_FILE_FIND;

typedef struct IPC_FILE_TYPE {
    IPC_HEADER header;
    FILE_INDEX index;
} IPC_FILE_TYPE;

typedef struct IPC_FILE_PARENT {
    IPC_HEADER header;
    FILE_INDEX item;
} IPC_FILE_PARENT;

typedef struct IPC_STREAM_FILE_SOURCE {
    IPC_HEADER header;
    FILE_INDEX index;
} IPC_STREAM_FILE_SOURCE;

typedef struct IPC_FILE_CREATE {
    IPC_HEADER header;
    const char * name;
    uint16 length;
} IPC_FILE_CREATE;

typedef struct IPC_STREAM_FILE_SINK {
    IPC_HEADER header;
    FILE_INDEX index;
} IPC_STREAM_FILE_SINK;

typedef struct IPC_FILE_DELETE {
    IPC_HEADER header;
    FILE_INDEX index;
} IPC_FILE_DELETE;

typedef struct IPC_FILE_RENAME {
    IPC_HEADER header;
    const char * old_path;
    uint16 old_path_len;
    const char * new_path;
    uint16 new_path_len;
} IPC_FILE_RENAME;

typedef struct IPC_STREAM_FILESYSTEM_SOURCE {
    IPC_HEADER header;
    FILESYSTEM_ID filesystem_id;
} IPC_STREAM_FILESYSTEM_SOURCE;

typedef struct IPC_STREAM_FILESYSTEM_SINK {
    IPC_HEADER header;
    FILESYSTEM_ID filesystem_id;
} IPC_STREAM_FILESYSTEM_SINK;

typedef struct IPC_FILE_SYSTEM_UNMOUNT {
    IPC_HEADER header;
    const char * mount_path;
} IPC_FILE_SYSTEM_UNMOUNT;

typedef struct IPC_FILE_MAP {
    IPC_HEADER header;
    FILE_INDEX index;
    uint32 offset;
    uint32 size;
} IPC_FILE_MAP;

typedef struct IPC_FILE_TYPE_RSP {
    IPC_HEADER header;
    FILE_TYPE ret;
} IPC_FILE_TYPE_RSP;
#endif /* TRAPSET_FILE */


#if TRAPSET_IMAGEUPGRADE
typedef struct IPC_IMAGE_UPGRADE_GET_INFO {
    IPC_HEADER header;
    uint16 qspi;
    image_section_id image_section;
    image_info_key key;
    uint32 * value;
} IPC_IMAGE_UPGRADE_GET_INFO;

typedef struct IPC_IMAGE_UPGRADE_STREAM_GET_SINK {
    IPC_HEADER header;
    uint16 qspi;
    image_section_id image_section;
    uint32 first_word;
} IPC_IMAGE_UPGRADE_STREAM_GET_SINK;

typedef struct IPC_IMAGE_UPGRADE_SINK_GET_POSITION {
    IPC_HEADER header;
    uint16 sink;
    uint32 * offset;
} IPC_IMAGE_UPGRADE_SINK_GET_POSITION;

typedef struct IPC_IMAGE_UPGRADE_ERASE {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_ERASE;

typedef struct IPC_IMAGE_UPGRADE_SWAP_TRY {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_SWAP_TRY;

typedef struct IPC_IMAGE_UPGRADE_SWAP_TRY_STATUS {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_SWAP_TRY_STATUS;

typedef struct IPC_IMAGE_UPGRADE_SWAP_COMMIT {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_SWAP_COMMIT;

typedef struct IPC_IMAGE_UPGRADE_HASH_INITIALISE {
    IPC_HEADER header;
    hash_algo_t algo;
} IPC_IMAGE_UPGRADE_HASH_INITIALISE;

typedef struct IPC_IMAGE_UPGRADE_HASH_SECTION_UPDATE {
    IPC_HEADER header;
    hash_context_t context;
    image_section_id image_section;
} IPC_IMAGE_UPGRADE_HASH_SECTION_UPDATE;

typedef struct IPC_IMAGE_UPGRADE_HASH_MSG_UPDATE {
    IPC_HEADER header;
    hash_context_t context;
    const uint8 * msg;
    uint16 msg_len_bytes;
} IPC_IMAGE_UPGRADE_HASH_MSG_UPDATE;

typedef struct IPC_IMAGE_UPGRADE_HASH_FINALISE {
    IPC_HEADER header;
    hash_context_t context;
    uint8 * hash;
    uint16 hash_len_bytes;
} IPC_IMAGE_UPGRADE_HASH_FINALISE;

typedef struct IPC_IMAGE_UPGRADE_COPY {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_COPY;

typedef struct IPC_IMAGE_UPGRADE_ABORT_COMMAND {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_ABORT_COMMAND;

typedef struct IPC_IMAGE_UPGRADE_AUDIO {
    IPC_HEADER header;
} IPC_IMAGE_UPGRADE_AUDIO;

typedef struct IPC_IMAGE_UPGRADE_HASH_ALL_SECTIONS_UPDATE {
    IPC_HEADER header;
    hash_context_t context;
} IPC_IMAGE_UPGRADE_HASH_ALL_SECTIONS_UPDATE;

typedef struct IPC_IMAGE_UPGRADE_STREAM_GET_SOURCE {
    IPC_HEADER header;
    uint16 qspi;
    image_section_id image_section;
} IPC_IMAGE_UPGRADE_STREAM_GET_SOURCE;

typedef struct IPC_HASH_CONTEXT_T_RSP {
    IPC_HEADER header;
    hash_context_t ret;
} IPC_HASH_CONTEXT_T_RSP;
#endif /* TRAPSET_IMAGEUPGRADE */


#if TRAPSET_SHUNT
typedef struct IPC_STREAM_SHUNT_SINK {
    IPC_HEADER header;
    uint16 acl;
    uint16 cid;
} IPC_STREAM_SHUNT_SINK;

#endif /* TRAPSET_SHUNT */


#if TRAPSET_HIDDONGLE
typedef struct IPC_TRANSFORM_HID {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_HID;

#endif /* TRAPSET_HIDDONGLE */


#if TRAPSET_FONT
typedef struct IPC_FONT_INIT {
    IPC_HEADER header;
} IPC_FONT_INIT;

typedef struct IPC_FONT_GET_GLYPH {
    IPC_HEADER header;
    FontId font;
    ucs2char c;
    uint16 * glyph;
    size_t max_glyph_wid;
} IPC_FONT_GET_GLYPH;

typedef struct IPC_FONTID_RSP {
    IPC_HEADER header;
    FontId ret;
} IPC_FONTID_RSP;
typedef struct IPC_SIZE_T_RSP {
    IPC_HEADER header;
    size_t ret;
} IPC_SIZE_T_RSP;
#endif /* TRAPSET_FONT */


#if TRAPSET_IICSTREAM
typedef struct IPC_STREAM_I2C_SOURCE {
    IPC_HEADER header;
    uint16 slave_addr;
    uint16 array_addr;
    uint16 size;
} IPC_STREAM_I2C_SOURCE;

#endif /* TRAPSET_IICSTREAM */


#if TRAPSET_CSB
typedef struct IPC_STREAM_CSB_SINK {
    IPC_HEADER header;
    uint16 lt_addr;
} IPC_STREAM_CSB_SINK;

typedef struct IPC_STREAM_CSB_SOURCE {
    IPC_HEADER header;
    const BD_ADDR_T * remote_addr;
    uint16 lt_addr;
} IPC_STREAM_CSB_SOURCE;

typedef struct IPC_CSB_RECEIVER_SET_AFH_MAP {
    IPC_HEADER header;
    const BD_ADDR_T * remote_addr;
    uint16 lt_addr;
    AfhMap * afh_map;
    uint32 afh_instant;
} IPC_CSB_RECEIVER_SET_AFH_MAP;

typedef struct IPC_CSB_TRANSMITTER_SET_AFH_MAP {
    IPC_HEADER header;
    uint16 lt_addr;
    AfhMap * afh_map;
    uint32 afh_instant;
} IPC_CSB_TRANSMITTER_SET_AFH_MAP;

typedef struct IPC_CSB_ENABLE_NEW_AFH_MAP_EVENT {
    IPC_HEADER header;
    bool enable;
} IPC_CSB_ENABLE_NEW_AFH_MAP_EVENT;

#endif /* TRAPSET_CSB */


#if TRAPSET_NATIVE
typedef struct IPC_NATIVE_PAUSE_FOR_DEBUG {
    IPC_HEADER header;
} IPC_NATIVE_PAUSE_FOR_DEBUG;

#endif /* TRAPSET_NATIVE */


#if TRAPSET_STREAM
typedef struct IPC_SINK_SLACK {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_SLACK;

typedef struct IPC_SINK_CLAIM {
    IPC_HEADER header;
    uint16 sink;
    uint16 extra;
} IPC_SINK_CLAIM;

typedef struct IPC_SINK_MAP {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_MAP;

typedef struct IPC_SINK_FLUSH {
    IPC_HEADER header;
    uint16 sink;
    uint16 amount;
} IPC_SINK_FLUSH;

typedef struct IPC_SINK_FLUSH_HEADER {
    IPC_HEADER header;
    uint16 sink;
    uint16 amount;
    const void * header_;
    uint16 length;
} IPC_SINK_FLUSH_HEADER;

typedef struct IPC_SOURCE_SIZE {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_SIZE;

typedef struct IPC_SOURCE_SIZE_HEADER {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_SIZE_HEADER;

typedef struct IPC_SOURCE_MAP {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_MAP;

typedef struct IPC_SOURCE_MAP_HEADER {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_MAP_HEADER;

typedef struct IPC_SOURCE_DROP {
    IPC_HEADER header;
    uint16 source;
    uint16 amount;
} IPC_SOURCE_DROP;

typedef struct IPC_SOURCE_BOUNDARY {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_BOUNDARY;

typedef struct IPC_SOURCE_SIZE_BLOCKING {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_SIZE_BLOCKING;

typedef struct IPC_STREAM_MOVE {
    IPC_HEADER header;
    uint16 sink;
    uint16 source;
    uint16 count;
} IPC_STREAM_MOVE;

typedef struct IPC_STREAM_CONNECT {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_STREAM_CONNECT;

typedef struct IPC_STREAM_CONNECT_DISPOSE {
    IPC_HEADER header;
    uint16 source;
} IPC_STREAM_CONNECT_DISPOSE;

typedef struct IPC_STREAM_DISCONNECT {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_STREAM_DISCONNECT;

typedef struct IPC_SOURCE_IS_VALID {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_IS_VALID;

typedef struct IPC_SINK_IS_VALID {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_IS_VALID;

typedef struct IPC_STREAM_CONFIGURE {
    IPC_HEADER header;
    vm_stream_config_key key;
    uint16 value;
} IPC_STREAM_CONFIGURE;

typedef struct IPC_SOURCE_CONFIGURE {
    IPC_HEADER header;
    uint16 source;
    stream_config_key key;
    uint32 value;
} IPC_SOURCE_CONFIGURE;

typedef struct IPC_SINK_CONFIGURE {
    IPC_HEADER header;
    uint16 sink;
    stream_config_key key;
    uint32 value;
} IPC_SINK_CONFIGURE;

typedef struct IPC_STREAM_SOURCE_FROM_SINK {
    IPC_HEADER header;
    uint16 sink;
} IPC_STREAM_SOURCE_FROM_SINK;

typedef struct IPC_STREAM_SINK_FROM_SOURCE {
    IPC_HEADER header;
    uint16 source;
} IPC_STREAM_SINK_FROM_SOURCE;

typedef struct IPC_SOURCE_CLOSE {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_CLOSE;

typedef struct IPC_SINK_CLOSE {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_CLOSE;

typedef struct IPC_SINK_ALIAS {
    IPC_HEADER header;
    uint16 sink1;
    uint16 sink2;
} IPC_SINK_ALIAS;

typedef struct IPC_SINK_SYNCHRONISE {
    IPC_HEADER header;
    uint16 sink1;
    uint16 sink2;
} IPC_SINK_SYNCHRONISE;

typedef struct IPC_SOURCE_SYNCHRONISE {
    IPC_HEADER header;
    uint16 source1;
    uint16 source2;
} IPC_SOURCE_SYNCHRONISE;

typedef struct IPC_TRANSFORM_START {
    IPC_HEADER header;
    uint16 transform;
} IPC_TRANSFORM_START;

typedef struct IPC_TRANSFORM_STOP {
    IPC_HEADER header;
    uint16 transform;
} IPC_TRANSFORM_STOP;

typedef struct IPC_TRANSFORM_DISCONNECT {
    IPC_HEADER header;
    uint16 transform;
} IPC_TRANSFORM_DISCONNECT;

typedef struct IPC_TRANSFORM_POLL_TRAFFIC {
    IPC_HEADER header;
    uint16 transform;
} IPC_TRANSFORM_POLL_TRAFFIC;

typedef struct IPC_TRANSFORM_FROM_SOURCE {
    IPC_HEADER header;
    uint16 source;
} IPC_TRANSFORM_FROM_SOURCE;

typedef struct IPC_TRANSFORM_FROM_SINK {
    IPC_HEADER header;
    uint16 sink;
} IPC_TRANSFORM_FROM_SINK;

typedef struct IPC_TRANSFORM_CONFIGURE {
    IPC_HEADER header;
    uint16 transform;
    vm_transform_config_key key;
    uint16 value;
} IPC_TRANSFORM_CONFIGURE;

typedef struct IPC_STREAM_REGION_SOURCE {
    IPC_HEADER header;
    const uint8 * data;
    uint16 length;
} IPC_STREAM_REGION_SOURCE;

typedef struct IPC_TRANSFORM_CHUNK {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_CHUNK;

typedef struct IPC_TRANSFORM_SLICE {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_SLICE;

typedef struct IPC_TRANSFORM_ADPCM_DECODE {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_ADPCM_DECODE;

typedef struct IPC_SINK_MAP_INIT {
    IPC_HEADER header;
    uint16 sink;
    stream_device device;
    uint16 header_len;
} IPC_SINK_MAP_INIT;

typedef struct IPC_SOURCE_MAP_INIT {
    IPC_HEADER header;
    uint16 source;
    stream_device device;
    uint16 header_len;
} IPC_SOURCE_MAP_INIT;

typedef struct IPC_SINK_UNMAP {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_UNMAP;

typedef struct IPC_SOURCE_UNMAP {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_UNMAP;

typedef struct IPC_SINK_FLUSH_BLOCKING {
    IPC_HEADER header;
    uint16 sink;
    uint16 amount;
} IPC_SINK_FLUSH_BLOCKING;

typedef struct IPC_TRANSFORM_PACKETISE {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_PACKETISE;

typedef struct IPC_SINK_GET_BD_ADDR {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_BD_ADDR;

typedef struct IPC_STREAM_SINKS_FROM_BD_ADDR {
    IPC_HEADER header;
    uint16 max;
    const TP_BD_ADDR_T * tpaddr;
} IPC_STREAM_SINKS_FROM_BD_ADDR;

typedef struct IPC_SINK_GET_RSSI {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_RSSI;

typedef struct IPC_SINK_GET_WALLCLOCK {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_WALLCLOCK;

typedef struct IPC_STREAM_PIPE_PAIR {
    IPC_HEADER header;
    uint16 sink_a;
    uint16 sink_b;
    uint16 size_a_to_b;
    uint16 size_b_to_a;
} IPC_STREAM_PIPE_PAIR;

typedef struct IPC_STREAM_SINKS_FROM_BD_ADDR_RSP {
    IPC_HEADER header;
    bool ret;
    uint16 max;
    uint16 * sinks;
} IPC_STREAM_SINKS_FROM_BD_ADDR_RSP;
typedef struct IPC_SINK_GET_RSSI_RSP {
    IPC_HEADER header;
    bool ret;
    int16 rssi;
} IPC_SINK_GET_RSSI_RSP;
typedef struct IPC_SINK_GET_WALLCLOCK_RSP {
    IPC_HEADER header;
    bool ret;
    bt_wallclock_info wallclock;
} IPC_SINK_GET_WALLCLOCK_RSP;
typedef struct IPC_SINK_GET_BD_ADDR_RSP {
    IPC_HEADER header;
    bool ret;
    TP_BD_ADDR_T tpaddr;
} IPC_SINK_GET_BD_ADDR_RSP;
typedef struct IPC_UINT8__PTR_RSP {
    IPC_HEADER header;
    uint8 * ret;
} IPC_UINT8__PTR_RSP;
typedef struct IPC_CONST_UINT8__PTR_RSP {
    IPC_HEADER header;
    const uint8 * ret;
} IPC_CONST_UINT8__PTR_RSP;
typedef struct IPC_STREAM_PIPE_PAIR_RSP {
    IPC_HEADER header;
    bool ret;
    uint16 sink_a;
    uint16 sink_b;
} IPC_STREAM_PIPE_PAIR_RSP;
#endif /* TRAPSET_STREAM */


#if TRAPSET_AUDIO_ANC
typedef struct IPC_AUDIO_ANC_STREAM_ENABLE {
    IPC_HEADER header;
    uint16 anc_enable_0;
    uint16 anc_enable_1;
} IPC_AUDIO_ANC_STREAM_ENABLE;

typedef struct IPC_AUDIO_ANC_FILTER_LPF_SET {
    IPC_HEADER header;
    audio_anc_instance anc_instance;
    audio_anc_path_id path_id;
    uint16 shift1;
    uint16 shift2;
} IPC_AUDIO_ANC_FILTER_LPF_SET;

typedef struct IPC_AUDIO_ANC_FILTER_IIR_SET {
    IPC_HEADER header;
    audio_anc_instance anc_instance;
    audio_anc_path_id path_id;
    uint16 num_coeffs;
    const uint16 * coeffs;
} IPC_AUDIO_ANC_FILTER_IIR_SET;

#endif /* TRAPSET_AUDIO_ANC */


#if TRAPSET_IIR
typedef struct IPC_CODEC_SET_IIR_FILTER {
    IPC_HEADER header;
    audio_instance instance;
    audio_channel channel;
    bool enable;
    uint16 * coefficients;
} IPC_CODEC_SET_IIR_FILTER;

#endif /* TRAPSET_IIR */


#if TRAPSET_UART
typedef struct IPC_STREAM_UART_CONFIGURE {
    IPC_HEADER header;
    vm_uart_rate rate;
    vm_uart_stop stop;
    vm_uart_parity parity;
} IPC_STREAM_UART_CONFIGURE;

#endif /* TRAPSET_UART */


#if TRAPSET_FASTPIPE
typedef struct IPC_STREAM_FAST_PIPE_SINK {
    IPC_HEADER header;
    uint16 id;
} IPC_STREAM_FAST_PIPE_SINK;

#endif /* TRAPSET_FASTPIPE */


#if TRAPSET_LCD
typedef struct IPC_LCD_CONFIGURE {
    IPC_HEADER header;
    uint16 key;
    uint16 value;
} IPC_LCD_CONFIGURE;

typedef struct IPC_LCD_SET {
    IPC_HEADER header;
    uint32 mask;
    uint32 value;
} IPC_LCD_SET;

#endif /* TRAPSET_LCD */


#if TRAPSET_SD_MMC
typedef struct IPC_STREAM_SD_MMC_SOURCE {
    IPC_HEADER header;
    uint8 slot;
    uint32 start_block;
    uint32 blocks_count;
} IPC_STREAM_SD_MMC_SOURCE;

typedef struct IPC_STREAM_SD_MMC_SINK {
    IPC_HEADER header;
    uint8 slot;
    uint32 start_block;
    uint32 blocks_count;
} IPC_STREAM_SD_MMC_SINK;

typedef struct IPC_SD_MMC_DEVICE_INFO {
    IPC_HEADER header;
    uint8 slot;
    sd_mmc_dev_info * device_info;
} IPC_SD_MMC_DEVICE_INFO;

#endif /* TRAPSET_SD_MMC */


#if TRAPSET_HOSTSTREAM
typedef struct IPC_STREAM_HOST_SINK {
    IPC_HEADER header;
    uint16 channel;
} IPC_STREAM_HOST_SINK;

#endif /* TRAPSET_HOSTSTREAM */


#if TRAPSET_IIC
typedef struct IPC_I2C_TRANSFER {
    IPC_HEADER header;
    uint16 address;
    const uint8 * tx;
    uint16 tx_len;
    uint8 * rx;
    uint16 rx_len;
} IPC_I2C_TRANSFER;

#endif /* TRAPSET_IIC */


#if TRAPSET_SRAM
typedef struct IPC_SRAM_MAP {
    IPC_HEADER header;
    uint32 sram_addr;
    uint16 size;
} IPC_SRAM_MAP;

typedef struct IPC_UINT16__PTR_RSP {
    IPC_HEADER header;
    uint16 * ret;
} IPC_UINT16__PTR_RSP;
#endif /* TRAPSET_SRAM */


#if TRAPSET_CAPACITIVE_SENSOR
typedef struct IPC_CAPACITIVE_SENSOR_PAD_QUERY {
    IPC_HEADER header;
    uint16 count;
    const uint16* pads;
    capacitive_sensor_pad_state * results;
} IPC_CAPACITIVE_SENSOR_PAD_QUERY;

typedef struct IPC_CAPACITIVE_SENSOR_CONFIGURE_MULTI_PAD {
    IPC_HEADER header;
    uint16 count;
    const uint16 * pads;
    const CAPACITIVE_SENSOR_PAD_CONFIG * common_config;
} IPC_CAPACITIVE_SENSOR_CONFIGURE_MULTI_PAD;

typedef struct IPC_CAPACITIVE_SENSOR_ENABLE_PADS {
    IPC_HEADER header;
    uint16 count;
    const uint16 * pads;
    const CAPACITIVE_SENSOR_PAD_LEVELS * pad_levels;
} IPC_CAPACITIVE_SENSOR_ENABLE_PADS;

typedef struct IPC_CAPACITIVE_SENSOR_CONFIGURE_TOUCH_OFFSET {
    IPC_HEADER header;
    uint16 pad;
    uint32 touch_offset;
} IPC_CAPACITIVE_SENSOR_CONFIGURE_TOUCH_OFFSET;

typedef struct IPC_CAPACITIVE_SENSOR_SHIELD_ENABLE {
    IPC_HEADER header;
    bool enable;
} IPC_CAPACITIVE_SENSOR_SHIELD_ENABLE;

#endif /* TRAPSET_CAPACITIVE_SENSOR */


#if TRAPSET_STATUS
typedef struct IPC_STATUS_QUERY {
    IPC_HEADER header;
    uint16 count;
    const status_field * fields;
    uint16 * results;
} IPC_STATUS_QUERY;

#endif /* TRAPSET_STATUS */


#if TRAPSET_CORE
typedef struct IPC_UTIL_RANDOM {
    IPC_HEADER header;
} IPC_UTIL_RANDOM;

typedef struct IPC_PS_STORE {
    IPC_HEADER header;
    uint16 key;
    const void * buff;
    uint16 words;
} IPC_PS_STORE;

typedef struct IPC_PS_RETRIEVE {
    IPC_HEADER header;
    uint16 key;
    void * buff;
    uint16 words;
} IPC_PS_RETRIEVE;

typedef struct IPC_PS_DEFRAG {
    IPC_HEADER header;
} IPC_PS_DEFRAG;

typedef struct IPC_PS_FREE_COUNT {
    IPC_HEADER header;
    uint16 words;
} IPC_PS_FREE_COUNT;

typedef struct IPC_PS_FULL_RETRIEVE {
    IPC_HEADER header;
    uint16 key;
    void * buff;
    uint16 words;
} IPC_PS_FULL_RETRIEVE;

typedef struct IPC_BOOT_GET_MODE {
    IPC_HEADER header;
} IPC_BOOT_GET_MODE;

typedef struct IPC_BOOT_SET_MODE {
    IPC_HEADER header;
    uint16 newBootmode;
} IPC_BOOT_SET_MODE;

typedef struct IPC_VM_DEEP_SLEEP_ENABLE {
    IPC_HEADER header;
    bool en;
} IPC_VM_DEEP_SLEEP_ENABLE;

typedef struct IPC_VM_TRANSMIT_ENABLE {
    IPC_HEADER header;
    bool enabled;
} IPC_VM_TRANSMIT_ENABLE;

typedef struct IPC_VM_TRANSMIT_POWER_SET_DEFAULT {
    IPC_HEADER header;
    int16 power;
} IPC_VM_TRANSMIT_POWER_SET_DEFAULT;

typedef struct IPC_VM_TRANSMIT_POWER_SET_MAXIMUM {
    IPC_HEADER header;
    int16 power;
} IPC_VM_TRANSMIT_POWER_SET_MAXIMUM;

typedef struct IPC_VM_TRANSMIT_POWER_GET_DEFAULT {
    IPC_HEADER header;
} IPC_VM_TRANSMIT_POWER_GET_DEFAULT;

typedef struct IPC_VM_TRANSMIT_POWER_GET_MAXIMUM {
    IPC_HEADER header;
} IPC_VM_TRANSMIT_POWER_GET_MAXIMUM;

typedef struct IPC_VM_GET_TEMPERATURE {
    IPC_HEADER header;
} IPC_VM_GET_TEMPERATURE;

typedef struct IPC_VM_READ_VREF_CONSTANT {
    IPC_HEADER header;
} IPC_VM_READ_VREF_CONSTANT;

typedef struct IPC_ADC_READ_REQUEST {
    IPC_HEADER header;
    Task task;
    vm_adc_source_type adc_source;
    vm_adc_extra_flag extra_flag;
    uint16 delay;
} IPC_ADC_READ_REQUEST;

typedef struct IPC_PS_UPDATE_AUDIO_KEY {
    IPC_HEADER header;
    uint32 key;
    const uint16 * buffer;
    uint16 words;
    uint16 offset;
    uint16 key_length;
} IPC_PS_UPDATE_AUDIO_KEY;

typedef struct IPC_PS_READ_AUDIO_KEY {
    IPC_HEADER header;
    uint32 key;
    uint16 * buffer;
    uint16 words;
    uint16 offset;
    uint16 * key_length_addr;
} IPC_PS_READ_AUDIO_KEY;

typedef struct IPC_VM_GET_TEMPERATURE_BY_SENSOR {
    IPC_HEADER header;
    vm_temp_sensor sensor;
} IPC_VM_GET_TEMPERATURE_BY_SENSOR;

typedef struct IPC_VM_TRANSMIT_POWER_MESSAGES_ENABLE {
    IPC_HEADER header;
    bool enable;
} IPC_VM_TRANSMIT_POWER_MESSAGES_ENABLE;

typedef struct IPC_VM_GET_RESET_SOURCE {
    IPC_HEADER header;
} IPC_VM_GET_RESET_SOURCE;

typedef struct IPC_VM_SOFTWARE_WD_KICK {
    IPC_HEADER header;
    uint16 timeout;
} IPC_VM_SOFTWARE_WD_KICK;

typedef struct IPC_FEATURE_VERIFY_LICENSE {
    IPC_HEADER header;
    feature_id feature;
} IPC_FEATURE_VERIFY_LICENSE;

typedef struct IPC_PS_SET_STORE {
    IPC_HEADER header;
    PsStores store;
} IPC_PS_SET_STORE;

typedef struct IPC_PS_GET_STORE {
    IPC_HEADER header;
} IPC_PS_GET_STORE;

typedef struct IPC_PIO_SET_WAKEUP_STATE_BANK {
    IPC_HEADER header;
    uint16 bank;
    uint32 mask;
    uint32 value;
} IPC_PIO_SET_WAKEUP_STATE_BANK;

typedef struct IPC_PIO_SET_DEEP_SLEEP_EITHER_LEVEL_BANK {
    IPC_HEADER header;
    uint16 bank;
    uint32 mask;
    uint32 value;
} IPC_PIO_SET_DEEP_SLEEP_EITHER_LEVEL_BANK;

typedef struct IPC_VM_DEEP_SLEEP_WAKE_SOURCES_ENABLE {
    IPC_HEADER header;
    vm_wake_source_type wake_source;
    bool en;
} IPC_VM_DEEP_SLEEP_WAKE_SOURCES_ENABLE;

typedef struct IPC_DORMANT_CONFIGURE {
    IPC_HEADER header;
    dormant_config_key key;
    uint32 value;
} IPC_DORMANT_CONFIGURE;

typedef struct IPC_PSSTORES_RSP {
    IPC_HEADER header;
    PsStores ret;
} IPC_PSSTORES_RSP;
typedef struct IPC_VM_RESET_SOURCE_RSP {
    IPC_HEADER header;
    vm_reset_source ret;
} IPC_VM_RESET_SOURCE_RSP;
#endif /* TRAPSET_CORE */


#if TRAPSET_NFC
typedef struct IPC_NFC_SEND_PRIM {
    IPC_HEADER header;
    void * msg;
} IPC_NFC_SEND_PRIM;

typedef struct IPC_STREAM_NFC_SINK {
    IPC_HEADER header;
} IPC_STREAM_NFC_SINK;

#endif /* TRAPSET_NFC */


#if TRAPSET_BLUESTACK
typedef struct IPC_STREAM_L2CAP_SINK {
    IPC_HEADER header;
    uint16 cid;
} IPC_STREAM_L2CAP_SINK;

typedef struct IPC_SINK_GET_L2CAP_CID {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_L2CAP_CID;

typedef struct IPC_SINK_POLL_AWAY_TIME {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_POLL_AWAY_TIME;

typedef struct IPC_INQUIRY_SET_PRIORITY {
    IPC_HEADER header;
    InquiryPriority priority;
} IPC_INQUIRY_SET_PRIORITY;

typedef struct IPC_INQUIRY_GET_PRIORITY {
    IPC_HEADER header;
} IPC_INQUIRY_GET_PRIORITY;

typedef struct IPC_VM_GET_BD_ADDRT_FROM_CID {
    IPC_HEADER header;
    uint16 cid;
} IPC_VM_GET_BD_ADDRT_FROM_CID;

typedef struct IPC_VM_GET_PUBLIC_ADDRESS {
    IPC_HEADER header;
    const TP_BD_ADDR_T * random_addr;
} IPC_VM_GET_PUBLIC_ADDRESS;

typedef struct IPC_VM_GET_LOCAL_IRK {
    IPC_HEADER header;
} IPC_VM_GET_LOCAL_IRK;

typedef struct IPC_VM_UPDATE_ROOT_KEYS {
    IPC_HEADER header;
    packed_root_keys * root_keys;
} IPC_VM_UPDATE_ROOT_KEYS;

typedef struct IPC_VM_GET_PUBLIC_ADDRESS_RSP {
    IPC_HEADER header;
    bool ret;
    TP_BD_ADDR_T public_addr;
} IPC_VM_GET_PUBLIC_ADDRESS_RSP;
typedef struct IPC_INQUIRYPRIORITY_RSP {
    IPC_HEADER header;
    InquiryPriority ret;
} IPC_INQUIRYPRIORITY_RSP;
typedef struct IPC_SINK_POLL_AWAY_TIME_RSP {
    IPC_HEADER header;
    bool ret;
    uint16 msec;
} IPC_SINK_POLL_AWAY_TIME_RSP;
typedef struct IPC_VM_GET_BD_ADDRT_FROM_CID_RSP {
    IPC_HEADER header;
    bool ret;
    TP_BD_ADDR_T tpaddr;
} IPC_VM_GET_BD_ADDRT_FROM_CID_RSP;
typedef struct IPC_VM_GET_LOCAL_IRK_RSP {
    IPC_HEADER header;
    bool ret;
    packed_irk irk;
} IPC_VM_GET_LOCAL_IRK_RSP;
#endif /* TRAPSET_BLUESTACK */


#if TRAPSET_ENERGY
typedef struct IPC_ENERGY_ESTIMATION_SET_BOUNDS {
    IPC_HEADER header;
    uint16 sco;
    uint16 lower;
    uint16 upper;
} IPC_ENERGY_ESTIMATION_SET_BOUNDS;

typedef struct IPC_ENERGY_ESTIMATION_OFF {
    IPC_HEADER header;
    uint16 sco;
} IPC_ENERGY_ESTIMATION_OFF;

#endif /* TRAPSET_ENERGY */


#if TRAPSET_PARTITION
typedef struct IPC_STREAM_PARTITION_OVERWRITE_SINK {
    IPC_HEADER header;
    partition_filesystem_devices device;
    uint16 partition;
} IPC_STREAM_PARTITION_OVERWRITE_SINK;

typedef struct IPC_PARTITION_MOUNT_FILESYSTEM {
    IPC_HEADER header;
    partition_filesystem_devices device;
    uint16 partition;
    partition_filesystem_priority priority;
} IPC_PARTITION_MOUNT_FILESYSTEM;

typedef struct IPC_PARTITION_GET_INFO {
    IPC_HEADER header;
    partition_filesystem_devices device;
    uint16 partition;
    partition_info_key key;
    uint32 * value;
} IPC_PARTITION_GET_INFO;

typedef struct IPC_PARTITION_SET_MESSAGE_DIGEST {
    IPC_HEADER header;
    uint16 sink;
    partition_message_digest_type md_type;
    uint16 * data;
    uint16 len;
} IPC_PARTITION_SET_MESSAGE_DIGEST;

typedef struct IPC_PARTITION_GET_RAW_SERIAL_SOURCE {
    IPC_HEADER header;
    uint16 device;
    uint16 partition;
} IPC_PARTITION_GET_RAW_SERIAL_SOURCE;

typedef struct IPC_STREAM_PARTITION_RESUME_SINK {
    IPC_HEADER header;
    partition_filesystem_devices device;
    uint16 partition_no;
    uint16 first_word;
} IPC_STREAM_PARTITION_RESUME_SINK;

typedef struct IPC_PARTITION_SINK_GET_POSITION {
    IPC_HEADER header;
    uint16 sink;
} IPC_PARTITION_SINK_GET_POSITION;

typedef struct IPC_PS_STORE_FS_TAB {
    IPC_HEADER header;
    const void * buff;
    uint16 words;
    bool commit;
} IPC_PS_STORE_FS_TAB;

#endif /* TRAPSET_PARTITION */


#if TRAPSET_USB_HUB
typedef struct IPC_USB_HUB_ATTACH {
    IPC_HEADER header;
} IPC_USB_HUB_ATTACH;

typedef struct IPC_USB_HUB_DETACH {
    IPC_HEADER header;
} IPC_USB_HUB_DETACH;

typedef struct IPC_USB_HUB_CONFIGURE {
    IPC_HEADER header;
    const usb_device_parameters * device_params;
} IPC_USB_HUB_CONFIGURE;

typedef struct IPC_USB_HUB_CONFIG_KEY {
    IPC_HEADER header;
    usb_device_cfg_key key;
    uint32 value;
} IPC_USB_HUB_CONFIG_KEY;

#endif /* TRAPSET_USB_HUB */


#if TRAPSET_XIO
typedef struct IPC_XIO_MEASURE_VOLTAGE {
    IPC_HEADER header;
    Task task;
    xio_source first_xio;
    xio_source second_xio;
    vga_gain voltage_gain;
} IPC_XIO_MEASURE_VOLTAGE;

typedef struct IPC_DAC_ENABLE {
    IPC_HEADER header;
    bool enable;
} IPC_DAC_ENABLE;

typedef struct IPC_DAC_SET_GAIN {
    IPC_HEADER header;
    dac_buffer_gain gain;
} IPC_DAC_SET_GAIN;

typedef struct IPC_DAC_SET_LEVEL {
    IPC_HEADER header;
    uint16 level;
} IPC_DAC_SET_LEVEL;

#endif /* TRAPSET_XIO */


#if TRAPSET_AMUXCLOCK
typedef struct IPC_VM_AMUX_CLOCK_ENABLE {
    IPC_HEADER header;
    bool enabled;
} IPC_VM_AMUX_CLOCK_ENABLE;

#endif /* TRAPSET_AMUXCLOCK */


#if TRAPSET_OTP
typedef struct IPC_OTP_READ_DATA {
    IPC_HEADER header;
    uint16 * read_value;
    uint16 start_word;
    uint16 length_words;
} IPC_OTP_READ_DATA;

typedef struct IPC_OTP_WRITE_DATA {
    IPC_HEADER header;
    const uint16 * write_value;
    uint16 start_word;
    uint16 length_words;
} IPC_OTP_WRITE_DATA;

#endif /* TRAPSET_OTP */


#if TRAPSET_HOST
typedef struct IPC_HOST_SEND_MESSAGE {
    IPC_HEADER header;
    uint16 * msg;
} IPC_HOST_SEND_MESSAGE;

typedef struct IPC_MESSAGE_HOST_COMMS_TASK {
    IPC_HEADER header;
    Task task;
} IPC_MESSAGE_HOST_COMMS_TASK;

typedef struct IPC_TASK_RSP {
    IPC_HEADER header;
    Task ret;
} IPC_TASK_RSP;
#endif /* TRAPSET_HOST */


#if TRAPSET_OPERATOR
typedef struct IPC_OPERATOR_CREATE {
    IPC_HEADER header;
    uint16 cap_id;
    uint16 num_keys;
    OperatorCreateKeys * info;
} IPC_OPERATOR_CREATE;

typedef struct IPC_OPERATOR_DESTROY_MULTIPLE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 * success_ops;
} IPC_OPERATOR_DESTROY_MULTIPLE;

typedef struct IPC_OPERATOR_START_MULTIPLE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 * success_ops;
} IPC_OPERATOR_START_MULTIPLE;

typedef struct IPC_OPERATOR_STOP_MULTIPLE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 * success_ops;
} IPC_OPERATOR_STOP_MULTIPLE;

typedef struct IPC_OPERATOR_RESET_MULTIPLE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 * success_ops;
} IPC_OPERATOR_RESET_MULTIPLE;

typedef struct IPC_OPERATOR_MESSAGE {
    IPC_HEADER header;
    Operator opid;
    const uint16 * send_msg;
    uint16 send_len_words;
    uint16 recv_len_words;
} IPC_OPERATOR_MESSAGE;

typedef struct IPC_OPERATOR_BUNDLE_LOAD {
    IPC_HEADER header;
    FILE_INDEX index;
    uint16 processor;
} IPC_OPERATOR_BUNDLE_LOAD;

typedef struct IPC_OPERATOR_BUNDLE_UNLOAD {
    IPC_HEADER header;
    BundleID bundle;
} IPC_OPERATOR_BUNDLE_UNLOAD;

typedef struct IPC_OPERATOR_FRAMEWORK_CONFIGURATION_SET {
    IPC_HEADER header;
    uint16 key;
    const uint16 * send_msg;
    uint16 send_len_words;
} IPC_OPERATOR_FRAMEWORK_CONFIGURATION_SET;

typedef struct IPC_OPERATOR_FRAMEWORK_CONFIGURATION_GET {
    IPC_HEADER header;
    uint16 key;
    const uint16 * send_msg;
    uint16 send_len_words;
    uint16 recv_len_words;
} IPC_OPERATOR_FRAMEWORK_CONFIGURATION_GET;

typedef struct IPC_OPERATOR_FRAMEWORK_ENABLE {
    IPC_HEADER header;
    OperatorFrameworkPowerState state;
} IPC_OPERATOR_FRAMEWORK_ENABLE;

typedef struct IPC_OPERATOR_DELEGATE_MULTIPLE {
    IPC_HEADER header;
    Operator op_client;
    uint16 n_ops;
    Operator * oplist;
} IPC_OPERATOR_DELEGATE_MULTIPLE;

typedef struct IPC_OPERATOR_DATA_LOAD_EX {
    IPC_HEADER header;
    FILE_INDEX index;
    OperatorDataFileType type;
    OperatorDataStorageType storage;
    bool auto_remove;
} IPC_OPERATOR_DATA_LOAD_EX;

typedef struct IPC_OPERATOR_DATA_UNLOAD_EX {
    IPC_HEADER header;
    DataFileID file_id;
} IPC_OPERATOR_DATA_UNLOAD_EX;

typedef struct IPC_OPERATOR_FRAMEWORK_CONFIGURATION_GET_RSP {
    IPC_HEADER header;
    bool ret;
    uint16 * recv_msg;
} IPC_OPERATOR_FRAMEWORK_CONFIGURATION_GET_RSP;
typedef struct IPC_OPERATOR_RSP {
    IPC_HEADER header;
    Operator ret;
} IPC_OPERATOR_RSP;
typedef struct IPC_OPERATOR_MESSAGE_RSP {
    IPC_HEADER header;
    bool ret;
    uint16 * recv_msg;
} IPC_OPERATOR_MESSAGE_RSP;
typedef struct IPC_BUNDLEID_RSP {
    IPC_HEADER header;
    BundleID ret;
} IPC_BUNDLEID_RSP;
#endif /* TRAPSET_OPERATOR */


#if TRAPSET_AUDIO_PWM
typedef struct IPC_AUDIO_PWM_POWER_ENABLE {
    IPC_HEADER header;
    bool enable;
} IPC_AUDIO_PWM_POWER_ENABLE;

typedef struct IPC_AUDIO_PWM_MUTE {
    IPC_HEADER header;
    bool enable;
} IPC_AUDIO_PWM_MUTE;

#endif /* TRAPSET_AUDIO_PWM */


#if TRAPSET_AUDIO
typedef struct IPC_STREAM_RINGTONE_SOURCE {
    IPC_HEADER header;
    const ringtone_note* ringtone;
} IPC_STREAM_RINGTONE_SOURCE;

typedef struct IPC_STREAM_AUDIO_SOURCE {
    IPC_HEADER header;
    audio_hardware hardware;
    audio_instance instance;
    audio_channel channel;
} IPC_STREAM_AUDIO_SOURCE;

typedef struct IPC_STREAM_AUDIO_SINK {
    IPC_HEADER header;
    audio_hardware hardware;
    audio_instance instance;
    audio_channel channel;
} IPC_STREAM_AUDIO_SINK;

typedef struct IPC_STREAM_SCO_SINK {
    IPC_HEADER header;
    uint16 handle;
} IPC_STREAM_SCO_SINK;

typedef struct IPC_STREAM_SCO_SOURCE {
    IPC_HEADER header;
    uint16 handle;
} IPC_STREAM_SCO_SOURCE;

typedef struct IPC_SOURCE_GET_SCO_HANDLE {
    IPC_HEADER header;
    uint16 source;
} IPC_SOURCE_GET_SCO_HANDLE;

typedef struct IPC_SINK_GET_SCO_HANDLE {
    IPC_HEADER header;
    uint16 sink;
} IPC_SINK_GET_SCO_HANDLE;

#endif /* TRAPSET_AUDIO */


#if TRAPSET_WAKE_ON_AUDIO
typedef struct IPC_OPERATOR_FRAMEWORK_TRIGGER_NOTIFICATION_START {
    IPC_HEADER header;
    OperatorFrameworkTriggerType type;
    Operator opid;
} IPC_OPERATOR_FRAMEWORK_TRIGGER_NOTIFICATION_START;

typedef struct IPC_OPERATOR_FRAMEWORK_TRIGGER_NOTIFICATION_STOP {
    IPC_HEADER header;
} IPC_OPERATOR_FRAMEWORK_TRIGGER_NOTIFICATION_STOP;

typedef struct IPC_OPERATOR_DATA_LOAD {
    IPC_HEADER header;
    FILE_INDEX index;
    OperatorDataFileType type;
    bool auto_remove;
} IPC_OPERATOR_DATA_LOAD;

typedef struct IPC_OPERATOR_DATA_UNLOAD {
    IPC_HEADER header;
    DataFileID file_id;
} IPC_OPERATOR_DATA_UNLOAD;

typedef struct IPC_AUDIO_DSP_CLOCK_CONFIGURE {
    IPC_HEADER header;
    audio_dsp_clock_configuration * clock_config;
} IPC_AUDIO_DSP_CLOCK_CONFIGURE;

typedef struct IPC_AUDIO_DSP_GET_CLOCK {
    IPC_HEADER header;
} IPC_AUDIO_DSP_GET_CLOCK;

typedef struct IPC_AUDIO_POWER_SAVE_MODE_SET {
    IPC_HEADER header;
    audio_power_save_mode mode;
} IPC_AUDIO_POWER_SAVE_MODE_SET;

typedef struct IPC_AUDIO_POWER_SAVE_MODE_GET {
    IPC_HEADER header;
} IPC_AUDIO_POWER_SAVE_MODE_GET;

typedef struct IPC_OPERATOR_FRAMEWORK_PRESERVE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 n_srcs;
    uint16 * srclist;
    uint16 n_sinks;
    uint16 * sinklist;
} IPC_OPERATOR_FRAMEWORK_PRESERVE;

typedef struct IPC_OPERATOR_FRAMEWORK_RELEASE {
    IPC_HEADER header;
    uint16 n_ops;
    Operator * oplist;
    uint16 n_srcs;
    uint16 * srclist;
    uint16 n_sinks;
    uint16 * sinklist;
} IPC_OPERATOR_FRAMEWORK_RELEASE;

typedef struct IPC_AUDIO_DSP_GET_CLOCK_RSP {
    IPC_HEADER header;
    bool ret;
    audio_dsp_clock dsp_clock;
} IPC_AUDIO_DSP_GET_CLOCK_RSP;
typedef struct IPC_AUDIO_POWER_SAVE_MODE_RSP {
    IPC_HEADER header;
    audio_power_save_mode ret;
} IPC_AUDIO_POWER_SAVE_MODE_RSP;
#endif /* TRAPSET_WAKE_ON_AUDIO */


#if TRAPSET_PROFILE
typedef struct IPC_VM_REQUEST_RUN_TIME_PROFILE {
    IPC_HEADER header;
    vm_runtime_profile profile;
} IPC_VM_REQUEST_RUN_TIME_PROFILE;

typedef struct IPC_VM_GET_RUN_TIME_PROFILE {
    IPC_HEADER header;
} IPC_VM_GET_RUN_TIME_PROFILE;

typedef struct IPC_VM_RUNTIME_PROFILE_RSP {
    IPC_HEADER header;
    vm_runtime_profile ret;
} IPC_VM_RUNTIME_PROFILE_RSP;
#endif /* TRAPSET_PROFILE */


#if TRAPSET_IIR16BIT
typedef struct IPC_CODEC_SET_IIR_FILTER16_BIT {
    IPC_HEADER header;
    uint16 channel_mask;
    bool enable;
    IIR_COEFFICIENTS * iir_coefficients;
} IPC_CODEC_SET_IIR_FILTER16_BIT;

#endif /* TRAPSET_IIR16BIT */


#if TRAPSET_BITSERIAL
typedef struct IPC_BITSERIAL_OPEN {
    IPC_HEADER header;
    bitserial_block_index block_index;
    const bitserial_config * config;
} IPC_BITSERIAL_OPEN;

typedef struct IPC_BITSERIAL_CLOSE {
    IPC_HEADER header;
    bitserial_handle handle;
} IPC_BITSERIAL_CLOSE;

typedef struct IPC_BITSERIAL_TRANSFER {
    IPC_HEADER header;
    bitserial_handle handle;
    bitserial_transfer_handle * transfer_handle_ptr;
    const uint8 * tx_data;
    uint16 tx_size;
    uint8 * rx_data;
    uint16 rx_size;
} IPC_BITSERIAL_TRANSFER;

typedef struct IPC_BITSERIAL_WRITE {
    IPC_HEADER header;
    bitserial_handle handle;
    bitserial_transfer_handle * transfer_handle_ptr;
    const uint8 * data;
    uint16 size;
    bitserial_transfer_flags flags;
} IPC_BITSERIAL_WRITE;

typedef struct IPC_BITSERIAL_READ {
    IPC_HEADER header;
    bitserial_handle handle;
    bitserial_transfer_handle * transfer_handle_ptr;
    uint8 * data;
    uint16 size;
    bitserial_transfer_flags flags;
} IPC_BITSERIAL_READ;

typedef struct IPC_BITSERIAL_CHANGE_PARAM {
    IPC_HEADER header;
    bitserial_handle handle;
    bitserial_changeable_params key;
    uint16 value;
    bitserial_transfer_flags flags;
} IPC_BITSERIAL_CHANGE_PARAM;

typedef struct IPC_BITSERIAL_HANDLE_RSP {
    IPC_HEADER header;
    bitserial_handle ret;
} IPC_BITSERIAL_HANDLE_RSP;
#endif /* TRAPSET_BITSERIAL */


#if TRAPSET_CRYPTO
typedef struct IPC_CRYPTO_AES128_CTR {
    IPC_HEADER header;
    const uint8 * key;
    const uint8 * nonce;
    uint16 flags;
    uint32 counter;
    const uint8 * source_data;
    uint16 source_data_len_bytes;
    uint8 * dest_data;
    uint16 dest_data_len_bytes;
} IPC_CRYPTO_AES128_CTR;

typedef struct IPC_CRYPTO_AES128_CBC {
    IPC_HEADER header;
    bool encrypt;
    const uint8 * key;
    uint8 * nonce;
    uint16 flags;
    const uint8 * source_data;
    uint16 source_data_len_bytes;
    uint8 * dest_data;
    uint16 dest_data_len_bytes;
} IPC_CRYPTO_AES128_CBC;

#endif /* TRAPSET_CRYPTO */


#if TRAPSET_BDADDR
typedef struct IPC_VM_OVERRIDE_BDADDR {
    IPC_HEADER header;
    const BD_ADDR_T * bd_addr;
} IPC_VM_OVERRIDE_BDADDR;

#endif /* TRAPSET_BDADDR */


#if TRAPSET_KALIMBA
typedef struct IPC_PIO_GET_KALIMBA_CONTROL32 {
    IPC_HEADER header;
} IPC_PIO_GET_KALIMBA_CONTROL32;

typedef struct IPC_PIO_SET_KALIMBA_CONTROL32 {
    IPC_HEADER header;
    uint32 mask;
    uint32 value;
} IPC_PIO_SET_KALIMBA_CONTROL32;

typedef struct IPC_TRANSFORM_RTP_ENCODE {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_RTP_ENCODE;

typedef struct IPC_TRANSFORM_RTP_DECODE {
    IPC_HEADER header;
    uint16 source;
    uint16 sink;
} IPC_TRANSFORM_RTP_DECODE;

#endif /* TRAPSET_KALIMBA */


#if TRAPSET_CHARGERMESSAGE
typedef struct IPC_CHARGER_DEBOUNCE {
    IPC_HEADER header;
    charger_events events_to_enable;
    uint16 count;
    uint16 period;
} IPC_CHARGER_DEBOUNCE;

typedef struct IPC_CHARGER_EVENTS_RSP {
    IPC_HEADER header;
    charger_events ret;
} IPC_CHARGER_EVENTS_RSP;
#endif /* TRAPSET_CHARGERMESSAGE */


#if TRAPSET_TEST
typedef struct IPC_TEST_PERFORM_ {
    IPC_HEADER header;
    uint16 len;
    const uint16 * args;
} IPC_TEST_PERFORM_;

#endif /* TRAPSET_TEST */


#if TRAPSET_PSU
typedef struct IPC_PSU_CONFIGURE {
    IPC_HEADER header;
    psu_id psu;
    psu_config_key key;
    uint16 value;
} IPC_PSU_CONFIGURE;

typedef struct IPC_VM_GET_POWER_SOURCE {
    IPC_HEADER header;
} IPC_VM_GET_POWER_SOURCE;

#endif /* TRAPSET_PSU */


/*********************************************
 * Prims used by multiple trapsets
 *********************************************/
typedef struct IPC_BITSERIAL_RESULT_RSP {
    IPC_HEADER header;
    bitserial_result ret;
} IPC_BITSERIAL_RESULT_RSP;

typedef struct IPC_INT16_RSP {
    IPC_HEADER header;
    int16 ret;
} IPC_INT16_RSP;

typedef struct IPC_UINT32_RSP {
    IPC_HEADER header;
    uint32 ret;
} IPC_UINT32_RSP;

typedef struct IPC_CONST_VOID__PTR_RSP {
    IPC_HEADER header;
    const void * ret;
} IPC_CONST_VOID__PTR_RSP;

typedef struct IPC_SOURCE_RSP {
    IPC_HEADER header;
    uint16 ret;
} IPC_SOURCE_RSP;

typedef struct IPC_TRAP_VOLTSENSE_RESULT_RSP {
    IPC_HEADER header;
    trap_voltsense_result ret;
} IPC_TRAP_VOLTSENSE_RESULT_RSP;

typedef struct IPC_DATAFILEID_RSP {
    IPC_HEADER header;
    DataFileID ret;
} IPC_DATAFILEID_RSP;

typedef struct IPC_SINK_RSP {
    IPC_HEADER header;
    uint16 ret;
} IPC_SINK_RSP;

typedef struct IPC_BOOL_RSP {
    IPC_HEADER header;
    bool ret;
} IPC_BOOL_RSP;

typedef struct IPC_UINT16_RSP {
    IPC_HEADER header;
    uint16 ret;
} IPC_UINT16_RSP;

typedef struct IPC_FILE_INDEX_RSP {
    IPC_HEADER header;
    FILE_INDEX ret;
} IPC_FILE_INDEX_RSP;

typedef struct IPC_VOID_RSP {
    IPC_HEADER header;
} IPC_VOID_RSP;

typedef struct IPC_TRANSFORM_RSP {
    IPC_HEADER header;
    uint16 ret;
} IPC_TRANSFORM_RSP;

/*********************************************
 * Union containing all response primitives
 *********************************************/
typedef union IPC_RSP {
    IPC_UINT32_RSP ipc_uint32_rsp;
    IPC_UINT16_RSP ipc_uint16_rsp;
    IPC_VOID_RSP ipc_void_rsp;
    IPC_SINK_RSP ipc_sink_rsp;
    IPC_SOURCE_RSP ipc_source_rsp;
    IPC_BOOL_RSP ipc_bool_rsp;
    IPC_BITSERIAL_RESULT_RSP ipc_bitserial_result_rsp;
    IPC_DATAFILEID_RSP ipc_datafileid_rsp;
    IPC_FILE_INDEX_RSP ipc_file_index_rsp;
    IPC_INT16_RSP ipc_int16_rsp;
    IPC_CONST_VOID__PTR_RSP ipc_const_void__ptr_rsp;
    IPC_TRAP_VOLTSENSE_RESULT_RSP ipc_trap_voltsense_result_rsp;
    IPC_TRANSFORM_RSP ipc_transform_rsp;
#if TRAPSET_PROFILE
    IPC_VM_RUNTIME_PROFILE_RSP ipc_vm_runtime_profile_rsp;
#endif /* TRAPSET_PROFILE */
#if TRAPSET_CORE
    IPC_PSSTORES_RSP ipc_psstores_rsp;
    IPC_VM_RESET_SOURCE_RSP ipc_vm_reset_source_rsp;
#endif /* TRAPSET_CORE */
#if TRAPSET_BLUESTACK
    IPC_VM_GET_PUBLIC_ADDRESS_RSP ipc_vm_get_public_address_rsp;
    IPC_INQUIRYPRIORITY_RSP ipc_inquirypriority_rsp;
    IPC_SINK_POLL_AWAY_TIME_RSP ipc_sink_poll_away_time_rsp;
    IPC_VM_GET_BD_ADDRT_FROM_CID_RSP ipc_vm_get_bd_addrt_from_cid_rsp;
    IPC_VM_GET_LOCAL_IRK_RSP ipc_vm_get_local_irk_rsp;
#endif /* TRAPSET_BLUESTACK */
#if TRAPSET_STREAM
    IPC_STREAM_SINKS_FROM_BD_ADDR_RSP ipc_stream_sinks_from_bd_addr_rsp;
    IPC_SINK_GET_RSSI_RSP ipc_sink_get_rssi_rsp;
    IPC_SINK_GET_WALLCLOCK_RSP ipc_sink_get_wallclock_rsp;
    IPC_SINK_GET_BD_ADDR_RSP ipc_sink_get_bd_addr_rsp;
    IPC_UINT8__PTR_RSP ipc_uint8__ptr_rsp;
    IPC_CONST_UINT8__PTR_RSP ipc_const_uint8__ptr_rsp;
    IPC_STREAM_PIPE_PAIR_RSP ipc_stream_pipe_pair_rsp;
#endif /* TRAPSET_STREAM */
#if TRAPSET_CHARGER
    IPC_CHARGER_STATUS_RSP ipc_charger_status_rsp;
#endif /* TRAPSET_CHARGER */
#if TRAPSET_BITSERIAL
    IPC_BITSERIAL_HANDLE_RSP ipc_bitserial_handle_rsp;
#endif /* TRAPSET_BITSERIAL */
#if TRAPSET_CHARGER2
    IPC_CHARGER_BATTERY_STATUS_RSP ipc_charger_battery_status_rsp;
#endif /* TRAPSET_CHARGER2 */
#if TRAPSET_HOST
    IPC_TASK_RSP ipc_task_rsp;
#endif /* TRAPSET_HOST */
#if TRAPSET_CHARGERMESSAGE
    IPC_CHARGER_EVENTS_RSP ipc_charger_events_rsp;
#endif /* TRAPSET_CHARGERMESSAGE */
#if TRAPSET_FILE
    IPC_FILE_TYPE_RSP ipc_file_type_rsp;
#endif /* TRAPSET_FILE */
#if TRAPSET_SRAM
    IPC_UINT16__PTR_RSP ipc_uint16__ptr_rsp;
#endif /* TRAPSET_SRAM */
#if TRAPSET_OPERATOR
    IPC_OPERATOR_FRAMEWORK_CONFIGURATION_GET_RSP ipc_operator_framework_configuration_get_rsp;
    IPC_OPERATOR_RSP ipc_operator_rsp;
    IPC_OPERATOR_MESSAGE_RSP ipc_operator_message_rsp;
    IPC_BUNDLEID_RSP ipc_bundleid_rsp;
#endif /* TRAPSET_OPERATOR */
#if TRAPSET_IMAGEUPGRADE
    IPC_HASH_CONTEXT_T_RSP ipc_hash_context_t_rsp;
#endif /* TRAPSET_IMAGEUPGRADE */
#if TRAPSET_FONT
    IPC_FONTID_RSP ipc_fontid_rsp;
    IPC_SIZE_T_RSP ipc_size_t_rsp;
#endif /* TRAPSET_FONT */
#if TRAPSET_WAKE_ON_AUDIO
    IPC_AUDIO_DSP_GET_CLOCK_RSP ipc_audio_dsp_get_clock_rsp;
    IPC_AUDIO_POWER_SAVE_MODE_RSP ipc_audio_power_save_mode_rsp;
#endif /* TRAPSET_WAKE_ON_AUDIO */
#if TRAPSET_USB
    IPC_USBALTINTERFACE_RSP ipc_usbaltinterface_rsp;
    IPC_USB_ATTACHED_STATUS_RSP ipc_usb_attached_status_rsp;
    IPC_USBINTERFACE_RSP ipc_usbinterface_rsp;
    IPC_USB_DEVICE_STATE_RSP ipc_usb_device_state_rsp;
#endif /* TRAPSET_USB */
} IPC_RSP;
