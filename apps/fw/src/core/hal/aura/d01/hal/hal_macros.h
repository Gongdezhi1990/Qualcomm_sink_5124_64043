
/* *************************************************************************  *
   COMMERCIAL IN CONFIDENCE
   Copyright (C) 2017 Qualcomm Technologies International Ltd.

 

   DESCRIPTION
      Hardware Abstraction Layer macros.

   THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT IT, CHANGES WILL BE LOST
*  *************************************************************************  */

#define __HAL_MACROS_H__

#include "hal_utils.h"


#if defined(IO_DEFS_MODULE_K32_TRACE) 

#ifndef __HAL_MACROS_H__MODULE_K32_TRACE
#define __HAL_MACROS_H__MODULE_K32_TRACE

/* -- Kalimba 32-bit Trace Control registers. -- */

 /* Field K32_TRACE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p0_access_permission() ((k32_trace__p0_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION))
#define hal_set_k32_trace__p0_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p1_access_permission() ((k32_trace__p1_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION))
#define hal_set_k32_trace__p1_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p2_access_permission() ((k32_trace__p2_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION))
#define hal_set_k32_trace__p2_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p3_access_permission() ((k32_trace__p3_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION))
#define hal_set_k32_trace__p3_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field TRACE_0_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_base_addr() hal_get_register_field32(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR)
#define hal_set_trace_0_dmem_base_addr(x) hal_set_register_field(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR

 /* Field TRACE_0_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_length() hal_get_register_field16(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH)
#define hal_set_trace_0_dmem_cfg_length(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_wrap() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP)
#define hal_set_trace_0_dmem_cfg_wrap(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_0_dmem_en() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN)
#define hal_set_trace_0_dmem_en(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG

 /* Field TRACE_0_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_end_trigger() hal_get_register_field32(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER)
#define hal_set_trace_0_end_trigger(x) hal_set_register_field(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER

 /* Field TRACE_0_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_start_trigger() hal_get_register_field32(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER)
#define hal_set_trace_0_start_trigger(x) hal_set_register_field(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER

 /* Field TRACE_0_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_base_addr() hal_get_register_field32(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR)
#define hal_set_trace_0_tbus_base_addr(x) hal_set_register_field(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR

 /* Field TRACE_0_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK)
#define hal_set_trace_0_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS)
#define hal_set_trace_0_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_length() hal_get_register_field16(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH)
#define hal_set_trace_0_tbus_cfg_length(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_src_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK)
#define hal_set_trace_0_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tag() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG)
#define hal_set_trace_0_tbus_cfg_tag(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tran_type() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_0_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_wrap() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP)
#define hal_set_trace_0_tbus_cfg_wrap(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_0_tbus_en() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN)
#define hal_set_trace_0_tbus_en(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG

 /* Field TRACE_1_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_base_addr() hal_get_register_field32(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR)
#define hal_set_trace_1_dmem_base_addr(x) hal_set_register_field(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR

 /* Field TRACE_1_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_length() hal_get_register_field16(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH)
#define hal_set_trace_1_dmem_cfg_length(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_wrap() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP)
#define hal_set_trace_1_dmem_cfg_wrap(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_1_dmem_en() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN)
#define hal_set_trace_1_dmem_en(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG

 /* Field TRACE_1_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_end_trigger() hal_get_register_field32(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER)
#define hal_set_trace_1_end_trigger(x) hal_set_register_field(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER

 /* Field TRACE_1_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_start_trigger() hal_get_register_field32(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER)
#define hal_set_trace_1_start_trigger(x) hal_set_register_field(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER

 /* Field TRACE_1_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_base_addr() hal_get_register_field32(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR)
#define hal_set_trace_1_tbus_base_addr(x) hal_set_register_field(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR

 /* Field TRACE_1_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK)
#define hal_set_trace_1_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS)
#define hal_set_trace_1_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_length() hal_get_register_field16(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH)
#define hal_set_trace_1_tbus_cfg_length(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_src_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK)
#define hal_set_trace_1_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tag() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG)
#define hal_set_trace_1_tbus_cfg_tag(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tran_type() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_1_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_wrap() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP)
#define hal_set_trace_1_tbus_cfg_wrap(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_1_tbus_en() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN)
#define hal_set_trace_1_tbus_en(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG

 /* Field TRACE_CFG_0_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_0_clr_stored_on_sync() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_0_clr_stored_on_sync(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG

 /* Field TRACE_CFG_0_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_cpu_select() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT)
#define hal_set_trace_cfg_0_cpu_select(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG

 /* Field TRACE_CFG_0_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_0_enable() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_ENABLE)
#define hal_set_trace_cfg_0_enable(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_ENABLE TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_ENABLE TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_bitgen() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN)
#define hal_set_trace_cfg_0_flush_bitgen(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_fifo() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO)
#define hal_set_trace_cfg_0_flush_fifo(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG

 /* Field TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_0_stall_core_on_trace_full() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_0_stall_core_on_trace_full(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG

 /* Field TRACE_CFG_0_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_sync_interval() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL)
#define hal_set_trace_cfg_0_sync_interval(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG

 /* Field TRACE_CFG_1_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_1_clr_stored_on_sync() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_1_clr_stored_on_sync(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG

 /* Field TRACE_CFG_1_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_cpu_select() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT)
#define hal_set_trace_cfg_1_cpu_select(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG

 /* Field TRACE_CFG_1_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_1_enable() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_ENABLE)
#define hal_set_trace_cfg_1_enable(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_ENABLE TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_ENABLE TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_bitgen() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN)
#define hal_set_trace_cfg_1_flush_bitgen(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_fifo() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO)
#define hal_set_trace_cfg_1_flush_fifo(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG

 /* Field TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_1_stall_core_on_trace_full() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_1_stall_core_on_trace_full(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG

 /* Field TRACE_CFG_1_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_sync_interval() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL)
#define hal_set_trace_cfg_1_sync_interval(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG

 /* Field TRACE_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_trace_debug_sel() hal_get_register_field8(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL)
#define hal_set_trace_debug_sel(x) hal_set_register_field(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_TRACE_DEBUG_SEL TRACE_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DEBUG_SEL TRACE_DEBUG_SEL

 /* Field TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_0_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_1_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_2_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_3_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_0_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_1_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_2_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_3_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TRIGGER_CFG_END_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_end_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_end_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_START_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_start_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_start_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_TRIGGER_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_trigger_length_0_trigger_cfg() hal_get_register_field16(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
#define hal_get_trace_trigger_cfg_trigger_length_1_trigger_cfg() hal_get_register_field16(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
#define hal_get_trace_trigger_status_end_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
#define hal_get_trace_trigger_status_end_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_SMDBG_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_status_smdbg_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
#define hal_get_trace_trigger_status_smdbg_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
#define hal_get_trace_trigger_status_start_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
#define hal_get_trace_trigger_status_start_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TRACE_0_CFG_TRACE_0_CFG
#define CHECK_FIELD_TYPE_TRACE_0_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_TRACE_0_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_TRACE_0_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_TRACE_0_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_TRACE_0_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_TRACE_0_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_TRACE_0_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_1_CFG_TRACE_1_CFG
#define CHECK_FIELD_TYPE_TRACE_1_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_TRACE_1_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_TRACE_1_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_TRACE_1_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_TRACE_1_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_TRACE_1_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_TRACE_1_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_TRACE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_END
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_TRACE_DEBUG_SEL
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_TRACE_DMEM_STATUS
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_TRACE_TBUS_STATUS
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define TRACE_0_CFG_REG_BITS (10u)
#define hal_set_reg_trace_0_cfg(x) hal_set_register(TRACE_0_CFG, x, 1)
#define hal_get_reg_trace_0_cfg() hal_get_register(TRACE_0_CFG, 1)
#define TRACE_0_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_dmem_base_addr(x) hal_set_register(TRACE_0_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_dmem_base_addr() hal_get_register(TRACE_0_DMEM_BASE_ADDR, 1)
#define TRACE_0_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_0_dmem_cfg(x) hal_set_register(TRACE_0_DMEM_CFG, x, 1)
#define hal_get_reg_trace_0_dmem_cfg() hal_get_register(TRACE_0_DMEM_CFG, 1)
#define TRACE_0_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_end_trigger(x) hal_set_register(TRACE_0_END_TRIGGER, x, 1)
#define hal_get_reg_trace_0_end_trigger() hal_get_register(TRACE_0_END_TRIGGER, 1)
#define TRACE_0_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_start_trigger(x) hal_set_register(TRACE_0_START_TRIGGER, x, 1)
#define hal_get_reg_trace_0_start_trigger() hal_get_register(TRACE_0_START_TRIGGER, 1)
#define TRACE_0_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_tbus_base_addr(x) hal_set_register(TRACE_0_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_tbus_base_addr() hal_get_register(TRACE_0_TBUS_BASE_ADDR, 1)
#define TRACE_0_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_0_tbus_cfg(x) hal_set_register(TRACE_0_TBUS_CFG, x, 1)
#define hal_get_reg_trace_0_tbus_cfg() hal_get_register(TRACE_0_TBUS_CFG, 1)
#define TRACE_0_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_0_trigger_cfg(x) hal_set_register(TRACE_0_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_0_trigger_cfg() hal_get_register(TRACE_0_TRIGGER_CFG, 1)
#define TRACE_0_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_0_trigger_status() hal_get_register(TRACE_0_TRIGGER_STATUS, 1)
#define TRACE_1_CFG_REG_BITS (10u)
#define hal_set_reg_trace_1_cfg(x) hal_set_register(TRACE_1_CFG, x, 1)
#define hal_get_reg_trace_1_cfg() hal_get_register(TRACE_1_CFG, 1)
#define TRACE_1_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_dmem_base_addr(x) hal_set_register(TRACE_1_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_dmem_base_addr() hal_get_register(TRACE_1_DMEM_BASE_ADDR, 1)
#define TRACE_1_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_1_dmem_cfg(x) hal_set_register(TRACE_1_DMEM_CFG, x, 1)
#define hal_get_reg_trace_1_dmem_cfg() hal_get_register(TRACE_1_DMEM_CFG, 1)
#define TRACE_1_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_end_trigger(x) hal_set_register(TRACE_1_END_TRIGGER, x, 1)
#define hal_get_reg_trace_1_end_trigger() hal_get_register(TRACE_1_END_TRIGGER, 1)
#define TRACE_1_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_start_trigger(x) hal_set_register(TRACE_1_START_TRIGGER, x, 1)
#define hal_get_reg_trace_1_start_trigger() hal_get_register(TRACE_1_START_TRIGGER, 1)
#define TRACE_1_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_tbus_base_addr(x) hal_set_register(TRACE_1_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_tbus_base_addr() hal_get_register(TRACE_1_TBUS_BASE_ADDR, 1)
#define TRACE_1_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_1_tbus_cfg(x) hal_set_register(TRACE_1_TBUS_CFG, x, 1)
#define hal_get_reg_trace_1_tbus_cfg() hal_get_register(TRACE_1_TBUS_CFG, 1)
#define TRACE_1_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_1_trigger_cfg(x) hal_set_register(TRACE_1_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_1_trigger_cfg() hal_get_register(TRACE_1_TRIGGER_CFG, 1)
#define TRACE_1_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_1_trigger_status() hal_get_register(TRACE_1_TRIGGER_STATUS, 1)
#define TRACE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_trace_access_ctrl(x) hal_set_register(TRACE_ACCESS_CTRL, x, 1)
#define hal_get_reg_trace_access_ctrl() hal_get_register(TRACE_ACCESS_CTRL, 1)
#define TRACE_DEBUG_SEL_REG_BITS (4u)
#define hal_set_reg_trace_debug_sel(x) hal_set_register(TRACE_DEBUG_SEL, x, 1)
#define hal_get_reg_trace_debug_sel() hal_get_register(TRACE_DEBUG_SEL, 1)
#define TRACE_DMEM_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_dmem_status() hal_get_register(TRACE_DMEM_STATUS, 1)
#define TRACE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_trace_mutex_lock(x) hal_set_register(TRACE_MUTEX_LOCK, x, 1)
#define hal_get_reg_trace_mutex_lock() hal_get_register(TRACE_MUTEX_LOCK, 1)
#define TRACE_TBUS_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_tbus_status() hal_get_register(TRACE_TBUS_STATUS, 1)

 /* Workings */
#define SETTER_FOR_TRACE_0_CFG hal_set_reg_trace_0_cfg
#define GETTER_FOR_TRACE_0_CFG hal_get_reg_trace_0_cfg
#define SETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_set_reg_trace_0_dmem_base_addr
#define GETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_get_reg_trace_0_dmem_base_addr
#define SETTER_FOR_TRACE_0_DMEM_CFG hal_set_reg_trace_0_dmem_cfg
#define GETTER_FOR_TRACE_0_DMEM_CFG hal_get_reg_trace_0_dmem_cfg
#define SETTER_FOR_TRACE_0_END_TRIGGER hal_set_reg_trace_0_end_trigger
#define GETTER_FOR_TRACE_0_END_TRIGGER hal_get_reg_trace_0_end_trigger
#define SETTER_FOR_TRACE_0_START_TRIGGER hal_set_reg_trace_0_start_trigger
#define GETTER_FOR_TRACE_0_START_TRIGGER hal_get_reg_trace_0_start_trigger
#define SETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_set_reg_trace_0_tbus_base_addr
#define GETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_get_reg_trace_0_tbus_base_addr
#define SETTER_FOR_TRACE_0_TBUS_CFG hal_set_reg_trace_0_tbus_cfg
#define GETTER_FOR_TRACE_0_TBUS_CFG hal_get_reg_trace_0_tbus_cfg
#define SETTER_FOR_TRACE_0_TRIGGER_CFG hal_set_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_CFG hal_get_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_STATUS hal_get_reg_trace_0_trigger_status
#define SETTER_FOR_TRACE_1_CFG hal_set_reg_trace_1_cfg
#define GETTER_FOR_TRACE_1_CFG hal_get_reg_trace_1_cfg
#define SETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_set_reg_trace_1_dmem_base_addr
#define GETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_get_reg_trace_1_dmem_base_addr
#define SETTER_FOR_TRACE_1_DMEM_CFG hal_set_reg_trace_1_dmem_cfg
#define GETTER_FOR_TRACE_1_DMEM_CFG hal_get_reg_trace_1_dmem_cfg
#define SETTER_FOR_TRACE_1_END_TRIGGER hal_set_reg_trace_1_end_trigger
#define GETTER_FOR_TRACE_1_END_TRIGGER hal_get_reg_trace_1_end_trigger
#define SETTER_FOR_TRACE_1_START_TRIGGER hal_set_reg_trace_1_start_trigger
#define GETTER_FOR_TRACE_1_START_TRIGGER hal_get_reg_trace_1_start_trigger
#define SETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_set_reg_trace_1_tbus_base_addr
#define GETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_get_reg_trace_1_tbus_base_addr
#define SETTER_FOR_TRACE_1_TBUS_CFG hal_set_reg_trace_1_tbus_cfg
#define GETTER_FOR_TRACE_1_TBUS_CFG hal_get_reg_trace_1_tbus_cfg
#define SETTER_FOR_TRACE_1_TRIGGER_CFG hal_set_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_CFG hal_get_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_STATUS hal_get_reg_trace_1_trigger_status
#define SETTER_FOR_TRACE_ACCESS_CTRL hal_set_reg_trace_access_ctrl
#define GETTER_FOR_TRACE_ACCESS_CTRL hal_get_reg_trace_access_ctrl
#define SETTER_FOR_TRACE_DEBUG_SEL hal_set_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DEBUG_SEL hal_get_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DMEM_STATUS hal_get_reg_trace_dmem_status
#define SETTER_FOR_TRACE_MUTEX_LOCK hal_set_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_MUTEX_LOCK hal_get_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_TBUS_STATUS hal_get_reg_trace_tbus_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TRACE) */
#endif /* __HAL_MACROS_H__MODULE_K32_TRACE */


#if defined(IO_DEFS_MODULE_KALIMBA_INTERPROC_INT) 

#ifndef __HAL_MACROS_H__MODULE_KALIMBA_INTERPROC_INT
#define __HAL_MACROS_H__MODULE_KALIMBA_INTERPROC_INT

/* -- Inter-processor interrupt generation registers -- */

 /* Field P0_TO_P1_INTERPROC_EVENT_1 */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_P0_TO_P1_INTERPROC_EVENT_1 P0_TO_P1_INTERPROC_EVENT_1
#define FIELDS_MASKS_SHIFTED_P0_TO_P1_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(P0_TO_P1_INTERPROC_EVENT_1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_P0_TO_P1_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(P0_TO_P1_INTERPROC_EVENT_1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_P0_TO_P1_INTERPROC_EVENT_1 P0_TO_P1_INTERPROC_EVENT_1

 /* Field P0_TO_P1_INTERPROC_EVENT_2 */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_P0_TO_P1_INTERPROC_EVENT_2 P0_TO_P1_INTERPROC_EVENT_2
#define FIELDS_MASKS_SHIFTED_P0_TO_P1_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(P0_TO_P1_INTERPROC_EVENT_2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_P0_TO_P1_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(P0_TO_P1_INTERPROC_EVENT_2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_P0_TO_P1_INTERPROC_EVENT_2 P0_TO_P1_INTERPROC_EVENT_2

 /* Field P1_TO_P0_INTERPROC_EVENT_1 */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_P1_TO_P0_INTERPROC_EVENT_1 P1_TO_P0_INTERPROC_EVENT_1
#define FIELDS_MASKS_SHIFTED_P1_TO_P0_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(P1_TO_P0_INTERPROC_EVENT_1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_P1_TO_P0_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(P1_TO_P0_INTERPROC_EVENT_1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_P1_TO_P0_INTERPROC_EVENT_1 P1_TO_P0_INTERPROC_EVENT_1

 /* Field P1_TO_P0_INTERPROC_EVENT_2 */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_P1_TO_P0_INTERPROC_EVENT_2 P1_TO_P0_INTERPROC_EVENT_2
#define FIELDS_MASKS_SHIFTED_P1_TO_P0_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(P1_TO_P0_INTERPROC_EVENT_2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_P1_TO_P0_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(P1_TO_P0_INTERPROC_EVENT_2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_P1_TO_P0_INTERPROC_EVENT_2 P1_TO_P0_INTERPROC_EVENT_2

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_P0_TO_P1_INTERPROC_EVENT_1_P0_TO_P1_INTERPROC_EVENT_1
#define CHECK_FIELD_TYPE_P0_TO_P1_INTERPROC_EVENT_1_END
#define CHECK_FIELD_TYPE_P0_TO_P1_INTERPROC_EVENT_2_P0_TO_P1_INTERPROC_EVENT_2
#define CHECK_FIELD_TYPE_P0_TO_P1_INTERPROC_EVENT_2_END
#define CHECK_FIELD_TYPE_P1_TO_P0_INTERPROC_EVENT_1_P1_TO_P0_INTERPROC_EVENT_1
#define CHECK_FIELD_TYPE_P1_TO_P0_INTERPROC_EVENT_1_END
#define CHECK_FIELD_TYPE_P1_TO_P0_INTERPROC_EVENT_2_P1_TO_P0_INTERPROC_EVENT_2
#define CHECK_FIELD_TYPE_P1_TO_P0_INTERPROC_EVENT_2_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define P0_TO_P1_INTERPROC_EVENT_1_REG_BITS (1u)
#define hal_set_reg_p0_to_p1_interproc_event_1(x) hal_set_register(P0_TO_P1_INTERPROC_EVENT_1, x, 1)
#define P0_TO_P1_INTERPROC_EVENT_2_REG_BITS (1u)
#define hal_set_reg_p0_to_p1_interproc_event_2(x) hal_set_register(P0_TO_P1_INTERPROC_EVENT_2, x, 1)
#define P1_TO_P0_INTERPROC_EVENT_1_REG_BITS (1u)
#define hal_set_reg_p1_to_p0_interproc_event_1(x) hal_set_register(P1_TO_P0_INTERPROC_EVENT_1, x, 1)
#define P1_TO_P0_INTERPROC_EVENT_2_REG_BITS (1u)
#define hal_set_reg_p1_to_p0_interproc_event_2(x) hal_set_register(P1_TO_P0_INTERPROC_EVENT_2, x, 1)

 /* Workings */
#define SETTER_FOR_P0_TO_P1_INTERPROC_EVENT_1 hal_set_reg_p0_to_p1_interproc_event_1
#define SETTER_FOR_P0_TO_P1_INTERPROC_EVENT_2 hal_set_reg_p0_to_p1_interproc_event_2
#define SETTER_FOR_P1_TO_P0_INTERPROC_EVENT_1 hal_set_reg_p1_to_p0_interproc_event_1
#define SETTER_FOR_P1_TO_P0_INTERPROC_EVENT_2 hal_set_reg_p1_to_p0_interproc_event_2

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_KALIMBA_INTERPROC_INT) */
#endif /* __HAL_MACROS_H__MODULE_KALIMBA_INTERPROC_INT */



#if defined(IO_DEFS_MODULE_APPS_SYS_SQIF_WINDOWS) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_SQIF_WINDOWS
#define __HAL_MACROS_H__MODULE_APPS_SYS_SQIF_WINDOWS

/* -- SQIF Datapath Register Bank. -- */

 /* Field APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_windows__p0_access_permission() ((apps_sys_sqif_windows__p0_access_permission) hal_get_register_field8(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION))
#define hal_set_apps_sys_sqif_windows__p0_access_permission(x) hal_set_register_field(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_WINDOWS__P0_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL

 /* Field APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_windows__p1_access_permission() ((apps_sys_sqif_windows__p1_access_permission) hal_get_register_field8(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION))
#define hal_set_apps_sys_sqif_windows__p1_access_permission(x) hal_set_register_field(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_WINDOWS__P1_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL

 /* Field APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_windows__p2_access_permission() ((apps_sys_sqif_windows__p2_access_permission) hal_get_register_field8(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION))
#define hal_set_apps_sys_sqif_windows__p2_access_permission(x) hal_set_register_field(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_WINDOWS__P2_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL

 /* Field APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_windows__p3_access_permission() ((apps_sys_sqif_windows__p3_access_permission) hal_get_register_field8(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION))
#define hal_set_apps_sys_sqif_windows__p3_access_permission(x) hal_set_register_field(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL,APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_WINDOWS__P3_ACCESS_PERMISSION APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL

 /* Field APPS_SYS_SQIF_WINDOW_OFFSET_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_window_offset() hal_get_register_field32(APPS_SYS_SQIF_WINDOW_OFFSET,APPS_SYS_SQIF_WINDOW_OFFSET)
#define hal_set_apps_sys_sqif_window_offset(x) hal_set_register_field(APPS_SYS_SQIF_WINDOW_OFFSET,APPS_SYS_SQIF_WINDOW_OFFSET,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_WINDOW_OFFSET APPS_SYS_SQIF_WINDOW_OFFSET
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOW_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOW_OFFSET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOW_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOW_OFFSET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_WINDOW_OFFSET APPS_SYS_SQIF_WINDOW_OFFSET

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_WINDOW_OFFSET_APPS_SYS_SQIF_WINDOW_OFFSET
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_WINDOW_OFFSET_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_apps_sys_sqif_windows_access_ctrl(x) hal_set_register(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, x, 1)
#define hal_get_reg_apps_sys_sqif_windows_access_ctrl() hal_get_register(APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL, 1)
#define APPS_SYS_SQIF_WINDOWS_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_apps_sys_sqif_windows_mutex_lock(x) hal_set_register(APPS_SYS_SQIF_WINDOWS_MUTEX_LOCK, x, 1)
#define hal_get_reg_apps_sys_sqif_windows_mutex_lock() hal_get_register(APPS_SYS_SQIF_WINDOWS_MUTEX_LOCK, 1)
#define APPS_SYS_SQIF_WINDOW_OFFSET_REG_BITS (32u)
#define hal_set_reg_apps_sys_sqif_window_offset(x) hal_set_register(APPS_SYS_SQIF_WINDOW_OFFSET, x, 1)
#define hal_get_reg_apps_sys_sqif_window_offset() hal_get_register(APPS_SYS_SQIF_WINDOW_OFFSET, 1)

 /* Workings */
#define SETTER_FOR_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL hal_set_reg_apps_sys_sqif_windows_access_ctrl
#define GETTER_FOR_APPS_SYS_SQIF_WINDOWS_ACCESS_CTRL hal_get_reg_apps_sys_sqif_windows_access_ctrl
#define SETTER_FOR_APPS_SYS_SQIF_WINDOWS_MUTEX_LOCK hal_set_reg_apps_sys_sqif_windows_mutex_lock
#define GETTER_FOR_APPS_SYS_SQIF_WINDOWS_MUTEX_LOCK hal_get_reg_apps_sys_sqif_windows_mutex_lock
#define SETTER_FOR_APPS_SYS_SQIF_WINDOW_OFFSET hal_set_reg_apps_sys_sqif_window_offset
#define GETTER_FOR_APPS_SYS_SQIF_WINDOW_OFFSET hal_get_reg_apps_sys_sqif_window_offset

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_SQIF_WINDOWS) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_SQIF_WINDOWS */

#if defined(IO_DEFS_MODULE_APPS_BANKED_EXCEPTIONS_P1) 

#ifndef __HAL_MACROS_H__MODULE_APPS_BANKED_EXCEPTIONS_P1
#define __HAL_MACROS_H__MODULE_APPS_BANKED_EXCEPTIONS_P1

/* -- Control of banked exceptions for P1 -- */

 /* Field APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_banked_exceptions_p1__p0_access_permission() ((apps_banked_exceptions_p1__p0_access_permission) hal_get_register_field8(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION))
#define hal_set_apps_banked_exceptions_p1__p0_access_permission(x) hal_set_register_field(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_BANKED_EXCEPTIONS_P1__P0_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL

 /* Field APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_banked_exceptions_p1__p1_access_permission() ((apps_banked_exceptions_p1__p1_access_permission) hal_get_register_field8(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION))
#define hal_set_apps_banked_exceptions_p1__p1_access_permission(x) hal_set_register_field(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_BANKED_EXCEPTIONS_P1__P1_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL

 /* Field APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_banked_exceptions_p1__p2_access_permission() ((apps_banked_exceptions_p1__p2_access_permission) hal_get_register_field8(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION))
#define hal_set_apps_banked_exceptions_p1__p2_access_permission(x) hal_set_register_field(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_BANKED_EXCEPTIONS_P1__P2_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL

 /* Field APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_banked_exceptions_p1__p3_access_permission() ((apps_banked_exceptions_p1__p3_access_permission) hal_get_register_field8(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION))
#define hal_set_apps_banked_exceptions_p1__p3_access_permission(x) hal_set_register_field(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL,APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_BANKED_EXCEPTIONS_P1__P3_ACCESS_PERMISSION APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL
#define CHECK_FIELD_TYPE_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_apps_banked_exceptions_p1_access_ctrl(x) hal_set_register(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, x, 1)
#define hal_get_reg_apps_banked_exceptions_p1_access_ctrl() hal_get_register(APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL, 1)
#define APPS_BANKED_EXCEPTIONS_P1_ENABLES_REG_BITS (20u)
#define hal_set_reg_apps_banked_exceptions_p1_enables(x) hal_set_register(APPS_BANKED_EXCEPTIONS_P1_ENABLES, x, 1)
#define hal_get_reg_apps_banked_exceptions_p1_enables() hal_get_register(APPS_BANKED_EXCEPTIONS_P1_ENABLES, 1)
#define APPS_BANKED_EXCEPTIONS_P1_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_apps_banked_exceptions_p1_mutex_lock(x) hal_set_register(APPS_BANKED_EXCEPTIONS_P1_MUTEX_LOCK, x, 1)
#define hal_get_reg_apps_banked_exceptions_p1_mutex_lock() hal_get_register(APPS_BANKED_EXCEPTIONS_P1_MUTEX_LOCK, 1)
#define APPS_BANKED_EXCEPTIONS_P1_STATUS_REG_BITS (20u)
#define hal_set_reg_apps_banked_exceptions_p1_status(x) hal_set_register(APPS_BANKED_EXCEPTIONS_P1_STATUS, x, 1)
#define hal_get_reg_apps_banked_exceptions_p1_status() hal_get_register(APPS_BANKED_EXCEPTIONS_P1_STATUS, 1)

 /* Workings */
#define SETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL hal_set_reg_apps_banked_exceptions_p1_access_ctrl
#define GETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_ACCESS_CTRL hal_get_reg_apps_banked_exceptions_p1_access_ctrl
#define SETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_ENABLES hal_set_reg_apps_banked_exceptions_p1_enables
#define GETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_ENABLES hal_get_reg_apps_banked_exceptions_p1_enables
#define SETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_MUTEX_LOCK hal_set_reg_apps_banked_exceptions_p1_mutex_lock
#define GETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_MUTEX_LOCK hal_get_reg_apps_banked_exceptions_p1_mutex_lock
#define SETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_STATUS hal_set_reg_apps_banked_exceptions_p1_status
#define GETTER_FOR_APPS_BANKED_EXCEPTIONS_P1_STATUS hal_get_reg_apps_banked_exceptions_p1_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_BANKED_EXCEPTIONS_P1) */
#endif /* __HAL_MACROS_H__MODULE_APPS_BANKED_EXCEPTIONS_P1 */

#if defined(IO_DEFS_MODULE_KALIMBA_READ_CACHE) 

#ifndef __HAL_MACROS_H__MODULE_KALIMBA_READ_CACHE
#define __HAL_MACROS_H__MODULE_KALIMBA_READ_CACHE

/* -- Kalimba read cache block configuration registers -- */

 /* Field KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_actual_control_mode() hal_get_register_field8(KALIMBA_READ_CACHE_TRANSITION_STATUS,KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE KALIMBA_READ_CACHE_TRANSITION_STATUS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_ACTUAL_CONTROL_MODE KALIMBA_READ_CACHE_TRANSITION_STATUS

 /* Field KALIMBA_READ_CACHE_BUFF_REQ_CNTR_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_buff_req_cntr() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_BUFF_REQ_CNTR)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_BUFF_REQ_CNTR KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_BUFF_REQ_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_BUFF_REQ_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_BUFF_REQ_CNTR KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_buff_sample_cntr() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_BUFF_SAMPLE_CNTR KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_enable_buffer_in_bypass() hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS)
#define hal_set_kalimba_read_cache_control_enable_buffer_in_bypass(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_ENABLE_BUFFER_IN_BYPASS KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_enable_dm_counters() hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS)
#define hal_set_kalimba_read_cache_control_enable_dm_counters(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_ENABLE_DM_COUNTERS KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_enable_master_counters() hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS)
#define hal_set_kalimba_read_cache_control_enable_master_counters(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_ENABLE_MASTER_COUNTERS KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_enable_pm_counters() hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS)
#define hal_set_kalimba_read_cache_control_enable_pm_counters(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_ENABLE_PM_COUNTERS KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_enable_slave_counters() hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS)
#define hal_set_kalimba_read_cache_control_enable_slave_counters(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_ENABLE_SLAVE_COUNTERS KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_CONTROL_MODE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_control_mode() ((kalimba_read_cache_control_mode) hal_get_register_field8(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_MODE))
#define hal_set_kalimba_read_cache_control_mode(x) hal_set_register_field(KALIMBA_READ_CACHE_CONTROL,KALIMBA_READ_CACHE_CONTROL_MODE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_CONTROL_MODE KALIMBA_READ_CACHE_CONTROL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_CONTROL_MODE KALIMBA_READ_CACHE_CONTROL

 /* Field KALIMBA_READ_CACHE_DEBUG_EN */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DEBUG_EN KALIMBA_READ_CACHE_DEBUG_EN
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DEBUG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DEBUG_EN KALIMBA_READ_CACHE_DEBUG_EN

 /* Field KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_config_dm_abort() hal_get_register_field8(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT)
#define hal_set_kalimba_read_cache_dm_config_dm_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT KALIMBA_READ_CACHE_DM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_CONFIG_DM_ABORT KALIMBA_READ_CACHE_DM_CONFIG

 /* Field KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_config_idle_abort() hal_get_register_field8(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT)
#define hal_set_kalimba_read_cache_dm_config_idle_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT KALIMBA_READ_CACHE_DM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_CONFIG_IDLE_ABORT KALIMBA_READ_CACHE_DM_CONFIG

 /* Field KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_config_pm_abort() hal_get_register_field8(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT)
#define hal_set_kalimba_read_cache_dm_config_pm_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_DM_CONFIG,KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT KALIMBA_READ_CACHE_DM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_CONFIG_PM_ABORT KALIMBA_READ_CACHE_DM_CONFIG

 /* Field KALIMBA_READ_CACHE_DM_HIT_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_hit_counter() hal_get_register_field32(KALIMBA_READ_CACHE_DM_HIT_COUNTER,KALIMBA_READ_CACHE_DM_HIT_COUNTER)
#define hal_set_kalimba_read_cache_dm_hit_counter(x) hal_set_register_field(KALIMBA_READ_CACHE_DM_HIT_COUNTER,KALIMBA_READ_CACHE_DM_HIT_COUNTER,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_HIT_COUNTER KALIMBA_READ_CACHE_DM_HIT_COUNTER
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_HIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_HIT_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_HIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_HIT_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_HIT_COUNTER KALIMBA_READ_CACHE_DM_HIT_COUNTER

 /* Field KALIMBA_READ_CACHE_DM_MISS_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_miss_counter() hal_get_register_field32(KALIMBA_READ_CACHE_DM_MISS_COUNTER,KALIMBA_READ_CACHE_DM_MISS_COUNTER)
#define hal_set_kalimba_read_cache_dm_miss_counter(x) hal_set_register_field(KALIMBA_READ_CACHE_DM_MISS_COUNTER,KALIMBA_READ_CACHE_DM_MISS_COUNTER,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_MISS_COUNTER KALIMBA_READ_CACHE_DM_MISS_COUNTER
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_MISS_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_MISS_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_MISS_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_MISS_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_MISS_COUNTER KALIMBA_READ_CACHE_DM_MISS_COUNTER

 /* Field KALIMBA_READ_CACHE_DM_REQ_STATE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dm_req_state() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_DM_REQ_STATE)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DM_REQ_STATE KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_REQ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_REQ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DM_REQ_STATE KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_DUMMY0_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dummy0() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_DUMMY0)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DUMMY0 KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DUMMY0(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DUMMY0(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DUMMY0 KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_DUMMY1 */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dummy1() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_DUMMY1)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DUMMY1 KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DUMMY1(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DUMMY1(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DUMMY1 KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_DUMMY2_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dummy2() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_DUMMY2)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DUMMY2 KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DUMMY2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DUMMY2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DUMMY2 KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_DUMMY3_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_dummy3() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_DUMMY3)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_DUMMY3 KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DUMMY3(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DUMMY3(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_DUMMY3 KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_FETCH_ID */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_fetch_id() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_FETCH_ID)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_FETCH_ID KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_FETCH_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_FETCH_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_FETCH_ID KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_FETCH_STATE */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_fetch_state() ((kalimba_read_cache_fetch_state) hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_FETCH_STATE))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_FETCH_STATE KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_FETCH_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_FETCH_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_FETCH_STATE KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_FILL_ID */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_fill_id() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_FILL_ID)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_FILL_ID KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_FILL_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_FILL_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_FILL_ID KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_FILL_STATE */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_fill_state() ((kalimba_read_cache_fill_state) hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_FILL_STATE))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_FILL_STATE KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_FILL_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_FILL_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_FILL_STATE KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_FSM_NOT_BUSY */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_fsm_not_busy() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_FSM_NOT_BUSY)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_FSM_NOT_BUSY KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_FSM_NOT_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_FSM_NOT_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_FSM_NOT_BUSY KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_invalidate_num_lines() hal_get_register_field16(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES,KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES)
#define hal_set_kalimba_read_cache_invalidate_num_lines(x) hal_set_register_field(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES,KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES

 /* Field KALIMBA_READ_CACHE_INVALIDATE_START_LINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_invalidate_start_line() hal_get_register_field16(KALIMBA_READ_CACHE_INVALIDATE_START_LINE,KALIMBA_READ_CACHE_INVALIDATE_START_LINE)
#define hal_set_kalimba_read_cache_invalidate_start_line(x) hal_set_register_field(KALIMBA_READ_CACHE_INVALIDATE_START_LINE,KALIMBA_READ_CACHE_INVALIDATE_START_LINE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_INVALIDATE_START_LINE KALIMBA_READ_CACHE_INVALIDATE_START_LINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_INVALIDATE_START_LINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_INVALIDATE_START_LINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_INVALIDATE_START_LINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_INVALIDATE_START_LINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_START_LINE KALIMBA_READ_CACHE_INVALIDATE_START_LINE

 /* Field KALIMBA_READ_CACHE_IS_STUCK */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_is_stuck() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_IS_STUCK)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_IS_STUCK KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_IS_STUCK(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_IS_STUCK(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_IS_STUCK KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_master_wait_counter_dm() hal_get_register_field32(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM,KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM)
#define hal_set_kalimba_read_cache_master_wait_counter_dm(x) hal_set_register_field(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM,KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM

 /* Field KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_master_wait_counter_pm() hal_get_register_field32(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM,KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM)
#define hal_set_kalimba_read_cache_master_wait_counter_pm(x) hal_set_register_field(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM,KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM

 /* Field KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_miss_log_base_addr() hal_get_register_field32(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR,KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR)
#define hal_set_kalimba_read_cache_miss_log_base_addr(x) hal_set_register_field(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR,KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR

 /* Field KALIMBA_READ_CACHE_MISS_LOG_ENABLE */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_miss_log_enable() hal_get_register_field8(KALIMBA_READ_CACHE_MISS_LOG_ENABLE,KALIMBA_READ_CACHE_MISS_LOG_ENABLE)
#define hal_set_kalimba_read_cache_miss_log_enable(x) hal_set_register_field(KALIMBA_READ_CACHE_MISS_LOG_ENABLE,KALIMBA_READ_CACHE_MISS_LOG_ENABLE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MISS_LOG_ENABLE KALIMBA_READ_CACHE_MISS_LOG_ENABLE
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_ENABLE KALIMBA_READ_CACHE_MISS_LOG_ENABLE

 /* Field KALIMBA_READ_CACHE_MISS_LOG_INDEX_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_miss_log_index() hal_get_register_field16(KALIMBA_READ_CACHE_MISS_LOG_INDEX,KALIMBA_READ_CACHE_MISS_LOG_INDEX)
#define hal_set_kalimba_read_cache_miss_log_index(x) hal_set_register_field(KALIMBA_READ_CACHE_MISS_LOG_INDEX,KALIMBA_READ_CACHE_MISS_LOG_INDEX,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MISS_LOG_INDEX KALIMBA_READ_CACHE_MISS_LOG_INDEX
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_INDEX, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_INDEX, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_INDEX KALIMBA_READ_CACHE_MISS_LOG_INDEX

 /* Field KALIMBA_READ_CACHE_MISS_LOG_SIZE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_miss_log_size() hal_get_register_field16(KALIMBA_READ_CACHE_MISS_LOG_SIZE,KALIMBA_READ_CACHE_MISS_LOG_SIZE)
#define hal_set_kalimba_read_cache_miss_log_size(x) hal_set_register_field(KALIMBA_READ_CACHE_MISS_LOG_SIZE,KALIMBA_READ_CACHE_MISS_LOG_SIZE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_MISS_LOG_SIZE KALIMBA_READ_CACHE_MISS_LOG_SIZE
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_SIZE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_SIZE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_MISS_LOG_SIZE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_MISS_LOG_SIZE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_SIZE KALIMBA_READ_CACHE_MISS_LOG_SIZE

 /* Field KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_params_2way_line_length() hal_get_register_field8(KALIMBA_READ_CACHE_PARAMS,KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH KALIMBA_READ_CACHE_PARAMS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PARAMS_2WAY_LINE_LENGTH KALIMBA_READ_CACHE_PARAMS

 /* Field KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_params_direct_line_length() hal_get_register_field8(KALIMBA_READ_CACHE_PARAMS,KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH KALIMBA_READ_CACHE_PARAMS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PARAMS_DIRECT_LINE_LENGTH KALIMBA_READ_CACHE_PARAMS

 /* Field KALIMBA_READ_CACHE_PARAMS_EXTENT_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_params_extent() hal_get_register_field8(KALIMBA_READ_CACHE_PARAMS,KALIMBA_READ_CACHE_PARAMS_EXTENT)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PARAMS_EXTENT KALIMBA_READ_CACHE_PARAMS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PARAMS_EXTENT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PARAMS_EXTENT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PARAMS_EXTENT KALIMBA_READ_CACHE_PARAMS

 /* Field KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_params_word_width() hal_get_register_field8(KALIMBA_READ_CACHE_PARAMS,KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH KALIMBA_READ_CACHE_PARAMS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PARAMS_WORD_WIDTH KALIMBA_READ_CACHE_PARAMS

 /* Field KALIMBA_READ_CACHE_PENDING_INVALDIATE */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pending_invaldiate() hal_get_register_field8(KALIMBA_READ_CACHE_TRANSITION_STATUS,KALIMBA_READ_CACHE_PENDING_INVALDIATE)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PENDING_INVALDIATE KALIMBA_READ_CACHE_TRANSITION_STATUS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PENDING_INVALDIATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PENDING_INVALDIATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PENDING_INVALDIATE KALIMBA_READ_CACHE_TRANSITION_STATUS

 /* Field KALIMBA_READ_CACHE_PENDING_MODE_CHANE */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pending_mode_chane() hal_get_register_field8(KALIMBA_READ_CACHE_TRANSITION_STATUS,KALIMBA_READ_CACHE_PENDING_MODE_CHANE)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PENDING_MODE_CHANE KALIMBA_READ_CACHE_TRANSITION_STATUS
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PENDING_MODE_CHANE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PENDING_MODE_CHANE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PENDING_MODE_CHANE KALIMBA_READ_CACHE_TRANSITION_STATUS

 /* Field KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_config_dm_abort() hal_get_register_field8(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT)
#define hal_set_kalimba_read_cache_pm_config_dm_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT KALIMBA_READ_CACHE_PM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_CONFIG_DM_ABORT KALIMBA_READ_CACHE_PM_CONFIG

 /* Field KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_config_idle_abort() hal_get_register_field8(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT)
#define hal_set_kalimba_read_cache_pm_config_idle_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT KALIMBA_READ_CACHE_PM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_CONFIG_IDLE_ABORT KALIMBA_READ_CACHE_PM_CONFIG

 /* Field KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_config_pm_abort() hal_get_register_field8(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT)
#define hal_set_kalimba_read_cache_pm_config_pm_abort(x) hal_set_register_field(KALIMBA_READ_CACHE_PM_CONFIG,KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT KALIMBA_READ_CACHE_PM_CONFIG
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_CONFIG_PM_ABORT KALIMBA_READ_CACHE_PM_CONFIG

 /* Field KALIMBA_READ_CACHE_PM_HIT_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_hit_counter() hal_get_register_field32(KALIMBA_READ_CACHE_PM_HIT_COUNTER,KALIMBA_READ_CACHE_PM_HIT_COUNTER)
#define hal_set_kalimba_read_cache_pm_hit_counter(x) hal_set_register_field(KALIMBA_READ_CACHE_PM_HIT_COUNTER,KALIMBA_READ_CACHE_PM_HIT_COUNTER,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_HIT_COUNTER KALIMBA_READ_CACHE_PM_HIT_COUNTER
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_HIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_HIT_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_HIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_HIT_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_HIT_COUNTER KALIMBA_READ_CACHE_PM_HIT_COUNTER

 /* Field KALIMBA_READ_CACHE_PM_MISS_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_miss_counter() hal_get_register_field32(KALIMBA_READ_CACHE_PM_MISS_COUNTER,KALIMBA_READ_CACHE_PM_MISS_COUNTER)
#define hal_set_kalimba_read_cache_pm_miss_counter(x) hal_set_register_field(KALIMBA_READ_CACHE_PM_MISS_COUNTER,KALIMBA_READ_CACHE_PM_MISS_COUNTER,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_MISS_COUNTER KALIMBA_READ_CACHE_PM_MISS_COUNTER
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_MISS_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_MISS_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_MISS_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_MISS_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_MISS_COUNTER KALIMBA_READ_CACHE_PM_MISS_COUNTER

 /* Field KALIMBA_READ_CACHE_PM_REQ_STATE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_pm_req_state() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_PM_REQ_STATE)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_PM_REQ_STATE KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_REQ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_REQ_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_PM_REQ_STATE KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_REQUEST_MODE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_request_mode() ((kalimba_read_cache_request_mode) hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_REQUEST_MODE))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_REQUEST_MODE KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_REQUEST_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_REQUEST_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_REQUEST_MODE KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_REQ_CANCELED */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_req_canceled() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,KALIMBA_READ_CACHE_REQ_CANCELED)
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_REQ_CANCELED KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_REQ_CANCELED(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_REQ_CANCELED(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_REQ_CANCELED KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_slave_wait_counter_dm() hal_get_register_field32(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM)
#define hal_set_kalimba_read_cache_slave_wait_counter_dm(x) hal_set_register_field(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM

 /* Field KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_slave_wait_counter() hal_get_register_field32(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER)
#define hal_set_kalimba_read_cache_slave_wait_counter(x) hal_set_register_field(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER

 /* Field KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM_LSB */
 /* Accessor macros */
#define hal_get_kalimba_read_cache_slave_wait_counter_pm() hal_get_register_field32(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM)
#define hal_set_kalimba_read_cache_slave_wait_counter_pm(x) hal_set_register_field(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM,KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM

 /* Field KALIMBA_READ_CACHE_SOFT_RESET */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE_SOFT_RESET KALIMBA_READ_CACHE_SOFT_RESET
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SOFT_RESET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_SOFT_RESET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE_SOFT_RESET KALIMBA_READ_CACHE_SOFT_RESET

 /* Field KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_read_cache__p0_access_permission() ((kalimba_read_cache__p0_access_permission) hal_get_register_field8(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION))
#define hal_set_kalimba_read_cache__p0_access_permission(x) hal_set_register_field(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE__P0_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL

 /* Field KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_read_cache__p1_access_permission() ((kalimba_read_cache__p1_access_permission) hal_get_register_field8(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION))
#define hal_set_kalimba_read_cache__p1_access_permission(x) hal_set_register_field(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE__P1_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL

 /* Field KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_read_cache__p2_access_permission() ((kalimba_read_cache__p2_access_permission) hal_get_register_field8(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION))
#define hal_set_kalimba_read_cache__p2_access_permission(x) hal_set_register_field(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE__P2_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL

 /* Field KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_read_cache__p3_access_permission() ((kalimba_read_cache__p3_access_permission) hal_get_register_field8(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION))
#define hal_set_kalimba_read_cache__p3_access_permission(x) hal_set_register_field(KALIMBA_READ_CACHE_ACCESS_CTRL,KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_READ_CACHE__P3_ACCESS_PERMISSION KALIMBA_READ_CACHE_ACCESS_CTRL

 /* Field REQ_HIT */
 /* Accessor macros */
#define hal_get_req_hit() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,REQ_HIT)
 /* Workings */
#define TYPE_OF_REQ_HIT KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_REQ_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REQ_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REQ_HIT KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field REQ_ID_OUT */
 /* Accessor macros */
#define hal_get_req_id_out() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,REQ_ID_OUT)
 /* Workings */
#define TYPE_OF_REQ_ID_OUT KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_REQ_ID_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REQ_ID_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REQ_ID_OUT KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field REQ_MISS */
 /* Accessor macros */
#define hal_get_req_miss() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,REQ_MISS)
 /* Workings */
#define TYPE_OF_REQ_MISS KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_REQ_MISS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REQ_MISS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REQ_MISS KALIMBA_READ_CACHE_DEBUG_DATA

 /* Field REQ_RD_EN_OUT */
 /* Accessor macros */
#define hal_get_req_rd_en_out() hal_get_register_field8(KALIMBA_READ_CACHE_DEBUG_DATA,REQ_RD_EN_OUT)
 /* Workings */
#define TYPE_OF_REQ_RD_EN_OUT KALIMBA_READ_CACHE_DEBUG_DATA
#define FIELDS_MASKS_SHIFTED_REQ_RD_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REQ_RD_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REQ_RD_EN_OUT KALIMBA_READ_CACHE_DEBUG_DATA

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_ACCESS_CTRL_KALIMBA_READ_CACHE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_CONTROL_KALIMBA_READ_CACHE_CONTROL
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_CONTROL_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DEBUG_DATA_KALIMBA_READ_CACHE_DEBUG_DATA
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DEBUG_DATA_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DEBUG_EN_KALIMBA_READ_CACHE_DEBUG_EN
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DEBUG_EN_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_CONFIG_KALIMBA_READ_CACHE_DM_CONFIG
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_CONFIG_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_HIT_COUNTER_KALIMBA_READ_CACHE_DM_HIT_COUNTER
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_HIT_COUNTER_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_MISS_COUNTER_KALIMBA_READ_CACHE_DM_MISS_COUNTER
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_DM_MISS_COUNTER_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_INVALIDATE_START_LINE_KALIMBA_READ_CACHE_INVALIDATE_START_LINE
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_INVALIDATE_START_LINE_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_ENABLE_KALIMBA_READ_CACHE_MISS_LOG_ENABLE
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_ENABLE_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_INDEX_KALIMBA_READ_CACHE_MISS_LOG_INDEX
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_INDEX_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_SIZE_KALIMBA_READ_CACHE_MISS_LOG_SIZE
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_MISS_LOG_SIZE_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PARAMS_KALIMBA_READ_CACHE_PARAMS
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PARAMS_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_CONFIG_KALIMBA_READ_CACHE_PM_CONFIG
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_CONFIG_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_HIT_COUNTER_KALIMBA_READ_CACHE_PM_HIT_COUNTER
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_HIT_COUNTER_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_MISS_COUNTER_KALIMBA_READ_CACHE_PM_MISS_COUNTER
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_PM_MISS_COUNTER_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SOFT_RESET_KALIMBA_READ_CACHE_SOFT_RESET
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_SOFT_RESET_END
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_TRANSITION_STATUS_KALIMBA_READ_CACHE_TRANSITION_STATUS
#define CHECK_FIELD_TYPE_KALIMBA_READ_CACHE_TRANSITION_STATUS_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DEBUG_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DEBUG_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DEBUG_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_DM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_DM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PARAMS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PARAMS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PARAMS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_PM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_PM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_READ_CACHE_TRANSITION_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_READ_CACHE_TRANSITION_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_READ_CACHE_TRANSITION_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define KALIMBA_READ_CACHE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_kalimba_read_cache_access_ctrl(x) hal_set_register(KALIMBA_READ_CACHE_ACCESS_CTRL, x, 1)
#define hal_get_reg_kalimba_read_cache_access_ctrl() hal_get_register(KALIMBA_READ_CACHE_ACCESS_CTRL, 1)
#define KALIMBA_READ_CACHE_CONTROL_REG_BITS (7u)
#define hal_set_reg_kalimba_read_cache_control(x) hal_set_register(KALIMBA_READ_CACHE_CONTROL, x, 1)
#define hal_get_reg_kalimba_read_cache_control() hal_get_register(KALIMBA_READ_CACHE_CONTROL, 1)
#define KALIMBA_READ_CACHE_DEBUG_DATA_REG_BITS (32u)
#define hal_get_reg_kalimba_read_cache_debug_data() hal_get_register(KALIMBA_READ_CACHE_DEBUG_DATA, 1)
#define KALIMBA_READ_CACHE_DEBUG_EN_REG_BITS (1u)
#define hal_set_reg_kalimba_read_cache_debug_en(x) hal_set_register(KALIMBA_READ_CACHE_DEBUG_EN, x, 1)
#define KALIMBA_READ_CACHE_DM_CONFIG_REG_BITS (3u)
#define hal_set_reg_kalimba_read_cache_dm_config(x) hal_set_register(KALIMBA_READ_CACHE_DM_CONFIG, x, 1)
#define hal_get_reg_kalimba_read_cache_dm_config() hal_get_register(KALIMBA_READ_CACHE_DM_CONFIG, 1)
#define KALIMBA_READ_CACHE_DM_HIT_COUNTER_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_dm_hit_counter(x) hal_set_register(KALIMBA_READ_CACHE_DM_HIT_COUNTER, x, 1)
#define hal_get_reg_kalimba_read_cache_dm_hit_counter() hal_get_register(KALIMBA_READ_CACHE_DM_HIT_COUNTER, 1)
#define KALIMBA_READ_CACHE_DM_MISS_COUNTER_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_dm_miss_counter(x) hal_set_register(KALIMBA_READ_CACHE_DM_MISS_COUNTER, x, 1)
#define hal_get_reg_kalimba_read_cache_dm_miss_counter() hal_get_register(KALIMBA_READ_CACHE_DM_MISS_COUNTER, 1)
#define KALIMBA_READ_CACHE_INVALIDATE_CONTROL_REG_BITS (2u)
#define hal_set_reg_kalimba_read_cache_invalidate_control(x) hal_set_register(KALIMBA_READ_CACHE_INVALIDATE_CONTROL, x, 1)
#define hal_get_reg_kalimba_read_cache_invalidate_control() hal_get_register(KALIMBA_READ_CACHE_INVALIDATE_CONTROL, 1)
#define KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES_REG_BITS (16u)
#define hal_set_reg_kalimba_read_cache_invalidate_num_lines(x) hal_set_register(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES, x, 1)
#define hal_get_reg_kalimba_read_cache_invalidate_num_lines() hal_get_register(KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES, 1)
#define KALIMBA_READ_CACHE_INVALIDATE_START_LINE_REG_BITS (16u)
#define hal_set_reg_kalimba_read_cache_invalidate_start_line(x) hal_set_register(KALIMBA_READ_CACHE_INVALIDATE_START_LINE, x, 1)
#define hal_get_reg_kalimba_read_cache_invalidate_start_line() hal_get_register(KALIMBA_READ_CACHE_INVALIDATE_START_LINE, 1)
#define KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_master_wait_counter_dm(x) hal_set_register(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM, x, 1)
#define hal_get_reg_kalimba_read_cache_master_wait_counter_dm() hal_get_register(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM, 1)
#define KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_master_wait_counter_pm(x) hal_set_register(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM, x, 1)
#define hal_get_reg_kalimba_read_cache_master_wait_counter_pm() hal_get_register(KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM, 1)
#define KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_miss_log_base_addr(x) hal_set_register(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR, x, 1)
#define hal_get_reg_kalimba_read_cache_miss_log_base_addr() hal_get_register(KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR, 1)
#define KALIMBA_READ_CACHE_MISS_LOG_ENABLE_REG_BITS (1u)
#define hal_set_reg_kalimba_read_cache_miss_log_enable(x) hal_set_register(KALIMBA_READ_CACHE_MISS_LOG_ENABLE, x, 1)
#define hal_get_reg_kalimba_read_cache_miss_log_enable() hal_get_register(KALIMBA_READ_CACHE_MISS_LOG_ENABLE, 1)
#define KALIMBA_READ_CACHE_MISS_LOG_INDEX_REG_BITS (16u)
#define hal_set_reg_kalimba_read_cache_miss_log_index(x) hal_set_register(KALIMBA_READ_CACHE_MISS_LOG_INDEX, x, 1)
#define hal_get_reg_kalimba_read_cache_miss_log_index() hal_get_register(KALIMBA_READ_CACHE_MISS_LOG_INDEX, 1)
#define KALIMBA_READ_CACHE_MISS_LOG_SIZE_REG_BITS (16u)
#define hal_set_reg_kalimba_read_cache_miss_log_size(x) hal_set_register(KALIMBA_READ_CACHE_MISS_LOG_SIZE, x, 1)
#define hal_get_reg_kalimba_read_cache_miss_log_size() hal_get_register(KALIMBA_READ_CACHE_MISS_LOG_SIZE, 1)
#define KALIMBA_READ_CACHE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_kalimba_read_cache_mutex_lock(x) hal_set_register(KALIMBA_READ_CACHE_MUTEX_LOCK, x, 1)
#define hal_get_reg_kalimba_read_cache_mutex_lock() hal_get_register(KALIMBA_READ_CACHE_MUTEX_LOCK, 1)
#define KALIMBA_READ_CACHE_PARAMS_REG_BITS (32u)
#define hal_get_reg_kalimba_read_cache_params() hal_get_register(KALIMBA_READ_CACHE_PARAMS, 1)
#define KALIMBA_READ_CACHE_PM_CONFIG_REG_BITS (3u)
#define hal_set_reg_kalimba_read_cache_pm_config(x) hal_set_register(KALIMBA_READ_CACHE_PM_CONFIG, x, 1)
#define hal_get_reg_kalimba_read_cache_pm_config() hal_get_register(KALIMBA_READ_CACHE_PM_CONFIG, 1)
#define KALIMBA_READ_CACHE_PM_HIT_COUNTER_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_pm_hit_counter(x) hal_set_register(KALIMBA_READ_CACHE_PM_HIT_COUNTER, x, 1)
#define hal_get_reg_kalimba_read_cache_pm_hit_counter() hal_get_register(KALIMBA_READ_CACHE_PM_HIT_COUNTER, 1)
#define KALIMBA_READ_CACHE_PM_MISS_COUNTER_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_pm_miss_counter(x) hal_set_register(KALIMBA_READ_CACHE_PM_MISS_COUNTER, x, 1)
#define hal_get_reg_kalimba_read_cache_pm_miss_counter() hal_get_register(KALIMBA_READ_CACHE_PM_MISS_COUNTER, 1)
#define KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_slave_wait_counter(x) hal_set_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER, x, 1)
#define hal_get_reg_kalimba_read_cache_slave_wait_counter() hal_get_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER, 1)
#define KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_slave_wait_counter_dm(x) hal_set_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM, x, 1)
#define hal_get_reg_kalimba_read_cache_slave_wait_counter_dm() hal_get_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM, 1)
#define KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM_REG_BITS (32u)
#define hal_set_reg_kalimba_read_cache_slave_wait_counter_pm(x) hal_set_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM, x, 1)
#define hal_get_reg_kalimba_read_cache_slave_wait_counter_pm() hal_get_register(KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM, 1)
#define KALIMBA_READ_CACHE_SOFT_RESET_REG_BITS (1u)
#define hal_set_reg_kalimba_read_cache_soft_reset(x) hal_set_register(KALIMBA_READ_CACHE_SOFT_RESET, x, 1)
#define KALIMBA_READ_CACHE_TRANSITION_STATUS_REG_BITS (4u)
#define hal_get_reg_kalimba_read_cache_transition_status() hal_get_register(KALIMBA_READ_CACHE_TRANSITION_STATUS, 1)

 /* Workings */
#define SETTER_FOR_KALIMBA_READ_CACHE_ACCESS_CTRL hal_set_reg_kalimba_read_cache_access_ctrl
#define GETTER_FOR_KALIMBA_READ_CACHE_ACCESS_CTRL hal_get_reg_kalimba_read_cache_access_ctrl
#define SETTER_FOR_KALIMBA_READ_CACHE_CONTROL hal_set_reg_kalimba_read_cache_control
#define GETTER_FOR_KALIMBA_READ_CACHE_CONTROL hal_get_reg_kalimba_read_cache_control
#define GETTER_FOR_KALIMBA_READ_CACHE_DEBUG_DATA hal_get_reg_kalimba_read_cache_debug_data
#define SETTER_FOR_KALIMBA_READ_CACHE_DEBUG_EN hal_set_reg_kalimba_read_cache_debug_en
#define SETTER_FOR_KALIMBA_READ_CACHE_DM_CONFIG hal_set_reg_kalimba_read_cache_dm_config
#define GETTER_FOR_KALIMBA_READ_CACHE_DM_CONFIG hal_get_reg_kalimba_read_cache_dm_config
#define SETTER_FOR_KALIMBA_READ_CACHE_DM_HIT_COUNTER hal_set_reg_kalimba_read_cache_dm_hit_counter
#define GETTER_FOR_KALIMBA_READ_CACHE_DM_HIT_COUNTER hal_get_reg_kalimba_read_cache_dm_hit_counter
#define SETTER_FOR_KALIMBA_READ_CACHE_DM_MISS_COUNTER hal_set_reg_kalimba_read_cache_dm_miss_counter
#define GETTER_FOR_KALIMBA_READ_CACHE_DM_MISS_COUNTER hal_get_reg_kalimba_read_cache_dm_miss_counter
#define SETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_CONTROL hal_set_reg_kalimba_read_cache_invalidate_control
#define GETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_CONTROL hal_get_reg_kalimba_read_cache_invalidate_control
#define SETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES hal_set_reg_kalimba_read_cache_invalidate_num_lines
#define GETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_NUM_LINES hal_get_reg_kalimba_read_cache_invalidate_num_lines
#define SETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_START_LINE hal_set_reg_kalimba_read_cache_invalidate_start_line
#define GETTER_FOR_KALIMBA_READ_CACHE_INVALIDATE_START_LINE hal_get_reg_kalimba_read_cache_invalidate_start_line
#define SETTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM hal_set_reg_kalimba_read_cache_master_wait_counter_dm
#define GETTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_DM hal_get_reg_kalimba_read_cache_master_wait_counter_dm
#define SETTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM hal_set_reg_kalimba_read_cache_master_wait_counter_pm
#define GETTER_FOR_KALIMBA_READ_CACHE_MASTER_WAIT_COUNTER_PM hal_get_reg_kalimba_read_cache_master_wait_counter_pm
#define SETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR hal_set_reg_kalimba_read_cache_miss_log_base_addr
#define GETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_BASE_ADDR hal_get_reg_kalimba_read_cache_miss_log_base_addr
#define SETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_ENABLE hal_set_reg_kalimba_read_cache_miss_log_enable
#define GETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_ENABLE hal_get_reg_kalimba_read_cache_miss_log_enable
#define SETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_INDEX hal_set_reg_kalimba_read_cache_miss_log_index
#define GETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_INDEX hal_get_reg_kalimba_read_cache_miss_log_index
#define SETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_SIZE hal_set_reg_kalimba_read_cache_miss_log_size
#define GETTER_FOR_KALIMBA_READ_CACHE_MISS_LOG_SIZE hal_get_reg_kalimba_read_cache_miss_log_size
#define SETTER_FOR_KALIMBA_READ_CACHE_MUTEX_LOCK hal_set_reg_kalimba_read_cache_mutex_lock
#define GETTER_FOR_KALIMBA_READ_CACHE_MUTEX_LOCK hal_get_reg_kalimba_read_cache_mutex_lock
#define GETTER_FOR_KALIMBA_READ_CACHE_PARAMS hal_get_reg_kalimba_read_cache_params
#define SETTER_FOR_KALIMBA_READ_CACHE_PM_CONFIG hal_set_reg_kalimba_read_cache_pm_config
#define GETTER_FOR_KALIMBA_READ_CACHE_PM_CONFIG hal_get_reg_kalimba_read_cache_pm_config
#define SETTER_FOR_KALIMBA_READ_CACHE_PM_HIT_COUNTER hal_set_reg_kalimba_read_cache_pm_hit_counter
#define GETTER_FOR_KALIMBA_READ_CACHE_PM_HIT_COUNTER hal_get_reg_kalimba_read_cache_pm_hit_counter
#define SETTER_FOR_KALIMBA_READ_CACHE_PM_MISS_COUNTER hal_set_reg_kalimba_read_cache_pm_miss_counter
#define GETTER_FOR_KALIMBA_READ_CACHE_PM_MISS_COUNTER hal_get_reg_kalimba_read_cache_pm_miss_counter
#define SETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER hal_set_reg_kalimba_read_cache_slave_wait_counter
#define GETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER hal_get_reg_kalimba_read_cache_slave_wait_counter
#define SETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM hal_set_reg_kalimba_read_cache_slave_wait_counter_dm
#define GETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_DM hal_get_reg_kalimba_read_cache_slave_wait_counter_dm
#define SETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM hal_set_reg_kalimba_read_cache_slave_wait_counter_pm
#define GETTER_FOR_KALIMBA_READ_CACHE_SLAVE_WAIT_COUNTER_PM hal_get_reg_kalimba_read_cache_slave_wait_counter_pm
#define SETTER_FOR_KALIMBA_READ_CACHE_SOFT_RESET hal_set_reg_kalimba_read_cache_soft_reset
#define GETTER_FOR_KALIMBA_READ_CACHE_TRANSITION_STATUS hal_get_reg_kalimba_read_cache_transition_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_KALIMBA_READ_CACHE) */
#endif /* __HAL_MACROS_H__MODULE_KALIMBA_READ_CACHE */







#if defined(IO_DEFS_MODULE_BITSERIAL0) 

#ifndef __HAL_MACROS_H__MODULE_BITSERIAL0
#define __HAL_MACROS_H__MODULE_BITSERIAL0

/* -- Bitserializer regs -- */

 /* Field BITSERIAL0_BUFF_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_buff_handle_rx_buffer() hal_get_register_field8(BITSERIAL0_RX_BUFFER,BITSERIAL0_BUFF_HANDLE)
#define hal_set_bitserial0_buff_handle_rx_buffer(x) hal_set_register_field(BITSERIAL0_RX_BUFFER,BITSERIAL0_BUFF_HANDLE,(x))
#define hal_get_bitserial0_buff_handle_rx_buffer2() hal_get_register_field8(BITSERIAL0_RX_BUFFER2,BITSERIAL0_BUFF_HANDLE)
#define hal_set_bitserial0_buff_handle_rx_buffer2(x) hal_set_register_field(BITSERIAL0_RX_BUFFER2,BITSERIAL0_BUFF_HANDLE,(x))
#define hal_get_bitserial0_buff_handle_tx_buffer() hal_get_register_field8(BITSERIAL0_TX_BUFFER,BITSERIAL0_BUFF_HANDLE)
#define hal_set_bitserial0_buff_handle_tx_buffer(x) hal_set_register_field(BITSERIAL0_TX_BUFFER,BITSERIAL0_BUFF_HANDLE,(x))
#define hal_get_bitserial0_buff_handle_tx_buffer2() hal_get_register_field8(BITSERIAL0_TX_BUFFER2,BITSERIAL0_BUFF_HANDLE)
#define hal_set_bitserial0_buff_handle_tx_buffer2(x) hal_set_register_field(BITSERIAL0_TX_BUFFER2,BITSERIAL0_BUFF_HANDLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_BUFF_HANDLE BITSERIAL0_BUFFER_ENUM
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_BUFF_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_BUFF_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_BUFF_HANDLE BITSERIAL0_BUFFER_ENUM

 /* Field BITSERIAL0_BUSY */
 /* Accessor macros */
#define hal_get_bitserial0_busy() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL0_BUSY BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_BUSY BITSERIAL0_STATUS

 /* Field BITSERIAL0_CLK_DIVIDE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_clk_divide() hal_get_register_field8(BITSERIAL0_CLK_CONTROL,BITSERIAL0_CLK_DIVIDE)
#define hal_set_bitserial0_clk_divide(x) hal_set_register_field(BITSERIAL0_CLK_CONTROL,BITSERIAL0_CLK_DIVIDE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLK_DIVIDE BITSERIAL0_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLK_DIVIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLK_DIVIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLK_DIVIDE BITSERIAL0_CLK_CONTROL

 /* Field BITSERIAL0_CLK_RATE_HI_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_clk_rate_hi() hal_get_register_field16(BITSERIAL0_CLK_RATE_HI,BITSERIAL0_CLK_RATE_HI)
#define hal_set_bitserial0_clk_rate_hi(x) hal_set_register_field(BITSERIAL0_CLK_RATE_HI,BITSERIAL0_CLK_RATE_HI,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLK_RATE_HI BITSERIAL0_CLK_RATE_HI
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLK_RATE_HI(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_RATE_HI, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLK_RATE_HI(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_RATE_HI, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLK_RATE_HI BITSERIAL0_CLK_RATE_HI

 /* Field BITSERIAL0_CLK_RATE_LO_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_clk_rate_lo() hal_get_register_field16(BITSERIAL0_CLK_RATE_LO,BITSERIAL0_CLK_RATE_LO)
#define hal_set_bitserial0_clk_rate_lo(x) hal_set_register_field(BITSERIAL0_CLK_RATE_LO,BITSERIAL0_CLK_RATE_LO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLK_RATE_LO BITSERIAL0_CLK_RATE_LO
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLK_RATE_LO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_RATE_LO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLK_RATE_LO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_RATE_LO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLK_RATE_LO BITSERIAL0_CLK_RATE_LO

 /* Field BITSERIAL0_CLK_SAMP_OFFSET_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_clk_samp_offset() hal_get_register_field16(BITSERIAL0_CLK_SAMP_OFFSET,BITSERIAL0_CLK_SAMP_OFFSET)
#define hal_set_bitserial0_clk_samp_offset(x) hal_set_register_field(BITSERIAL0_CLK_SAMP_OFFSET,BITSERIAL0_CLK_SAMP_OFFSET,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLK_SAMP_OFFSET BITSERIAL0_CLK_SAMP_OFFSET
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLK_SAMP_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_SAMP_OFFSET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLK_SAMP_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_SAMP_OFFSET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLK_SAMP_OFFSET BITSERIAL0_CLK_SAMP_OFFSET

 /* Field BITSERIAL0_CLR_SLAVE_READ_FIFO */
 /* Accessor macros */
#define hal_get_bitserial0_clr_slave_read_fifo() hal_get_register_field8(BITSERIAL0_CONFIG3,BITSERIAL0_CLR_SLAVE_READ_FIFO)
#define hal_set_bitserial0_clr_slave_read_fifo(x) hal_set_register_field(BITSERIAL0_CONFIG3,BITSERIAL0_CLR_SLAVE_READ_FIFO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLR_SLAVE_READ_FIFO BITSERIAL0_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLR_SLAVE_READ_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLR_SLAVE_READ_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLR_SLAVE_READ_FIFO BITSERIAL0_CONFIG3

 /* Field BITSERIAL0_CLR_SLAVE_WRITE_FIFO */
 /* Accessor macros */
#define hal_get_bitserial0_clr_slave_write_fifo() hal_get_register_field8(BITSERIAL0_CONFIG3,BITSERIAL0_CLR_SLAVE_WRITE_FIFO)
#define hal_set_bitserial0_clr_slave_write_fifo(x) hal_set_register_field(BITSERIAL0_CONFIG3,BITSERIAL0_CLR_SLAVE_WRITE_FIFO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CLR_SLAVE_WRITE_FIFO BITSERIAL0_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLR_SLAVE_WRITE_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLR_SLAVE_WRITE_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CLR_SLAVE_WRITE_FIFO BITSERIAL0_CONFIG3

 /* Field BITSERIAL0_CONFIG2_COMBO_MODE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_combo_mode() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_COMBO_MODE)
#define hal_set_bitserial0_config2_combo_mode(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_COMBO_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_COMBO_MODE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_COMBO_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_COMBO_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_COMBO_MODE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_data_ready_word_disable() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE)
#define hal_set_bitserial0_config2_data_ready_word_disable(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_DATA_READY_WORD_DISABLE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_config2_debug_sel() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DEBUG_SEL)
#define hal_set_bitserial0_config2_debug_sel(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_DEBUG_SEL BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_DEBUG_SEL BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT */
 /* Accessor macros */
#define hal_get_bitserial0_config2_disable_underflow_int() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT)
#define hal_set_bitserial0_config2_disable_underflow_int(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_DISABLE_UNDERFLOW_INT BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_DOUT_IDLE_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_config2_dout_idle_sel() ((bitserial0_config2_dout_idle_sel) hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DOUT_IDLE_SEL))
#define hal_set_bitserial0_config2_dout_idle_sel(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_DOUT_IDLE_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_DOUT_IDLE_SEL BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_DOUT_IDLE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_DOUT_IDLE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_DOUT_IDLE_SEL BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_force_sel_active() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE)
#define hal_set_bitserial0_config2_force_sel_active(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_FORCE_SEL_ACTIVE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_i2c_sl_clk_stretch_disable() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE)
#define hal_set_bitserial0_config2_i2c_sl_clk_stretch_disable(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_SEL_EN2 */
 /* Accessor macros */
#define hal_get_bitserial0_config2_sel_en2() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SEL_EN2)
#define hal_set_bitserial0_config2_sel_en2(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SEL_EN2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_SEL_EN2 BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_SEL_EN2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_SEL_EN2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_SEL_EN2 BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_slave_10bit_addr_mode() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE)
#define hal_set_bitserial0_config2_slave_10bit_addr_mode(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_SLAVE_10BIT_ADDR_MODE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config2_slave_any_cmd_byte_en() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN)
#define hal_set_bitserial0_config2_slave_any_cmd_byte_en(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_SLAVE_ANY_CMD_BYTE_EN BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_SLAVE_MODE */
 /* Accessor macros */
#define hal_get_bitserial0_config2_slave_mode() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_MODE)
#define hal_set_bitserial0_config2_slave_mode(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_SLAVE_MODE BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_SLAVE_MODE BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH */
 /* Accessor macros */
#define hal_get_bitserial0_config2_slave_read_mode_switch() ((bitserial0_config2_slave_read_mode_switch) hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH))
#define hal_set_bitserial0_config2_slave_read_mode_switch(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_SLAVE_READ_MODE_SWITCH BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2 */
 /* Accessor macros */
#define hal_get_bitserial0_config2_stop_token_disable2() hal_get_register_field8(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2)
#define hal_set_bitserial0_config2_stop_token_disable2(x) hal_set_register_field(BITSERIAL0_CONFIG2,BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2 BITSERIAL0_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG2_STOP_TOKEN_DISABLE2 BITSERIAL0_CONFIG2

 /* Field BITSERIAL0_CONFIG3_ACT_ON_NAK_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_config3_act_on_nak() hal_get_register_field8(BITSERIAL0_CONFIG3,BITSERIAL0_CONFIG3_ACT_ON_NAK)
#define hal_set_bitserial0_config3_act_on_nak(x) hal_set_register_field(BITSERIAL0_CONFIG3,BITSERIAL0_CONFIG3_ACT_ON_NAK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG3_ACT_ON_NAK BITSERIAL0_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG3_ACT_ON_NAK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG3_ACT_ON_NAK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG3_ACT_ON_NAK BITSERIAL0_CONFIG3

 /* Field BITSERIAL0_CONFIG_BITREVERSE_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_bitreverse_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_BITREVERSE_EN)
#define hal_set_bitserial0_config_bitreverse_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_BITREVERSE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_BITREVERSE_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_BITREVERSE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_BITREVERSE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_BITREVERSE_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_BYTESWAP_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_byteswap_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_BYTESWAP_EN)
#define hal_set_bitserial0_config_byteswap_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_BYTESWAP_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_BYTESWAP_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_BYTESWAP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_BYTESWAP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_BYTESWAP_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_CLEAR_STICKY_ACK */
 /* Accessor macros */
#define hal_get_bitserial0_config_clear_sticky_ack() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLEAR_STICKY_ACK)
#define hal_set_bitserial0_config_clear_sticky_ack(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLEAR_STICKY_ACK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_CLEAR_STICKY_ACK BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_CLEAR_STICKY_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_CLEAR_STICKY_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_CLEAR_STICKY_ACK BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_CLK_INVERT */
 /* Accessor macros */
#define hal_get_bitserial0_config_clk_invert() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLK_INVERT)
#define hal_set_bitserial0_config_clk_invert(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLK_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_CLK_INVERT BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_CLK_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_CLK_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_CLK_INVERT BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_CLK_OFFSET_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_clk_offset_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLK_OFFSET_EN)
#define hal_set_bitserial0_config_clk_offset_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_CLK_OFFSET_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_CLK_OFFSET_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_CLK_OFFSET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_CLK_OFFSET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_CLK_OFFSET_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_DIN_INVERT */
 /* Accessor macros */
#define hal_get_bitserial0_config_din_invert() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_DIN_INVERT)
#define hal_set_bitserial0_config_din_invert(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_DIN_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_DIN_INVERT BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_DIN_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_DIN_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_DIN_INVERT BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_DOUT_INVERT */
 /* Accessor macros */
#define hal_get_bitserial0_config_dout_invert() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_DOUT_INVERT)
#define hal_set_bitserial0_config_dout_invert(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_DOUT_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_DOUT_INVERT BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_DOUT_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_DOUT_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_DOUT_INVERT BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_I2C_MODE_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_i2c_mode_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_I2C_MODE_EN)
#define hal_set_bitserial0_config_i2c_mode_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_I2C_MODE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_I2C_MODE_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_I2C_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_I2C_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_I2C_MODE_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_int_event_curator_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN)
#define hal_set_bitserial0_config_int_event_curator_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_INT_EVENT_CURATOR_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_int_event_subsystem_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN)
#define hal_set_bitserial0_config_int_event_subsystem_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_INT_EVENT_SUBSYSTEM_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_neg_edge_samp_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN)
#define hal_set_bitserial0_config_neg_edge_samp_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_NEG_EDGE_SAMP_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_posedge_launch_mode_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN)
#define hal_set_bitserial0_config_posedge_launch_mode_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_POSEDGE_LAUNCH_MODE_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_SEL_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_sel_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_EN)
#define hal_set_bitserial0_config_sel_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_SEL_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_SEL_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_SEL_INVERT */
 /* Accessor macros */
#define hal_get_bitserial0_config_sel_invert() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_INVERT)
#define hal_set_bitserial0_config_sel_invert(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_SEL_INVERT BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_SEL_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_SEL_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_SEL_INVERT BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_SEL_TIME2_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_config_sel_time2() hal_get_register_field8(BITSERIAL0_CONFIG_SEL_TIME2,BITSERIAL0_CONFIG_SEL_TIME2)
#define hal_set_bitserial0_config_sel_time2(x) hal_set_register_field(BITSERIAL0_CONFIG_SEL_TIME2,BITSERIAL0_CONFIG_SEL_TIME2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_SEL_TIME2 BITSERIAL0_CONFIG_SEL_TIME2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG_SEL_TIME2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG_SEL_TIME2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_SEL_TIME2 BITSERIAL0_CONFIG_SEL_TIME2

 /* Field BITSERIAL0_CONFIG_SEL_TIME_EN */
 /* Accessor macros */
#define hal_get_bitserial0_config_sel_time_en() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_TIME_EN)
#define hal_set_bitserial0_config_sel_time_en(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_SEL_TIME_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_SEL_TIME_EN BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_SEL_TIME_EN BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CONFIG_SEL_TIME_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_config_sel_time() hal_get_register_field16(BITSERIAL0_CONFIG_SEL_TIME,BITSERIAL0_CONFIG_SEL_TIME)
#define hal_set_bitserial0_config_sel_time(x) hal_set_register_field(BITSERIAL0_CONFIG_SEL_TIME,BITSERIAL0_CONFIG_SEL_TIME,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_SEL_TIME BITSERIAL0_CONFIG_SEL_TIME
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG_SEL_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_SEL_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG_SEL_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_SEL_TIME BITSERIAL0_CONFIG_SEL_TIME

 /* Field BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial0_config_stop_token_disable() hal_get_register_field8(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE)
#define hal_set_bitserial0_config_stop_token_disable(x) hal_set_register_field(BITSERIAL0_CONFIG,BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE BITSERIAL0_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CONFIG_STOP_TOKEN_DISABLE BITSERIAL0_CONFIG

 /* Field BITSERIAL0_CURATOR_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_curator_ssid() hal_get_register_field8(BITSERIAL0_CURATOR_SSID,BITSERIAL0_CURATOR_SSID)
#define hal_set_bitserial0_curator_ssid(x) hal_set_register_field(BITSERIAL0_CURATOR_SSID,BITSERIAL0_CURATOR_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_CURATOR_SSID BITSERIAL0_CURATOR_SSID
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CURATOR_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CURATOR_SSID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CURATOR_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CURATOR_SSID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_CURATOR_SSID BITSERIAL0_CURATOR_SSID

 /* Field BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_debug_sel_slave_core_sel() hal_get_register_field8(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL)
#define hal_set_bitserial0_debug_sel_slave_core_sel(x) hal_set_register_field(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL BITSERIAL0_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEBUG_SEL_SLAVE_CORE_SEL BITSERIAL0_DEBUG_SEL

 /* Field BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE */
 /* Accessor macros */
#define hal_get_bitserial0_debug_sel_slave_mem_core() hal_get_register_field8(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE)
#define hal_set_bitserial0_debug_sel_slave_mem_core(x) hal_set_register_field(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE BITSERIAL0_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_CORE BITSERIAL0_DEBUG_SEL

 /* Field BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_debug_sel_slave_mem_sel() hal_get_register_field8(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL)
#define hal_set_bitserial0_debug_sel_slave_mem_sel(x) hal_set_register_field(BITSERIAL0_DEBUG_SEL,BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL BITSERIAL0_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEBUG_SEL_SLAVE_MEM_SEL BITSERIAL0_DEBUG_SEL

 /* Field BITSERIAL0_DEEP_SLEEP_ACTIVE */
 /* Accessor macros */
#define hal_get_bitserial0_deep_sleep_active() hal_get_register_field8(BITSERIAL0_DEEP_SLEEP_ACTIVE,BITSERIAL0_DEEP_SLEEP_ACTIVE)
#define hal_set_bitserial0_deep_sleep_active(x) hal_set_register_field(BITSERIAL0_DEEP_SLEEP_ACTIVE,BITSERIAL0_DEEP_SLEEP_ACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEEP_SLEEP_ACTIVE BITSERIAL0_DEEP_SLEEP_ACTIVE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEEP_SLEEP_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEEP_SLEEP_ACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEEP_SLEEP_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEEP_SLEEP_ACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEEP_SLEEP_ACTIVE BITSERIAL0_DEEP_SLEEP_ACTIVE

 /* Field BITSERIAL0_DEEP_SLEEP_CDC_BUSY */
 /* Accessor macros */
#define hal_get_bitserial0_deep_sleep_cdc_busy() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_DEEP_SLEEP_CDC_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEEP_SLEEP_CDC_BUSY BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEEP_SLEEP_CDC_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEEP_SLEEP_CDC_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEEP_SLEEP_CDC_BUSY BITSERIAL0_STATUS

 /* Field BITSERIAL0_DEGLITCH_EN_CLOCK */
 /* Accessor macros */
#define hal_get_bitserial0_deglitch_en_clock() hal_get_register_field8(BITSERIAL0_DEGLITCH_EN,BITSERIAL0_DEGLITCH_EN_CLOCK)
#define hal_set_bitserial0_deglitch_en_clock(x) hal_set_register_field(BITSERIAL0_DEGLITCH_EN,BITSERIAL0_DEGLITCH_EN_CLOCK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEGLITCH_EN_CLOCK BITSERIAL0_DEGLITCH_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEGLITCH_EN_CLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEGLITCH_EN_CLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEGLITCH_EN_CLOCK BITSERIAL0_DEGLITCH_EN

 /* Field BITSERIAL0_DEGLITCH_EN_DATA */
 /* Accessor macros */
#define hal_get_bitserial0_deglitch_en_data() hal_get_register_field8(BITSERIAL0_DEGLITCH_EN,BITSERIAL0_DEGLITCH_EN_DATA)
#define hal_set_bitserial0_deglitch_en_data(x) hal_set_register_field(BITSERIAL0_DEGLITCH_EN,BITSERIAL0_DEGLITCH_EN_DATA,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_DEGLITCH_EN_DATA BITSERIAL0_DEGLITCH_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEGLITCH_EN_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEGLITCH_EN_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_DEGLITCH_EN_DATA BITSERIAL0_DEGLITCH_EN

 /* Field BITSERIAL0_EVENT */
 /* Accessor macros */
#define hal_get_bitserial0_event() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_EVENT)
 /* Workings */
#define TYPE_OF_BITSERIAL0_EVENT BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_EVENT BITSERIAL0_STATUS

 /* Field BITSERIAL0_FAILED */
 /* Accessor macros */
#define hal_get_bitserial0_failed() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_FAILED)
 /* Workings */
#define TYPE_OF_BITSERIAL0_FAILED BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_FAILED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_FAILED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_FAILED BITSERIAL0_STATUS

 /* Field BITSERIAL0_FIFO_OVERFLOW */
 /* Accessor macros */
#define hal_get_bitserial0_fifo_overflow() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_FIFO_OVERFLOW)
 /* Workings */
#define TYPE_OF_BITSERIAL0_FIFO_OVERFLOW BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_FIFO_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_FIFO_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_FIFO_OVERFLOW BITSERIAL0_STATUS

 /* Field BITSERIAL0_FIFO_UNDERFLOW */
 /* Accessor macros */
#define hal_get_bitserial0_fifo_underflow() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_FIFO_UNDERFLOW)
 /* Workings */
#define TYPE_OF_BITSERIAL0_FIFO_UNDERFLOW BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_FIFO_UNDERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_FIFO_UNDERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_FIFO_UNDERFLOW BITSERIAL0_STATUS

 /* Field BITSERIAL0_I2C_ACKS_HISTORY_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_acks_history() hal_get_register_field16(BITSERIAL0_I2C_ACKS,BITSERIAL0_I2C_ACKS_HISTORY)
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_ACKS_HISTORY BITSERIAL0_I2C_ACKS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_ACKS_HISTORY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_ACKS_HISTORY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_ACKS_HISTORY BITSERIAL0_I2C_ACKS

 /* Field BITSERIAL0_I2C_ACKS_STICKY */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_acks_sticky() hal_get_register_field8(BITSERIAL0_I2C_ACKS,BITSERIAL0_I2C_ACKS_STICKY)
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_ACKS_STICKY BITSERIAL0_I2C_ACKS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_ACKS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_ACKS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_ACKS_STICKY BITSERIAL0_I2C_ACKS

 /* Field BITSERIAL0_I2C_ADDRESS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_address() hal_get_register_field16(BITSERIAL0_I2C_ADDRESS,BITSERIAL0_I2C_ADDRESS)
#define hal_set_bitserial0_i2c_address(x) hal_set_register_field(BITSERIAL0_I2C_ADDRESS,BITSERIAL0_I2C_ADDRESS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_ADDRESS BITSERIAL0_I2C_ADDRESS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_ADDRESS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ADDRESS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_ADDRESS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ADDRESS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_ADDRESS BITSERIAL0_I2C_ADDRESS

 /* Field BITSERIAL0_I2C_BUS_BUSY */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_bus_busy() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_I2C_BUS_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_BUS_BUSY BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_BUS_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_BUS_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_BUS_BUSY BITSERIAL0_STATUS

 /* Field BITSERIAL0_I2C_LOST_ARBITRATION */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_lost_arbitration() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_I2C_LOST_ARBITRATION)
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_LOST_ARBITRATION BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_LOST_ARBITRATION(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_LOST_ARBITRATION(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_LOST_ARBITRATION BITSERIAL0_STATUS

 /* Field BITSERIAL0_I2C_NACK */
 /* Accessor macros */
#define hal_get_bitserial0_i2c_nack() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_I2C_NACK)
 /* Workings */
#define TYPE_OF_BITSERIAL0_I2C_NACK BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_NACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_NACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_I2C_NACK BITSERIAL0_STATUS

 /* Field BITSERIAL0_INTERBYTE_SPACING_CYCLES_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interbyte_spacing_cycles() hal_get_register_field16(BITSERIAL0_INTERBYTE_SPACING,BITSERIAL0_INTERBYTE_SPACING_CYCLES)
#define hal_set_bitserial0_interbyte_spacing_cycles(x) hal_set_register_field(BITSERIAL0_INTERBYTE_SPACING,BITSERIAL0_INTERBYTE_SPACING_CYCLES,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERBYTE_SPACING_CYCLES BITSERIAL0_INTERBYTE_SPACING
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERBYTE_SPACING_CYCLES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERBYTE_SPACING_CYCLES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERBYTE_SPACING_CYCLES BITSERIAL0_INTERBYTE_SPACING

 /* Field BITSERIAL0_INTERBYTE_SPACING_EN */
 /* Accessor macros */
#define hal_get_bitserial0_interbyte_spacing_en() hal_get_register_field8(BITSERIAL0_INTERBYTE_SPACING,BITSERIAL0_INTERBYTE_SPACING_EN)
#define hal_set_bitserial0_interbyte_spacing_en(x) hal_set_register_field(BITSERIAL0_INTERBYTE_SPACING,BITSERIAL0_INTERBYTE_SPACING_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERBYTE_SPACING_EN BITSERIAL0_INTERBYTE_SPACING
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERBYTE_SPACING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERBYTE_SPACING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERBYTE_SPACING_EN BITSERIAL0_INTERBYTE_SPACING

 /* Field BITSERIAL0_INTERRUPT_CLEAR_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interrupt_clear() hal_get_register_field16(BITSERIAL0_INTERRUPT_CLEAR,BITSERIAL0_INTERRUPT_CLEAR)
#define hal_set_bitserial0_interrupt_clear(x) hal_set_register_field(BITSERIAL0_INTERRUPT_CLEAR,BITSERIAL0_INTERRUPT_CLEAR,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERRUPT_CLEAR BITSERIAL0_INTERRUPT_CLEAR
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERRUPT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERRUPT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERRUPT_CLEAR BITSERIAL0_INTERRUPT_CLEAR

 /* Field BITSERIAL0_INTERRUPT_EN_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interrupt_en() hal_get_register_field16(BITSERIAL0_INTERRUPT_EN,BITSERIAL0_INTERRUPT_EN)
#define hal_set_bitserial0_interrupt_en(x) hal_set_register_field(BITSERIAL0_INTERRUPT_EN,BITSERIAL0_INTERRUPT_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERRUPT_EN BITSERIAL0_INTERRUPT_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERRUPT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERRUPT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERRUPT_EN BITSERIAL0_INTERRUPT_EN

 /* Field BITSERIAL0_INTERRUPT_SOURCE_CLEAR_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interrupt_source_clear() hal_get_register_field16(BITSERIAL0_INTERRUPT_SOURCE_CLEAR,BITSERIAL0_INTERRUPT_SOURCE_CLEAR)
#define hal_set_bitserial0_interrupt_source_clear(x) hal_set_register_field(BITSERIAL0_INTERRUPT_SOURCE_CLEAR,BITSERIAL0_INTERRUPT_SOURCE_CLEAR,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERRUPT_SOURCE_CLEAR BITSERIAL0_INTERRUPT_SOURCE_CLEAR
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERRUPT_SOURCE_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_SOURCE_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERRUPT_SOURCE_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_SOURCE_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERRUPT_SOURCE_CLEAR BITSERIAL0_INTERRUPT_SOURCE_CLEAR

 /* Field BITSERIAL0_INTERRUPT_SOURCE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interrupt_source() hal_get_register_field16(BITSERIAL0_INTERRUPT_SOURCE,BITSERIAL0_INTERRUPT_SOURCE)
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERRUPT_SOURCE BITSERIAL0_INTERRUPT_SOURCE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERRUPT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_SOURCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERRUPT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_SOURCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERRUPT_SOURCE BITSERIAL0_INTERRUPT_SOURCE

 /* Field BITSERIAL0_INTERRUPT_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_interrupt_status() hal_get_register_field16(BITSERIAL0_INTERRUPT_STATUS,BITSERIAL0_INTERRUPT_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL0_INTERRUPT_STATUS BITSERIAL0_INTERRUPT_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERRUPT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERRUPT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERRUPT_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_INTERRUPT_STATUS BITSERIAL0_INTERRUPT_STATUS

 /* Field BITSERIAL0_MAIN_CLK_REQ_EN */
 /* Accessor macros */
#define hal_get_bitserial0_main_clk_req_en() hal_get_register_field8(BITSERIAL0_CLK_CONTROL,BITSERIAL0_MAIN_CLK_REQ_EN)
#define hal_set_bitserial0_main_clk_req_en(x) hal_set_register_field(BITSERIAL0_CLK_CONTROL,BITSERIAL0_MAIN_CLK_REQ_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_MAIN_CLK_REQ_EN BITSERIAL0_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_MAIN_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_MAIN_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_MAIN_CLK_REQ_EN BITSERIAL0_CLK_CONTROL

 /* Field BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN */
 /* Accessor macros */
#define hal_get_bitserial0_master_slave_clk_req_en() hal_get_register_field8(BITSERIAL0_CLK_CONTROL,BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN)
#define hal_set_bitserial0_master_slave_clk_req_en(x) hal_set_register_field(BITSERIAL0_CLK_CONTROL,BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN BITSERIAL0_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_MASTER_SLAVE_CLK_REQ_EN BITSERIAL0_CLK_CONTROL

 /* Field BITSERIAL0_PART_2 */
 /* Accessor macros */
#define hal_get_bitserial0_part_2() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_PART_2)
 /* Workings */
#define TYPE_OF_BITSERIAL0_PART_2 BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_PART_2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_PART_2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_PART_2 BITSERIAL0_STATUS

 /* Field BITSERIAL0_READ_RESP_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_read_resp_status() hal_get_register_field8(BITSERIAL0_ERROR_STATUS,BITSERIAL0_READ_RESP_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL0_READ_RESP_STATUS BITSERIAL0_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_READ_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_READ_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_READ_RESP_STATUS BITSERIAL0_ERROR_STATUS

 /* Field BITSERIAL0_REMOTE_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_remote_ssid_rx_buffer() hal_get_register_field8(BITSERIAL0_RX_BUFFER,BITSERIAL0_REMOTE_SSID)
#define hal_set_bitserial0_remote_ssid_rx_buffer(x) hal_set_register_field(BITSERIAL0_RX_BUFFER,BITSERIAL0_REMOTE_SSID,(x))
#define hal_get_bitserial0_remote_ssid_rx_buffer2() hal_get_register_field8(BITSERIAL0_RX_BUFFER2,BITSERIAL0_REMOTE_SSID)
#define hal_set_bitserial0_remote_ssid_rx_buffer2(x) hal_set_register_field(BITSERIAL0_RX_BUFFER2,BITSERIAL0_REMOTE_SSID,(x))
#define hal_get_bitserial0_remote_ssid_tx_buffer() hal_get_register_field8(BITSERIAL0_TX_BUFFER,BITSERIAL0_REMOTE_SSID)
#define hal_set_bitserial0_remote_ssid_tx_buffer(x) hal_set_register_field(BITSERIAL0_TX_BUFFER,BITSERIAL0_REMOTE_SSID,(x))
#define hal_get_bitserial0_remote_ssid_tx_buffer2() hal_get_register_field8(BITSERIAL0_TX_BUFFER2,BITSERIAL0_REMOTE_SSID)
#define hal_set_bitserial0_remote_ssid_tx_buffer2(x) hal_set_register_field(BITSERIAL0_TX_BUFFER2,BITSERIAL0_REMOTE_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_REMOTE_SSID BITSERIAL0_BUFFER_ENUM
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_REMOTE_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_REMOTE_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_REMOTE_SSID BITSERIAL0_BUFFER_ENUM

 /* Field BITSERIAL0_REMOTE_SUBSYSTEM_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_remote_subsystem_ssid() hal_get_register_field8(BITSERIAL0_REMOTE_SUBSYSTEM_SSID,BITSERIAL0_REMOTE_SUBSYSTEM_SSID)
#define hal_set_bitserial0_remote_subsystem_ssid(x) hal_set_register_field(BITSERIAL0_REMOTE_SUBSYSTEM_SSID,BITSERIAL0_REMOTE_SUBSYSTEM_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_REMOTE_SUBSYSTEM_SSID BITSERIAL0_REMOTE_SUBSYSTEM_SSID
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_REMOTE_SUBSYSTEM_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_REMOTE_SUBSYSTEM_SSID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_REMOTE_SUBSYSTEM_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_REMOTE_SUBSYSTEM_SSID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_REMOTE_SUBSYSTEM_SSID BITSERIAL0_REMOTE_SUBSYSTEM_SSID

 /* Field BITSERIAL0_RWB */
 /* Accessor macros */
#define hal_get_bitserial0_rwb() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_RWB)
 /* Workings */
#define TYPE_OF_BITSERIAL0_RWB BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_RWB(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_RWB(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_RWB BITSERIAL0_STATUS

 /* Field BITSERIAL0_SET_SEL_INACTIVE */
 /* Accessor macros */
#define hal_get_bitserial0_set_sel_inactive() hal_get_register_field8(BITSERIAL0_SET_SEL_INACTIVE,BITSERIAL0_SET_SEL_INACTIVE)
#define hal_set_bitserial0_set_sel_inactive(x) hal_set_register_field(BITSERIAL0_SET_SEL_INACTIVE,BITSERIAL0_SET_SEL_INACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_SET_SEL_INACTIVE BITSERIAL0_SET_SEL_INACTIVE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SET_SEL_INACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SET_SEL_INACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SET_SEL_INACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SET_SEL_INACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SET_SEL_INACTIVE BITSERIAL0_SET_SEL_INACTIVE

 /* Field BITSERIAL0_SLAVE_DATA_READY_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_data_ready_byte() hal_get_register_field8(BITSERIAL0_SLAVE_DATA_READY_BYTE,BITSERIAL0_SLAVE_DATA_READY_BYTE)
#define hal_set_bitserial0_slave_data_ready_byte(x) hal_set_register_field(BITSERIAL0_SLAVE_DATA_READY_BYTE,BITSERIAL0_SLAVE_DATA_READY_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_DATA_READY_BYTE BITSERIAL0_SLAVE_DATA_READY_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_DATA_READY_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_DATA_READY_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_DATA_READY_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_DATA_READY_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_DATA_READY_BYTE BITSERIAL0_SLAVE_DATA_READY_BYTE

 /* Field BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_num_protocol_words() hal_get_register_field16(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS,BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS)
#define hal_set_bitserial0_slave_num_protocol_words(x) hal_set_register_field(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS,BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS

 /* Field BITSERIAL0_SLAVE_READ_COMMAND_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_read_command_byte() hal_get_register_field8(BITSERIAL0_SLAVE_READ_COMMAND_BYTE,BITSERIAL0_SLAVE_READ_COMMAND_BYTE)
#define hal_set_bitserial0_slave_read_command_byte(x) hal_set_register_field(BITSERIAL0_SLAVE_READ_COMMAND_BYTE,BITSERIAL0_SLAVE_READ_COMMAND_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_READ_COMMAND_BYTE BITSERIAL0_SLAVE_READ_COMMAND_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_READ_COMMAND_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_READ_COMMAND_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_READ_COMMAND_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_READ_COMMAND_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_READ_COMMAND_BYTE BITSERIAL0_SLAVE_READ_COMMAND_BYTE

 /* Field BITSERIAL0_SLAVE_READ_COUNT_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_read_count() hal_get_register_field16(BITSERIAL0_SLAVE_READ_COUNT,BITSERIAL0_SLAVE_READ_COUNT)
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_READ_COUNT BITSERIAL0_SLAVE_READ_COUNT
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_READ_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_READ_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_READ_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_READ_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_READ_COUNT BITSERIAL0_SLAVE_READ_COUNT

 /* Field BITSERIAL0_SLAVE_START_STOP_BITS_ERROR */
 /* Accessor macros */
#define hal_get_bitserial0_slave_start_stop_bits_error() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_SLAVE_START_STOP_BITS_ERROR)
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_START_STOP_BITS_ERROR BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_START_STOP_BITS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_START_STOP_BITS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_START_STOP_BITS_ERROR BITSERIAL0_STATUS

 /* Field BITSERIAL0_SLAVE_UNDERFLOW_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_underflow_byte() hal_get_register_field8(BITSERIAL0_SLAVE_UNDERFLOW_BYTE,BITSERIAL0_SLAVE_UNDERFLOW_BYTE)
#define hal_set_bitserial0_slave_underflow_byte(x) hal_set_register_field(BITSERIAL0_SLAVE_UNDERFLOW_BYTE,BITSERIAL0_SLAVE_UNDERFLOW_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_UNDERFLOW_BYTE BITSERIAL0_SLAVE_UNDERFLOW_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_UNDERFLOW_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_UNDERFLOW_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_UNDERFLOW_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_UNDERFLOW_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_UNDERFLOW_BYTE BITSERIAL0_SLAVE_UNDERFLOW_BYTE

 /* Field BITSERIAL0_SLAVE_WRITE_COUNT_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_slave_write_count() hal_get_register_field16(BITSERIAL0_SLAVE_WRITE_COUNT,BITSERIAL0_SLAVE_WRITE_COUNT)
 /* Workings */
#define TYPE_OF_BITSERIAL0_SLAVE_WRITE_COUNT BITSERIAL0_SLAVE_WRITE_COUNT
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_SLAVE_WRITE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_WRITE_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_SLAVE_WRITE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_SLAVE_WRITE_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_SLAVE_WRITE_COUNT BITSERIAL0_SLAVE_WRITE_COUNT

 /* Field BITSERIAL0_STREAMING_EN */
 /* Accessor macros */
#define hal_get_bitserial0_streaming_en() hal_get_register_field8(BITSERIAL0_CONFIG3,BITSERIAL0_STREAMING_EN)
#define hal_set_bitserial0_streaming_en(x) hal_set_register_field(BITSERIAL0_CONFIG3,BITSERIAL0_STREAMING_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_STREAMING_EN BITSERIAL0_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_STREAMING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_STREAMING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_STREAMING_EN BITSERIAL0_CONFIG3

 /* Field BITSERIAL0_STREAMING_THRESHOLD_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_streaming_threshold() hal_get_register_field16(BITSERIAL0_STREAMING_THRESHOLD,BITSERIAL0_STREAMING_THRESHOLD)
#define hal_set_bitserial0_streaming_threshold(x) hal_set_register_field(BITSERIAL0_STREAMING_THRESHOLD,BITSERIAL0_STREAMING_THRESHOLD,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_STREAMING_THRESHOLD BITSERIAL0_STREAMING_THRESHOLD
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_STREAMING_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STREAMING_THRESHOLD, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_STREAMING_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STREAMING_THRESHOLD, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_STREAMING_THRESHOLD BITSERIAL0_STREAMING_THRESHOLD

 /* Field BITSERIAL0_TRANSACTION_PART2 */
 /* Accessor macros */
#define hal_get_bitserial0_transaction_part2() hal_get_register_field8(BITSERIAL0_ERROR_STATUS,BITSERIAL0_TRANSACTION_PART2)
 /* Workings */
#define TYPE_OF_BITSERIAL0_TRANSACTION_PART2 BITSERIAL0_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TRANSACTION_PART2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TRANSACTION_PART2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_TRANSACTION_PART2 BITSERIAL0_ERROR_STATUS

 /* Field BITSERIAL0_TXRX_LENGTH2_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_txrx_length2() hal_get_register_field16(BITSERIAL0_TXRX_LENGTH2,BITSERIAL0_TXRX_LENGTH2)
#define hal_set_bitserial0_txrx_length2(x) hal_set_register_field(BITSERIAL0_TXRX_LENGTH2,BITSERIAL0_TXRX_LENGTH2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_TXRX_LENGTH2 BITSERIAL0_TXRX_LENGTH2
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TXRX_LENGTH2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TXRX_LENGTH2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TXRX_LENGTH2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TXRX_LENGTH2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_TXRX_LENGTH2 BITSERIAL0_TXRX_LENGTH2

 /* Field BITSERIAL0_TXRX_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_txrx_length() hal_get_register_field16(BITSERIAL0_TXRX_LENGTH,BITSERIAL0_TXRX_LENGTH)
#define hal_set_bitserial0_txrx_length(x) hal_set_register_field(BITSERIAL0_TXRX_LENGTH,BITSERIAL0_TXRX_LENGTH,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_TXRX_LENGTH BITSERIAL0_TXRX_LENGTH
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TXRX_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TXRX_LENGTH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TXRX_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TXRX_LENGTH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_TXRX_LENGTH BITSERIAL0_TXRX_LENGTH

 /* Field BITSERIAL0_TX_NOT_CONFIGURED */
 /* Accessor macros */
#define hal_get_bitserial0_tx_not_configured() hal_get_register_field8(BITSERIAL0_STATUS,BITSERIAL0_TX_NOT_CONFIGURED)
 /* Workings */
#define TYPE_OF_BITSERIAL0_TX_NOT_CONFIGURED BITSERIAL0_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TX_NOT_CONFIGURED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TX_NOT_CONFIGURED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_TX_NOT_CONFIGURED BITSERIAL0_STATUS

 /* Field BITSERIAL0_VML_RESP_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_vml_resp_status() hal_get_register_field8(BITSERIAL0_ERROR_STATUS,BITSERIAL0_VML_RESP_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL0_VML_RESP_STATUS BITSERIAL0_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_VML_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_VML_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_VML_RESP_STATUS BITSERIAL0_ERROR_STATUS

 /* Field BITSERIAL0_WORDS_SENT_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_words_sent() hal_get_register_field16(BITSERIAL0_WORDS_SENT,BITSERIAL0_WORDS_SENT)
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORDS_SENT BITSERIAL0_WORDS_SENT
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORDS_SENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORDS_SENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORDS_SENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORDS_SENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORDS_SENT BITSERIAL0_WORDS_SENT

 /* Field BITSERIAL0_WORD_CONFIG_NUM_BYTES_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_word_config_num_bytes() hal_get_register_field8(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_BYTES)
#define hal_set_bitserial0_word_config_num_bytes(x) hal_set_register_field(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_BYTES,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORD_CONFIG_NUM_BYTES BITSERIAL0_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_BYTES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_BYTES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORD_CONFIG_NUM_BYTES BITSERIAL0_WORD_CONFIG

 /* Field BITSERIAL0_WORD_CONFIG_NUM_START_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_word_config_num_start() hal_get_register_field8(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_START)
#define hal_set_bitserial0_word_config_num_start(x) hal_set_register_field(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_START,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORD_CONFIG_NUM_START BITSERIAL0_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_START(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_START(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORD_CONFIG_NUM_START BITSERIAL0_WORD_CONFIG

 /* Field BITSERIAL0_WORD_CONFIG_NUM_STOP_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_word_config_num_stop() hal_get_register_field8(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_STOP)
#define hal_set_bitserial0_word_config_num_stop(x) hal_set_register_field(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_NUM_STOP,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORD_CONFIG_NUM_STOP BITSERIAL0_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_STOP(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG_NUM_STOP(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORD_CONFIG_NUM_STOP BITSERIAL0_WORD_CONFIG

 /* Field BITSERIAL0_WORD_CONFIG_START_BITS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_word_config_start_bits() hal_get_register_field8(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_START_BITS)
#define hal_set_bitserial0_word_config_start_bits(x) hal_set_register_field(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_START_BITS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORD_CONFIG_START_BITS BITSERIAL0_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG_START_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG_START_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORD_CONFIG_START_BITS BITSERIAL0_WORD_CONFIG

 /* Field BITSERIAL0_WORD_CONFIG_STOP_BITS_LSB */
 /* Accessor macros */
#define hal_get_bitserial0_word_config_stop_bits() hal_get_register_field8(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_STOP_BITS)
#define hal_set_bitserial0_word_config_stop_bits(x) hal_set_register_field(BITSERIAL0_WORD_CONFIG,BITSERIAL0_WORD_CONFIG_STOP_BITS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL0_WORD_CONFIG_STOP_BITS BITSERIAL0_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG_STOP_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG_STOP_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL0_WORD_CONFIG_STOP_BITS BITSERIAL0_WORD_CONFIG

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_BITSERIAL0_BUFFER_ENUM_BITSERIAL0_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL0_BUFFER_ENUM_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_CONTROL_BITSERIAL0_CLK_CONTROL
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_CONTROL_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_RATE_HI_BITSERIAL0_CLK_RATE_HI
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_RATE_HI_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_RATE_LO_BITSERIAL0_CLK_RATE_LO
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_RATE_LO_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_SAMP_OFFSET_BITSERIAL0_CLK_SAMP_OFFSET
#define CHECK_FIELD_TYPE_BITSERIAL0_CLK_SAMP_OFFSET_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_BITSERIAL0_CONFIG
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG2_BITSERIAL0_CONFIG2
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG2_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG3_BITSERIAL0_CONFIG3
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG3_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_SEL_TIME_BITSERIAL0_CONFIG_SEL_TIME
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_SEL_TIME_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_SEL_TIME2_BITSERIAL0_CONFIG_SEL_TIME2
#define CHECK_FIELD_TYPE_BITSERIAL0_CONFIG_SEL_TIME2_END
#define CHECK_FIELD_TYPE_BITSERIAL0_CURATOR_SSID_BITSERIAL0_CURATOR_SSID
#define CHECK_FIELD_TYPE_BITSERIAL0_CURATOR_SSID_END
#define CHECK_FIELD_TYPE_BITSERIAL0_DEBUG_SEL_BITSERIAL0_DEBUG_SEL
#define CHECK_FIELD_TYPE_BITSERIAL0_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_BITSERIAL0_DEEP_SLEEP_ACTIVE_BITSERIAL0_DEEP_SLEEP_ACTIVE
#define CHECK_FIELD_TYPE_BITSERIAL0_DEEP_SLEEP_ACTIVE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_DEGLITCH_EN_BITSERIAL0_DEGLITCH_EN
#define CHECK_FIELD_TYPE_BITSERIAL0_DEGLITCH_EN_END
#define CHECK_FIELD_TYPE_BITSERIAL0_ERROR_STATUS_BITSERIAL0_ERROR_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL0_ERROR_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_I2C_ACKS_BITSERIAL0_I2C_ACKS
#define CHECK_FIELD_TYPE_BITSERIAL0_I2C_ACKS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_I2C_ADDRESS_BITSERIAL0_I2C_ADDRESS
#define CHECK_FIELD_TYPE_BITSERIAL0_I2C_ADDRESS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERBYTE_SPACING_BITSERIAL0_INTERBYTE_SPACING
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERBYTE_SPACING_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_CLEAR_BITSERIAL0_INTERRUPT_CLEAR
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_CLEAR_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_EN_BITSERIAL0_INTERRUPT_EN
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_EN_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_SOURCE_BITSERIAL0_INTERRUPT_SOURCE
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_SOURCE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_SOURCE_CLEAR_BITSERIAL0_INTERRUPT_SOURCE_CLEAR
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_SOURCE_CLEAR_END
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_STATUS_BITSERIAL0_INTERRUPT_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL0_INTERRUPT_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_REMOTE_SUBSYSTEM_SSID_BITSERIAL0_REMOTE_SUBSYSTEM_SSID
#define CHECK_FIELD_TYPE_BITSERIAL0_REMOTE_SUBSYSTEM_SSID_END
#define CHECK_FIELD_TYPE_BITSERIAL0_RX_BUFFER_BITSERIAL0_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL0_RX_BUFFER_END
#define CHECK_FIELD_TYPE_BITSERIAL0_RX_BUFFER2_BITSERIAL0_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL0_RX_BUFFER2_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SET_SEL_INACTIVE_BITSERIAL0_SET_SEL_INACTIVE
#define CHECK_FIELD_TYPE_BITSERIAL0_SET_SEL_INACTIVE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_DATA_READY_BYTE_BITSERIAL0_SLAVE_DATA_READY_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_DATA_READY_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_READ_COMMAND_BYTE_BITSERIAL0_SLAVE_READ_COMMAND_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_READ_COMMAND_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_READ_COUNT_BITSERIAL0_SLAVE_READ_COUNT
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_READ_COUNT_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_UNDERFLOW_BYTE_BITSERIAL0_SLAVE_UNDERFLOW_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_UNDERFLOW_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_WRITE_COUNT_BITSERIAL0_SLAVE_WRITE_COUNT
#define CHECK_FIELD_TYPE_BITSERIAL0_SLAVE_WRITE_COUNT_END
#define CHECK_FIELD_TYPE_BITSERIAL0_STATUS_BITSERIAL0_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL0_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL0_STREAMING_THRESHOLD_BITSERIAL0_STREAMING_THRESHOLD
#define CHECK_FIELD_TYPE_BITSERIAL0_STREAMING_THRESHOLD_END
#define CHECK_FIELD_TYPE_BITSERIAL0_TXRX_LENGTH_BITSERIAL0_TXRX_LENGTH
#define CHECK_FIELD_TYPE_BITSERIAL0_TXRX_LENGTH_END
#define CHECK_FIELD_TYPE_BITSERIAL0_TXRX_LENGTH2_BITSERIAL0_TXRX_LENGTH2
#define CHECK_FIELD_TYPE_BITSERIAL0_TXRX_LENGTH2_END
#define CHECK_FIELD_TYPE_BITSERIAL0_TX_BUFFER_BITSERIAL0_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL0_TX_BUFFER_END
#define CHECK_FIELD_TYPE_BITSERIAL0_TX_BUFFER2_BITSERIAL0_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL0_TX_BUFFER2_END
#define CHECK_FIELD_TYPE_BITSERIAL0_WORDS_SENT_BITSERIAL0_WORDS_SENT
#define CHECK_FIELD_TYPE_BITSERIAL0_WORDS_SENT_END
#define CHECK_FIELD_TYPE_BITSERIAL0_WORD_CONFIG_BITSERIAL0_WORD_CONFIG
#define CHECK_FIELD_TYPE_BITSERIAL0_WORD_CONFIG_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_BUFFER_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_BUFFER_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_CONFIG3(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_CONFIG3(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_DEGLITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_DEGLITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_ERROR_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_ERROR_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_I2C_ACKS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_I2C_ACKS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_INTERBYTE_SPACING(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_INTERBYTE_SPACING(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_RX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_RX_BUFFER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_RX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_RX_BUFFER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_RX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_RX_BUFFER2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_RX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_RX_BUFFER2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TX_BUFFER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TX_BUFFER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_TX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TX_BUFFER2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_TX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_TX_BUFFER2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL0_WORD_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL0_WORD_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL0_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define BITSERIAL0_CLK_CONTROL_REG_BITS (10u)
#define hal_set_reg_bitserial0_clk_control(x) hal_set_register(BITSERIAL0_CLK_CONTROL, x, 1)
#define hal_get_reg_bitserial0_clk_control() hal_get_register(BITSERIAL0_CLK_CONTROL, 1)
#define BITSERIAL0_CLK_RATE_HI_REG_BITS (16u)
#define hal_set_reg_bitserial0_clk_rate_hi(x) hal_set_register(BITSERIAL0_CLK_RATE_HI, x, 1)
#define hal_get_reg_bitserial0_clk_rate_hi() hal_get_register(BITSERIAL0_CLK_RATE_HI, 1)
#define BITSERIAL0_CLK_RATE_LO_REG_BITS (16u)
#define hal_set_reg_bitserial0_clk_rate_lo(x) hal_set_register(BITSERIAL0_CLK_RATE_LO, x, 1)
#define hal_get_reg_bitserial0_clk_rate_lo() hal_get_register(BITSERIAL0_CLK_RATE_LO, 1)
#define BITSERIAL0_CLK_SAMP_OFFSET_REG_BITS (16u)
#define hal_set_reg_bitserial0_clk_samp_offset(x) hal_set_register(BITSERIAL0_CLK_SAMP_OFFSET, x, 1)
#define hal_get_reg_bitserial0_clk_samp_offset() hal_get_register(BITSERIAL0_CLK_SAMP_OFFSET, 1)
#define BITSERIAL0_CONFIG_REG_BITS (16u)
#define hal_set_reg_bitserial0_config(x) hal_set_register(BITSERIAL0_CONFIG, x, 1)
#define hal_get_reg_bitserial0_config() hal_get_register(BITSERIAL0_CONFIG, 1)
#define BITSERIAL0_CONFIG2_REG_BITS (15u)
#define hal_set_reg_bitserial0_config2(x) hal_set_register(BITSERIAL0_CONFIG2, x, 1)
#define hal_get_reg_bitserial0_config2() hal_get_register(BITSERIAL0_CONFIG2, 1)
#define BITSERIAL0_CONFIG3_REG_BITS (5u)
#define hal_set_reg_bitserial0_config3(x) hal_set_register(BITSERIAL0_CONFIG3, x, 1)
#define hal_get_reg_bitserial0_config3() hal_get_register(BITSERIAL0_CONFIG3, 1)
#define BITSERIAL0_CONFIG_SEL_TIME_REG_BITS (16u)
#define hal_set_reg_bitserial0_config_sel_time(x) hal_set_register(BITSERIAL0_CONFIG_SEL_TIME, x, 1)
#define hal_get_reg_bitserial0_config_sel_time() hal_get_register(BITSERIAL0_CONFIG_SEL_TIME, 1)
#define BITSERIAL0_CONFIG_SEL_TIME2_REG_BITS (4u)
#define hal_set_reg_bitserial0_config_sel_time2(x) hal_set_register(BITSERIAL0_CONFIG_SEL_TIME2, x, 1)
#define hal_get_reg_bitserial0_config_sel_time2() hal_get_register(BITSERIAL0_CONFIG_SEL_TIME2, 1)
#define BITSERIAL0_CURATOR_SSID_REG_BITS (4u)
#define hal_set_reg_bitserial0_curator_ssid(x) hal_set_register(BITSERIAL0_CURATOR_SSID, x, 1)
#define hal_get_reg_bitserial0_curator_ssid() hal_get_register(BITSERIAL0_CURATOR_SSID, 1)
#define BITSERIAL0_DEBUG_SEL_REG_BITS (9u)
#define hal_set_reg_bitserial0_debug_sel(x) hal_set_register(BITSERIAL0_DEBUG_SEL, x, 1)
#define hal_get_reg_bitserial0_debug_sel() hal_get_register(BITSERIAL0_DEBUG_SEL, 1)
#define BITSERIAL0_DEEP_SLEEP_ACTIVE_REG_BITS (1u)
#define hal_set_reg_bitserial0_deep_sleep_active(x) hal_set_register(BITSERIAL0_DEEP_SLEEP_ACTIVE, x, 1)
#define hal_get_reg_bitserial0_deep_sleep_active() hal_get_register(BITSERIAL0_DEEP_SLEEP_ACTIVE, 1)
#define BITSERIAL0_DEGLITCH_EN_REG_BITS (2u)
#define hal_set_reg_bitserial0_deglitch_en(x) hal_set_register(BITSERIAL0_DEGLITCH_EN, x, 1)
#define hal_get_reg_bitserial0_deglitch_en() hal_get_register(BITSERIAL0_DEGLITCH_EN, 1)
#define BITSERIAL0_ERROR_STATUS_REG_BITS (9u)
#define hal_get_reg_bitserial0_error_status() hal_get_register(BITSERIAL0_ERROR_STATUS, 1)
#define BITSERIAL0_I2C_ACKS_REG_BITS (16u)
#define hal_get_reg_bitserial0_i2c_acks() hal_get_register(BITSERIAL0_I2C_ACKS, 1)
#define BITSERIAL0_I2C_ADDRESS_REG_BITS (10u)
#define hal_set_reg_bitserial0_i2c_address(x) hal_set_register(BITSERIAL0_I2C_ADDRESS, x, 1)
#define hal_get_reg_bitserial0_i2c_address() hal_get_register(BITSERIAL0_I2C_ADDRESS, 1)
#define BITSERIAL0_INTERBYTE_SPACING_REG_BITS (16u)
#define hal_set_reg_bitserial0_interbyte_spacing(x) hal_set_register(BITSERIAL0_INTERBYTE_SPACING, x, 1)
#define hal_get_reg_bitserial0_interbyte_spacing() hal_get_register(BITSERIAL0_INTERBYTE_SPACING, 1)
#define BITSERIAL0_INTERRUPT_CLEAR_REG_BITS (14u)
#define hal_set_reg_bitserial0_interrupt_clear(x) hal_set_register(BITSERIAL0_INTERRUPT_CLEAR, x, 1)
#define hal_get_reg_bitserial0_interrupt_clear() hal_get_register(BITSERIAL0_INTERRUPT_CLEAR, 1)
#define BITSERIAL0_INTERRUPT_EN_REG_BITS (14u)
#define hal_set_reg_bitserial0_interrupt_en(x) hal_set_register(BITSERIAL0_INTERRUPT_EN, x, 1)
#define hal_get_reg_bitserial0_interrupt_en() hal_get_register(BITSERIAL0_INTERRUPT_EN, 1)
#define BITSERIAL0_INTERRUPT_SOURCE_REG_BITS (14u)
#define hal_get_reg_bitserial0_interrupt_source() hal_get_register(BITSERIAL0_INTERRUPT_SOURCE, 1)
#define BITSERIAL0_INTERRUPT_SOURCE_CLEAR_REG_BITS (14u)
#define hal_set_reg_bitserial0_interrupt_source_clear(x) hal_set_register(BITSERIAL0_INTERRUPT_SOURCE_CLEAR, x, 1)
#define hal_get_reg_bitserial0_interrupt_source_clear() hal_get_register(BITSERIAL0_INTERRUPT_SOURCE_CLEAR, 1)
#define BITSERIAL0_INTERRUPT_STATUS_REG_BITS (14u)
#define hal_get_reg_bitserial0_interrupt_status() hal_get_register(BITSERIAL0_INTERRUPT_STATUS, 1)
#define BITSERIAL0_REMOTE_SUBSYSTEM_SSID_REG_BITS (4u)
#define hal_set_reg_bitserial0_remote_subsystem_ssid(x) hal_set_register(BITSERIAL0_REMOTE_SUBSYSTEM_SSID, x, 1)
#define hal_get_reg_bitserial0_remote_subsystem_ssid() hal_get_register(BITSERIAL0_REMOTE_SUBSYSTEM_SSID, 1)
#define BITSERIAL0_RWB_REG_BITS (2u)
#define hal_set_reg_bitserial0_rwb(x) hal_set_register(BITSERIAL0_RWB, x, 1)
#define hal_get_reg_bitserial0_rwb() hal_get_register(BITSERIAL0_RWB, 1)
#define BITSERIAL0_RX_BUFFER_REG_BITS (12u)
#define hal_set_reg_bitserial0_rx_buffer(x) hal_set_register(BITSERIAL0_RX_BUFFER, x, 1)
#define hal_get_reg_bitserial0_rx_buffer() hal_get_register(BITSERIAL0_RX_BUFFER, 1)
#define BITSERIAL0_RX_BUFFER2_REG_BITS (12u)
#define hal_set_reg_bitserial0_rx_buffer2(x) hal_set_register(BITSERIAL0_RX_BUFFER2, x, 1)
#define hal_get_reg_bitserial0_rx_buffer2() hal_get_register(BITSERIAL0_RX_BUFFER2, 1)
#define BITSERIAL0_SET_SEL_INACTIVE_REG_BITS (1u)
#define hal_set_reg_bitserial0_set_sel_inactive(x) hal_set_register(BITSERIAL0_SET_SEL_INACTIVE, x, 1)
#define hal_get_reg_bitserial0_set_sel_inactive() hal_get_register(BITSERIAL0_SET_SEL_INACTIVE, 1)
#define BITSERIAL0_SLAVE_DATA_READY_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial0_slave_data_ready_byte(x) hal_set_register(BITSERIAL0_SLAVE_DATA_READY_BYTE, x, 1)
#define hal_get_reg_bitserial0_slave_data_ready_byte() hal_get_register(BITSERIAL0_SLAVE_DATA_READY_BYTE, 1)
#define BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS_REG_BITS (16u)
#define hal_set_reg_bitserial0_slave_num_protocol_words(x) hal_set_register(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS, x, 1)
#define hal_get_reg_bitserial0_slave_num_protocol_words() hal_get_register(BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS, 1)
#define BITSERIAL0_SLAVE_READ_COMMAND_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial0_slave_read_command_byte(x) hal_set_register(BITSERIAL0_SLAVE_READ_COMMAND_BYTE, x, 1)
#define hal_get_reg_bitserial0_slave_read_command_byte() hal_get_register(BITSERIAL0_SLAVE_READ_COMMAND_BYTE, 1)
#define BITSERIAL0_SLAVE_READ_COUNT_REG_BITS (16u)
#define hal_get_reg_bitserial0_slave_read_count() hal_get_register(BITSERIAL0_SLAVE_READ_COUNT, 1)
#define BITSERIAL0_SLAVE_UNDERFLOW_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial0_slave_underflow_byte(x) hal_set_register(BITSERIAL0_SLAVE_UNDERFLOW_BYTE, x, 1)
#define hal_get_reg_bitserial0_slave_underflow_byte() hal_get_register(BITSERIAL0_SLAVE_UNDERFLOW_BYTE, 1)
#define BITSERIAL0_SLAVE_WRITE_COUNT_REG_BITS (16u)
#define hal_get_reg_bitserial0_slave_write_count() hal_get_register(BITSERIAL0_SLAVE_WRITE_COUNT, 1)
#define BITSERIAL0_STATUS_REG_BITS (13u)
#define hal_get_reg_bitserial0_status() hal_get_register(BITSERIAL0_STATUS, 1)
#define BITSERIAL0_STREAMING_THRESHOLD_REG_BITS (16u)
#define hal_set_reg_bitserial0_streaming_threshold(x) hal_set_register(BITSERIAL0_STREAMING_THRESHOLD, x, 1)
#define hal_get_reg_bitserial0_streaming_threshold() hal_get_register(BITSERIAL0_STREAMING_THRESHOLD, 1)
#define BITSERIAL0_TXRX_LENGTH_REG_BITS (16u)
#define hal_set_reg_bitserial0_txrx_length(x) hal_set_register(BITSERIAL0_TXRX_LENGTH, x, 1)
#define hal_get_reg_bitserial0_txrx_length() hal_get_register(BITSERIAL0_TXRX_LENGTH, 1)
#define BITSERIAL0_TXRX_LENGTH2_REG_BITS (16u)
#define hal_set_reg_bitserial0_txrx_length2(x) hal_set_register(BITSERIAL0_TXRX_LENGTH2, x, 1)
#define hal_get_reg_bitserial0_txrx_length2() hal_get_register(BITSERIAL0_TXRX_LENGTH2, 1)
#define BITSERIAL0_TX_BUFFER_REG_BITS (12u)
#define hal_set_reg_bitserial0_tx_buffer(x) hal_set_register(BITSERIAL0_TX_BUFFER, x, 1)
#define hal_get_reg_bitserial0_tx_buffer() hal_get_register(BITSERIAL0_TX_BUFFER, 1)
#define BITSERIAL0_TX_BUFFER2_REG_BITS (12u)
#define hal_set_reg_bitserial0_tx_buffer2(x) hal_set_register(BITSERIAL0_TX_BUFFER2, x, 1)
#define hal_get_reg_bitserial0_tx_buffer2() hal_get_register(BITSERIAL0_TX_BUFFER2, 1)
#define BITSERIAL0_WORDS_SENT_REG_BITS (16u)
#define hal_get_reg_bitserial0_words_sent() hal_get_register(BITSERIAL0_WORDS_SENT, 1)
#define BITSERIAL0_WORD_CONFIG_REG_BITS (12u)
#define hal_set_reg_bitserial0_word_config(x) hal_set_register(BITSERIAL0_WORD_CONFIG, x, 1)
#define hal_get_reg_bitserial0_word_config() hal_get_register(BITSERIAL0_WORD_CONFIG, 1)

 /* Workings */
#define SETTER_FOR_BITSERIAL0_CLK_CONTROL hal_set_reg_bitserial0_clk_control
#define GETTER_FOR_BITSERIAL0_CLK_CONTROL hal_get_reg_bitserial0_clk_control
#define SETTER_FOR_BITSERIAL0_CLK_RATE_HI hal_set_reg_bitserial0_clk_rate_hi
#define GETTER_FOR_BITSERIAL0_CLK_RATE_HI hal_get_reg_bitserial0_clk_rate_hi
#define SETTER_FOR_BITSERIAL0_CLK_RATE_LO hal_set_reg_bitserial0_clk_rate_lo
#define GETTER_FOR_BITSERIAL0_CLK_RATE_LO hal_get_reg_bitserial0_clk_rate_lo
#define SETTER_FOR_BITSERIAL0_CLK_SAMP_OFFSET hal_set_reg_bitserial0_clk_samp_offset
#define GETTER_FOR_BITSERIAL0_CLK_SAMP_OFFSET hal_get_reg_bitserial0_clk_samp_offset
#define SETTER_FOR_BITSERIAL0_CONFIG hal_set_reg_bitserial0_config
#define GETTER_FOR_BITSERIAL0_CONFIG hal_get_reg_bitserial0_config
#define SETTER_FOR_BITSERIAL0_CONFIG2 hal_set_reg_bitserial0_config2
#define GETTER_FOR_BITSERIAL0_CONFIG2 hal_get_reg_bitserial0_config2
#define SETTER_FOR_BITSERIAL0_CONFIG3 hal_set_reg_bitserial0_config3
#define GETTER_FOR_BITSERIAL0_CONFIG3 hal_get_reg_bitserial0_config3
#define SETTER_FOR_BITSERIAL0_CONFIG_SEL_TIME hal_set_reg_bitserial0_config_sel_time
#define GETTER_FOR_BITSERIAL0_CONFIG_SEL_TIME hal_get_reg_bitserial0_config_sel_time
#define SETTER_FOR_BITSERIAL0_CONFIG_SEL_TIME2 hal_set_reg_bitserial0_config_sel_time2
#define GETTER_FOR_BITSERIAL0_CONFIG_SEL_TIME2 hal_get_reg_bitserial0_config_sel_time2
#define SETTER_FOR_BITSERIAL0_CURATOR_SSID hal_set_reg_bitserial0_curator_ssid
#define GETTER_FOR_BITSERIAL0_CURATOR_SSID hal_get_reg_bitserial0_curator_ssid
#define SETTER_FOR_BITSERIAL0_DEBUG_SEL hal_set_reg_bitserial0_debug_sel
#define GETTER_FOR_BITSERIAL0_DEBUG_SEL hal_get_reg_bitserial0_debug_sel
#define SETTER_FOR_BITSERIAL0_DEEP_SLEEP_ACTIVE hal_set_reg_bitserial0_deep_sleep_active
#define GETTER_FOR_BITSERIAL0_DEEP_SLEEP_ACTIVE hal_get_reg_bitserial0_deep_sleep_active
#define SETTER_FOR_BITSERIAL0_DEGLITCH_EN hal_set_reg_bitserial0_deglitch_en
#define GETTER_FOR_BITSERIAL0_DEGLITCH_EN hal_get_reg_bitserial0_deglitch_en
#define GETTER_FOR_BITSERIAL0_ERROR_STATUS hal_get_reg_bitserial0_error_status
#define GETTER_FOR_BITSERIAL0_I2C_ACKS hal_get_reg_bitserial0_i2c_acks
#define SETTER_FOR_BITSERIAL0_I2C_ADDRESS hal_set_reg_bitserial0_i2c_address
#define GETTER_FOR_BITSERIAL0_I2C_ADDRESS hal_get_reg_bitserial0_i2c_address
#define SETTER_FOR_BITSERIAL0_INTERBYTE_SPACING hal_set_reg_bitserial0_interbyte_spacing
#define GETTER_FOR_BITSERIAL0_INTERBYTE_SPACING hal_get_reg_bitserial0_interbyte_spacing
#define SETTER_FOR_BITSERIAL0_INTERRUPT_CLEAR hal_set_reg_bitserial0_interrupt_clear
#define GETTER_FOR_BITSERIAL0_INTERRUPT_CLEAR hal_get_reg_bitserial0_interrupt_clear
#define SETTER_FOR_BITSERIAL0_INTERRUPT_EN hal_set_reg_bitserial0_interrupt_en
#define GETTER_FOR_BITSERIAL0_INTERRUPT_EN hal_get_reg_bitserial0_interrupt_en
#define GETTER_FOR_BITSERIAL0_INTERRUPT_SOURCE hal_get_reg_bitserial0_interrupt_source
#define SETTER_FOR_BITSERIAL0_INTERRUPT_SOURCE_CLEAR hal_set_reg_bitserial0_interrupt_source_clear
#define GETTER_FOR_BITSERIAL0_INTERRUPT_SOURCE_CLEAR hal_get_reg_bitserial0_interrupt_source_clear
#define GETTER_FOR_BITSERIAL0_INTERRUPT_STATUS hal_get_reg_bitserial0_interrupt_status
#define SETTER_FOR_BITSERIAL0_REMOTE_SUBSYSTEM_SSID hal_set_reg_bitserial0_remote_subsystem_ssid
#define GETTER_FOR_BITSERIAL0_REMOTE_SUBSYSTEM_SSID hal_get_reg_bitserial0_remote_subsystem_ssid
#define SETTER_FOR_BITSERIAL0_RWB hal_set_reg_bitserial0_rwb
#define GETTER_FOR_BITSERIAL0_RWB hal_get_reg_bitserial0_rwb
#define SETTER_FOR_BITSERIAL0_RX_BUFFER hal_set_reg_bitserial0_rx_buffer
#define GETTER_FOR_BITSERIAL0_RX_BUFFER hal_get_reg_bitserial0_rx_buffer
#define SETTER_FOR_BITSERIAL0_RX_BUFFER2 hal_set_reg_bitserial0_rx_buffer2
#define GETTER_FOR_BITSERIAL0_RX_BUFFER2 hal_get_reg_bitserial0_rx_buffer2
#define SETTER_FOR_BITSERIAL0_SET_SEL_INACTIVE hal_set_reg_bitserial0_set_sel_inactive
#define GETTER_FOR_BITSERIAL0_SET_SEL_INACTIVE hal_get_reg_bitserial0_set_sel_inactive
#define SETTER_FOR_BITSERIAL0_SLAVE_DATA_READY_BYTE hal_set_reg_bitserial0_slave_data_ready_byte
#define GETTER_FOR_BITSERIAL0_SLAVE_DATA_READY_BYTE hal_get_reg_bitserial0_slave_data_ready_byte
#define SETTER_FOR_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS hal_set_reg_bitserial0_slave_num_protocol_words
#define GETTER_FOR_BITSERIAL0_SLAVE_NUM_PROTOCOL_WORDS hal_get_reg_bitserial0_slave_num_protocol_words
#define SETTER_FOR_BITSERIAL0_SLAVE_READ_COMMAND_BYTE hal_set_reg_bitserial0_slave_read_command_byte
#define GETTER_FOR_BITSERIAL0_SLAVE_READ_COMMAND_BYTE hal_get_reg_bitserial0_slave_read_command_byte
#define GETTER_FOR_BITSERIAL0_SLAVE_READ_COUNT hal_get_reg_bitserial0_slave_read_count
#define SETTER_FOR_BITSERIAL0_SLAVE_UNDERFLOW_BYTE hal_set_reg_bitserial0_slave_underflow_byte
#define GETTER_FOR_BITSERIAL0_SLAVE_UNDERFLOW_BYTE hal_get_reg_bitserial0_slave_underflow_byte
#define GETTER_FOR_BITSERIAL0_SLAVE_WRITE_COUNT hal_get_reg_bitserial0_slave_write_count
#define GETTER_FOR_BITSERIAL0_STATUS hal_get_reg_bitserial0_status
#define SETTER_FOR_BITSERIAL0_STREAMING_THRESHOLD hal_set_reg_bitserial0_streaming_threshold
#define GETTER_FOR_BITSERIAL0_STREAMING_THRESHOLD hal_get_reg_bitserial0_streaming_threshold
#define SETTER_FOR_BITSERIAL0_TXRX_LENGTH hal_set_reg_bitserial0_txrx_length
#define GETTER_FOR_BITSERIAL0_TXRX_LENGTH hal_get_reg_bitserial0_txrx_length
#define SETTER_FOR_BITSERIAL0_TXRX_LENGTH2 hal_set_reg_bitserial0_txrx_length2
#define GETTER_FOR_BITSERIAL0_TXRX_LENGTH2 hal_get_reg_bitserial0_txrx_length2
#define SETTER_FOR_BITSERIAL0_TX_BUFFER hal_set_reg_bitserial0_tx_buffer
#define GETTER_FOR_BITSERIAL0_TX_BUFFER hal_get_reg_bitserial0_tx_buffer
#define SETTER_FOR_BITSERIAL0_TX_BUFFER2 hal_set_reg_bitserial0_tx_buffer2
#define GETTER_FOR_BITSERIAL0_TX_BUFFER2 hal_get_reg_bitserial0_tx_buffer2
#define GETTER_FOR_BITSERIAL0_WORDS_SENT hal_get_reg_bitserial0_words_sent
#define SETTER_FOR_BITSERIAL0_WORD_CONFIG hal_set_reg_bitserial0_word_config
#define GETTER_FOR_BITSERIAL0_WORD_CONFIG hal_get_reg_bitserial0_word_config

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_BITSERIAL0) */
#endif /* __HAL_MACROS_H__MODULE_BITSERIAL0 */




#if defined(IO_DEFS_MODULE_APPS_SYS_PIO) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_PIO
#define __HAL_MACROS_H__MODULE_APPS_SYS_PIO

/* -- Apps subsystem PIO controls (registers appear per processor) -- */

 /* Type checking definitions */

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define APPS_SYS_PIO_DRIVE_REG_BITS (72u)
#define hal_set_reg_apps_sys_pio_drive(i, x) hal_set_register_indexed(APPS_SYS_PIO_DRIVE, i, x)
#define hal_set_reg_apps_sys_pio_drive_word0(x) hal_set_register(APPS_SYS_PIO_DRIVE_WORD0, (x), 1)
#define hal_set_reg_apps_sys_pio_drive_word1(x) hal_set_register(APPS_SYS_PIO_DRIVE_WORD1, (x), 1)
#define hal_set_reg_apps_sys_pio_drive_word2(x) hal_set_register(APPS_SYS_PIO_DRIVE_WORD2, (x), 1)
#define hal_get_reg_apps_sys_pio_drive(i) hal_get_register_indexed(APPS_SYS_PIO_DRIVE, i)
#define hal_get_reg_apps_sys_pio_drive_word0() hal_get_register(APPS_SYS_PIO_DRIVE_WORD0, 1)
#define hal_get_reg_apps_sys_pio_drive_word1() hal_get_register(APPS_SYS_PIO_DRIVE_WORD1, 1)
#define hal_get_reg_apps_sys_pio_drive_word2() hal_get_register(APPS_SYS_PIO_DRIVE_WORD2, 1)
#define APPS_SYS_PIO_DRIVE_ENABLE_REG_BITS (72u)
#define hal_set_reg_apps_sys_pio_drive_enable(i, x) hal_set_register_indexed(APPS_SYS_PIO_DRIVE_ENABLE, i, x)
#define hal_set_reg_apps_sys_pio_drive_enable_word0(x) hal_set_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD0, (x), 1)
#define hal_set_reg_apps_sys_pio_drive_enable_word1(x) hal_set_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD1, (x), 1)
#define hal_set_reg_apps_sys_pio_drive_enable_word2(x) hal_set_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD2, (x), 1)
#define hal_get_reg_apps_sys_pio_drive_enable(i) hal_get_register_indexed(APPS_SYS_PIO_DRIVE_ENABLE, i)
#define hal_get_reg_apps_sys_pio_drive_enable_word0() hal_get_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD0, 1)
#define hal_get_reg_apps_sys_pio_drive_enable_word1() hal_get_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD1, 1)
#define hal_get_reg_apps_sys_pio_drive_enable_word2() hal_get_register(APPS_SYS_PIO_DRIVE_ENABLE_WORD2, 1)
#define APPS_SYS_PIO_STATUS_REG_BITS (72u)
#define hal_get_reg_apps_sys_pio_status(i) hal_get_register_indexed(APPS_SYS_PIO_STATUS, i)
#define hal_get_reg_apps_sys_pio_status_word0() hal_get_register(APPS_SYS_PIO_STATUS_WORD0, 1)
#define hal_get_reg_apps_sys_pio_status_word1() hal_get_register(APPS_SYS_PIO_STATUS_WORD1, 1)
#define hal_get_reg_apps_sys_pio_status_word2() hal_get_register(APPS_SYS_PIO_STATUS_WORD2, 1)

 /* Workings */
#define SETTER_FOR_APPS_SYS_PIO_DRIVE hal_set_reg_apps_sys_pio_drive
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_WORD0 hal_set_reg_apps_sys_pio_drive_word0
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_WORD1 hal_set_reg_apps_sys_pio_drive_word1
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_WORD2 hal_set_reg_apps_sys_pio_drive_word2
#define GETTER_FOR_APPS_SYS_PIO_DRIVE hal_get_reg_apps_sys_pio_drive
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_WORD0 hal_get_reg_apps_sys_pio_drive_word0
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_WORD1 hal_get_reg_apps_sys_pio_drive_word1
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_WORD2 hal_get_reg_apps_sys_pio_drive_word2
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE hal_set_reg_apps_sys_pio_drive_enable
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD0 hal_set_reg_apps_sys_pio_drive_enable_word0
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD1 hal_set_reg_apps_sys_pio_drive_enable_word1
#define SETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD2 hal_set_reg_apps_sys_pio_drive_enable_word2
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE hal_get_reg_apps_sys_pio_drive_enable
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD0 hal_get_reg_apps_sys_pio_drive_enable_word0
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD1 hal_get_reg_apps_sys_pio_drive_enable_word1
#define GETTER_FOR_APPS_SYS_PIO_DRIVE_ENABLE_WORD2 hal_get_reg_apps_sys_pio_drive_enable_word2
#define GETTER_FOR_APPS_SYS_PIO_STATUS hal_get_reg_apps_sys_pio_status
#define GETTER_FOR_APPS_SYS_PIO_STATUS_WORD0 hal_get_reg_apps_sys_pio_status_word0
#define GETTER_FOR_APPS_SYS_PIO_STATUS_WORD1 hal_get_reg_apps_sys_pio_status_word1
#define GETTER_FOR_APPS_SYS_PIO_STATUS_WORD2 hal_get_reg_apps_sys_pio_status_word2

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_PIO) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_PIO */


#if defined(IO_DEFS_MODULE_SQIF) 

#ifndef __HAL_MACROS_H__MODULE_SQIF
#define __HAL_MACROS_H__MODULE_SQIF

/* -- Serial Quad I/O Flash registers -- */

 /* Field SQIF_CONF2_CLOCK_EN */
 /* Accessor macros */
#define hal_get_sqif_conf2_clock_en() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_CLOCK_EN)
#define hal_set_sqif_conf2_clock_en(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_CLOCK_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_CLOCK_EN SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_CLOCK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_CLOCK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_CLOCK_EN SQIF_CONF2

 /* Field SQIF_CONF2_DDR_MODE_EN */
 /* Accessor macros */
#define hal_get_sqif_conf2_ddr_mode_en() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_DDR_MODE_EN)
#define hal_set_sqif_conf2_ddr_mode_en(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_DDR_MODE_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_DDR_MODE_EN SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_DDR_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_DDR_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_DDR_MODE_EN SQIF_CONF2

 /* Field SQIF_CONF2_DUMMY_OVR_LSB */
 /* Accessor macros */
#define hal_get_sqif_conf2_dummy_ovr() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_DUMMY_OVR)
#define hal_set_sqif_conf2_dummy_ovr(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_DUMMY_OVR,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_DUMMY_OVR SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_DUMMY_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_DUMMY_OVR(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_DUMMY_OVR SQIF_CONF2

 /* Field SQIF_CONF2_ENDIANNESS */
 /* Accessor macros */
#define hal_get_sqif_conf2_endianness() ((sqif_conf2_endianness) hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_ENDIANNESS))
#define hal_set_sqif_conf2_endianness(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_ENDIANNESS,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_ENDIANNESS SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_ENDIANNESS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_ENDIANNESS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_ENDIANNESS SQIF_CONF2

 /* Field SQIF_CONF2_FORCE_DLP_CAPTURE */
 /* Accessor macros */
#define hal_get_sqif_conf2_force_dlp_capture() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_FORCE_DLP_CAPTURE)
#define hal_set_sqif_conf2_force_dlp_capture(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_FORCE_DLP_CAPTURE,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_FORCE_DLP_CAPTURE SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_FORCE_DLP_CAPTURE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_FORCE_DLP_CAPTURE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_FORCE_DLP_CAPTURE SQIF_CONF2

 /* Field SQIF_CONF2_GRAB_PADS */
 /* Accessor macros */
#define hal_get_sqif_conf2_grab_pads() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_GRAB_PADS)
#define hal_set_sqif_conf2_grab_pads(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_GRAB_PADS,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_GRAB_PADS SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_GRAB_PADS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_GRAB_PADS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_GRAB_PADS SQIF_CONF2

 /* Field SQIF_CONF2_PULL_WEAK */
 /* Accessor macros */
#define hal_get_sqif_conf2_pull_weak() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_PULL_WEAK)
#define hal_set_sqif_conf2_pull_weak(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_PULL_WEAK,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_PULL_WEAK SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_PULL_WEAK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_PULL_WEAK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_PULL_WEAK SQIF_CONF2

 /* Field SQIF_CONF2_RAM_EN */
 /* Accessor macros */
#define hal_get_sqif_conf2_ram_en() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_RAM_EN)
#define hal_set_sqif_conf2_ram_en(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_RAM_EN SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_RAM_EN SQIF_CONF2

 /* Field SQIF_CONF2_SDR_DELAY_EN */
 /* Accessor macros */
#define hal_get_sqif_conf2_sdr_delay_en() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_SDR_DELAY_EN)
#define hal_set_sqif_conf2_sdr_delay_en(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_SDR_DELAY_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_SDR_DELAY_EN SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_SDR_DELAY_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_SDR_DELAY_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_SDR_DELAY_EN SQIF_CONF2

 /* Field SQIF_CONF2_SQIF_EN */
 /* Accessor macros */
#define hal_get_sqif_conf2_sqif_en() hal_get_register_field8(SQIF_CONF2,SQIF_CONF2_SQIF_EN)
#define hal_set_sqif_conf2_sqif_en(x) hal_set_register_field(SQIF_CONF2,SQIF_CONF2_SQIF_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF2_SQIF_EN SQIF_CONF2
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2_SQIF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2_SQIF_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF2_SQIF_EN SQIF_CONF2

 /* Field SQIF_CONF_ABT */
 /* Accessor macros */
#define hal_get_sqif_conf_abt() ((sqif_conf_abt) hal_get_register_field8(SQIF_CONF,SQIF_CONF_ABT))
#define hal_set_sqif_conf_abt(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_ABT,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_ABT SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_ABT(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_ABT(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_ABT SQIF_CONF

 /* Field SQIF_CONF_ADD_LSB */
 /* Accessor macros */
#define hal_get_sqif_conf_add() ((sqif_conf_add) hal_get_register_field8(SQIF_CONF,SQIF_CONF_ADD))
#define hal_set_sqif_conf_add(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_ADD,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_ADD SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_ADD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_ADD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_ADD SQIF_CONF

 /* Field SQIF_CONF_CMD */
 /* Accessor macros */
#define hal_get_sqif_conf_cmd() ((sqif_conf_cmd) hal_get_register_field8(SQIF_CONF,SQIF_CONF_CMD))
#define hal_set_sqif_conf_cmd(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_CMD,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_CMD SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_CMD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_CMD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_CMD SQIF_CONF

 /* Field SQIF_CONF_CS_HOLD */
 /* Accessor macros */
#define hal_get_sqif_conf_cs_hold() hal_get_register_field8(SQIF_CONF,SQIF_CONF_CS_HOLD)
#define hal_set_sqif_conf_cs_hold(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_CS_HOLD,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_CS_HOLD SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_CS_HOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_CS_HOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_CS_HOLD SQIF_CONF

 /* Field SQIF_CONF_DUM_LSB */
 /* Accessor macros */
#define hal_get_sqif_conf_dum() ((sqif_conf_dum) hal_get_register_field8(SQIF_CONF,SQIF_CONF_DUM))
#define hal_set_sqif_conf_dum(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_DUM,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_DUM SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_DUM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_DUM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_DUM SQIF_CONF

 /* Field SQIF_CONF_MOD_LSB */
 /* Accessor macros */
#define hal_get_sqif_conf_mod() ((sqif_conf_mod) hal_get_register_field8(SQIF_CONF,SQIF_CONF_MOD))
#define hal_set_sqif_conf_mod(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_MOD,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_MOD SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_MOD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_MOD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_MOD SQIF_CONF

 /* Field SQIF_CONF_WID_LSB */
 /* Accessor macros */
#define hal_get_sqif_conf_wid() ((sqif_conf_wid) hal_get_register_field8(SQIF_CONF,SQIF_CONF_WID))
#define hal_set_sqif_conf_wid(x) hal_set_register_field(SQIF_CONF,SQIF_CONF_WID,(x))
 /* Workings */
#define TYPE_OF_SQIF_CONF_WID SQIF_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_CONF_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CONF_WID SQIF_CONF

 /* Field SQIF_CORR_CONSEC_LSB */
 /* Accessor macros */
#define hal_get_sqif_corr_consec() hal_get_register_field8(SQIF_CORR_CFG,SQIF_CORR_CONSEC)
#define hal_set_sqif_corr_consec(x) hal_set_register_field(SQIF_CORR_CFG,SQIF_CORR_CONSEC,(x))
 /* Workings */
#define TYPE_OF_SQIF_CORR_CONSEC SQIF_CORR_CFG
#define FIELDS_MASKS_SHIFTED_SQIF_CORR_CONSEC(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CORR_CONSEC(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CORR_CONSEC SQIF_CORR_CFG

 /* Field SQIF_CORR_DLP_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_sqif_corr_dlp_length() hal_get_register_field8(SQIF_CORR_CFG,SQIF_CORR_DLP_LENGTH)
#define hal_set_sqif_corr_dlp_length(x) hal_set_register_field(SQIF_CORR_CFG,SQIF_CORR_DLP_LENGTH,(x))
 /* Workings */
#define TYPE_OF_SQIF_CORR_DLP_LENGTH SQIF_CORR_CFG
#define FIELDS_MASKS_SHIFTED_SQIF_CORR_DLP_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CORR_DLP_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CORR_DLP_LENGTH SQIF_CORR_CFG

 /* Field SQIF_CORR_DLP_LSB */
 /* Accessor macros */
#define hal_get_sqif_corr_dlp() hal_get_register_field8(SQIF_CORR_CFG,SQIF_CORR_DLP)
#define hal_set_sqif_corr_dlp(x) hal_set_register_field(SQIF_CORR_CFG,SQIF_CORR_DLP,(x))
 /* Workings */
#define TYPE_OF_SQIF_CORR_DLP SQIF_CORR_CFG
#define FIELDS_MASKS_SHIFTED_SQIF_CORR_DLP(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CORR_DLP(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CORR_DLP SQIF_CORR_CFG

 /* Field SQIF_CORR_ENABLE */
 /* Accessor macros */
#define hal_get_sqif_corr_enable() hal_get_register_field8(SQIF_CORR_CFG,SQIF_CORR_ENABLE)
#define hal_set_sqif_corr_enable(x) hal_set_register_field(SQIF_CORR_CFG,SQIF_CORR_ENABLE,(x))
 /* Workings */
#define TYPE_OF_SQIF_CORR_ENABLE SQIF_CORR_CFG
#define FIELDS_MASKS_SHIFTED_SQIF_CORR_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CORR_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CORR_ENABLE SQIF_CORR_CFG

 /* Field SQIF_CTRL_CLK_RATE_FLASH_LSB */
 /* Accessor macros */
#define hal_get_sqif_ctrl_clk_rate_flash() hal_get_register_field8(SQIF_CTRL,SQIF_CTRL_CLK_RATE_FLASH)
#define hal_set_sqif_ctrl_clk_rate_flash(x) hal_set_register_field(SQIF_CTRL,SQIF_CTRL_CLK_RATE_FLASH,(x))
 /* Workings */
#define TYPE_OF_SQIF_CTRL_CLK_RATE_FLASH SQIF_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL_CLK_RATE_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL_CLK_RATE_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CTRL_CLK_RATE_FLASH SQIF_CTRL

 /* Field SQIF_CTRL_CLK_RATE_RAM_LSB */
 /* Accessor macros */
#define hal_get_sqif_ctrl_clk_rate_ram() hal_get_register_field8(SQIF_CTRL,SQIF_CTRL_CLK_RATE_RAM)
#define hal_set_sqif_ctrl_clk_rate_ram(x) hal_set_register_field(SQIF_CTRL,SQIF_CTRL_CLK_RATE_RAM,(x))
 /* Workings */
#define TYPE_OF_SQIF_CTRL_CLK_RATE_RAM SQIF_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL_CLK_RATE_RAM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL_CLK_RATE_RAM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CTRL_CLK_RATE_RAM SQIF_CTRL

 /* Field SQIF_CTRL_FLASH_WR_MORE */
 /* Accessor macros */
#define hal_get_sqif_ctrl_flash_wr_more() hal_get_register_field8(SQIF_CTRL,SQIF_CTRL_FLASH_WR_MORE)
#define hal_set_sqif_ctrl_flash_wr_more(x) hal_set_register_field(SQIF_CTRL,SQIF_CTRL_FLASH_WR_MORE,(x))
 /* Workings */
#define TYPE_OF_SQIF_CTRL_FLASH_WR_MORE SQIF_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL_FLASH_WR_MORE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL_FLASH_WR_MORE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CTRL_FLASH_WR_MORE SQIF_CTRL

 /* Field SQIF_CTRL_PAP_RAM */
 /* Accessor macros */
#define hal_get_sqif_ctrl_pap_ram() hal_get_register_field8(SQIF_CTRL,SQIF_CTRL_PAP_RAM)
#define hal_set_sqif_ctrl_pap_ram(x) hal_set_register_field(SQIF_CTRL,SQIF_CTRL_PAP_RAM,(x))
 /* Workings */
#define TYPE_OF_SQIF_CTRL_PAP_RAM SQIF_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL_PAP_RAM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL_PAP_RAM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CTRL_PAP_RAM SQIF_CTRL

 /* Field SQIF_CTRL_PAP_WID_LSB */
 /* Accessor macros */
#define hal_get_sqif_ctrl_pap_wid() ((sqif_ctrl_pap_wid) hal_get_register_field8(SQIF_CTRL,SQIF_CTRL_PAP_WID))
#define hal_set_sqif_ctrl_pap_wid(x) hal_set_register_field(SQIF_CTRL,SQIF_CTRL_PAP_WID,(x))
 /* Workings */
#define TYPE_OF_SQIF_CTRL_PAP_WID SQIF_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL_PAP_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL_PAP_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_CTRL_PAP_WID SQIF_CTRL

 /* Field SQIF_DDR_CENTER_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_center() hal_get_register_field16(SQIF_DDR_CENTER,SQIF_DDR_CENTER)
 /* Workings */
#define TYPE_OF_SQIF_DDR_CENTER SQIF_DDR_CENTER
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_CENTER(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_CENTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_CENTER(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_CENTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_CENTER SQIF_DDR_CENTER

 /* Field SQIF_DDR_CENTER_SEL_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_center_sel() hal_get_register_field8(SQIF_DDR_DBG_SEL,SQIF_DDR_CENTER_SEL)
#define hal_set_sqif_ddr_center_sel(x) hal_set_register_field(SQIF_DDR_DBG_SEL,SQIF_DDR_CENTER_SEL,(x))
 /* Workings */
#define TYPE_OF_SQIF_DDR_CENTER_SEL SQIF_DDR_DBG_SEL
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_CENTER_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_CENTER_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_CENTER_SEL SQIF_DDR_DBG_SEL

 /* Field SQIF_DDR_LOCKED_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_locked() hal_get_register_field8(SQIF_DDR_LOCKED,SQIF_DDR_LOCKED)
 /* Workings */
#define TYPE_OF_SQIF_DDR_LOCKED SQIF_DDR_LOCKED
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_LOCKED(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_LOCKED, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_LOCKED(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_LOCKED, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_LOCKED SQIF_DDR_LOCKED

 /* Field SQIF_DDR_MARGIN_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_margin() hal_get_register_field16(SQIF_DDR_MARGIN,SQIF_DDR_MARGIN)
 /* Workings */
#define TYPE_OF_SQIF_DDR_MARGIN SQIF_DDR_MARGIN
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_MARGIN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_MARGIN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_MARGIN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_MARGIN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_MARGIN SQIF_DDR_MARGIN

 /* Field SQIF_DDR_MARGIN_SEL_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_margin_sel() hal_get_register_field8(SQIF_DDR_DBG_SEL,SQIF_DDR_MARGIN_SEL)
#define hal_set_sqif_ddr_margin_sel(x) hal_set_register_field(SQIF_DDR_DBG_SEL,SQIF_DDR_MARGIN_SEL,(x))
 /* Workings */
#define TYPE_OF_SQIF_DDR_MARGIN_SEL SQIF_DDR_DBG_SEL
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_MARGIN_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_MARGIN_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_MARGIN_SEL SQIF_DDR_DBG_SEL

 /* Field SQIF_DDR_PAD_DBG_SEL_LSB */
 /* Accessor macros */
#define hal_get_sqif_ddr_pad_dbg_sel() hal_get_register_field8(SQIF_DDR_DBG_SEL,SQIF_DDR_PAD_DBG_SEL)
#define hal_set_sqif_ddr_pad_dbg_sel(x) hal_set_register_field(SQIF_DDR_DBG_SEL,SQIF_DDR_PAD_DBG_SEL,(x))
 /* Workings */
#define TYPE_OF_SQIF_DDR_PAD_DBG_SEL SQIF_DDR_DBG_SEL
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_PAD_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_PAD_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DDR_PAD_DBG_SEL SQIF_DDR_DBG_SEL

 /* Field SQIF_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_sqif_debug_sel() hal_get_register_field8(SQIF_DEBUG_SEL,SQIF_DEBUG_SEL)
#define hal_set_sqif_debug_sel(x) hal_set_register_field(SQIF_DEBUG_SEL,SQIF_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_SQIF_DEBUG_SEL SQIF_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_SQIF_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DEBUG_SEL SQIF_DEBUG_SEL

 /* Field SQIF_FLASH_SIZE_LSB */
 /* Accessor macros */
#define hal_get_sqif_flash_size() hal_get_register_field8(SQIF_FLASH_SIZE,SQIF_FLASH_SIZE)
#define hal_set_sqif_flash_size(x) hal_set_register_field(SQIF_FLASH_SIZE,SQIF_FLASH_SIZE,(x))
 /* Workings */
#define TYPE_OF_SQIF_FLASH_SIZE SQIF_FLASH_SIZE
#define FIELDS_MASKS_SHIFTED_SQIF_FLASH_SIZE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_FLASH_SIZE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_FLASH_SIZE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_FLASH_SIZE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_FLASH_SIZE SQIF_FLASH_SIZE

 /* Field SQIF_INST_CMD_LSB */
 /* Accessor macros */
#define hal_get_sqif_inst_cmd() hal_get_register_field8(SQIF_INST,SQIF_INST_CMD)
#define hal_set_sqif_inst_cmd(x) hal_set_register_field(SQIF_INST,SQIF_INST_CMD,(x))
 /* Workings */
#define TYPE_OF_SQIF_INST_CMD SQIF_INST
#define FIELDS_MASKS_SHIFTED_SQIF_INST_CMD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_INST_CMD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_INST_CMD SQIF_INST

 /* Field SQIF_INST_MOD_LSB */
 /* Accessor macros */
#define hal_get_sqif_inst_mod() hal_get_register_field8(SQIF_INST,SQIF_INST_MOD)
#define hal_set_sqif_inst_mod(x) hal_set_register_field(SQIF_INST,SQIF_INST_MOD,(x))
 /* Workings */
#define TYPE_OF_SQIF_INST_MOD SQIF_INST
#define FIELDS_MASKS_SHIFTED_SQIF_INST_MOD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_INST_MOD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_INST_MOD SQIF_INST

 /* Field SQIF_PAD_CAL_CLK_DEL_SEL */
 /* Accessor macros */
#define hal_get_sqif_pad_cal_clk_del_sel() hal_get_register_field8(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_DEL_SEL)
#define hal_set_sqif_pad_cal_clk_del_sel(x) hal_set_register_field(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_DEL_SEL,(x))
 /* Workings */
#define TYPE_OF_SQIF_PAD_CAL_CLK_DEL_SEL SQIF_PAD_CAL
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL_CLK_DEL_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL_CLK_DEL_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_CAL_CLK_DEL_SEL SQIF_PAD_CAL

 /* Field SQIF_PAD_CAL_CLK_EN */
 /* Accessor macros */
#define hal_get_sqif_pad_cal_clk_en() hal_get_register_field8(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_EN)
#define hal_set_sqif_pad_cal_clk_en(x) hal_set_register_field(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_PAD_CAL_CLK_EN SQIF_PAD_CAL
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL_CLK_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_CAL_CLK_EN SQIF_PAD_CAL

 /* Field SQIF_PAD_CAL_CLK_RST */
 /* Accessor macros */
#define hal_get_sqif_pad_cal_clk_rst() hal_get_register_field8(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_RST)
#define hal_set_sqif_pad_cal_clk_rst(x) hal_set_register_field(SQIF_PAD_CAL,SQIF_PAD_CAL_CLK_RST,(x))
 /* Workings */
#define TYPE_OF_SQIF_PAD_CAL_CLK_RST SQIF_PAD_CAL
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL_CLK_RST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL_CLK_RST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_CAL_CLK_RST SQIF_PAD_CAL

 /* Field SQIF_PAD_CAL_RX_EN */
 /* Accessor macros */
#define hal_get_sqif_pad_cal_rx_en() hal_get_register_field8(SQIF_PAD_CAL,SQIF_PAD_CAL_RX_EN)
#define hal_set_sqif_pad_cal_rx_en(x) hal_set_register_field(SQIF_PAD_CAL,SQIF_PAD_CAL_RX_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_PAD_CAL_RX_EN SQIF_PAD_CAL
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL_RX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL_RX_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_CAL_RX_EN SQIF_PAD_CAL

 /* Field SQIF_PAD_CAL_RX_RST */
 /* Accessor macros */
#define hal_get_sqif_pad_cal_rx_rst() hal_get_register_field8(SQIF_PAD_CAL,SQIF_PAD_CAL_RX_RST)
#define hal_set_sqif_pad_cal_rx_rst(x) hal_set_register_field(SQIF_PAD_CAL,SQIF_PAD_CAL_RX_RST,(x))
 /* Workings */
#define TYPE_OF_SQIF_PAD_CAL_RX_RST SQIF_PAD_CAL
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL_RX_RST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL_RX_RST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_CAL_RX_RST SQIF_PAD_CAL

 /* Field SQIF_PAD_DBG_LSB */
 /* Accessor macros */
#define hal_get_sqif_pad_dbg() hal_get_register_field8(SQIF_PAD_DBG,SQIF_PAD_DBG)
 /* Workings */
#define TYPE_OF_SQIF_PAD_DBG SQIF_PAD_DBG
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_DBG(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_DBG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_DBG(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_DBG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PAD_DBG SQIF_PAD_DBG

 /* Field SQIF_PEEK_DATA_LSB */
 /* Accessor macros */
#define hal_get_sqif_peek_data() hal_get_register_field8(SQIF_PEEK,SQIF_PEEK_DATA)
 /* Workings */
#define TYPE_OF_SQIF_PEEK_DATA SQIF_PEEK
#define FIELDS_MASKS_SHIFTED_SQIF_PEEK_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PEEK_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PEEK_DATA SQIF_PEEK

 /* Field SQIF_PEEK_GO_LAST */
 /* Accessor macros */
#define hal_get_sqif_peek_go_last() ((sqif_peek_go_last) hal_get_register_field8(SQIF_PEEK_GO,SQIF_PEEK_GO_LAST))
#define hal_set_sqif_peek_go_last(x) hal_set_register_field(SQIF_PEEK_GO,SQIF_PEEK_GO_LAST,(x))
 /* Workings */
#define TYPE_OF_SQIF_PEEK_GO_LAST SQIF_PEEK_GO
#define FIELDS_MASKS_SHIFTED_SQIF_PEEK_GO_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK_GO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PEEK_GO_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK_GO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PEEK_GO_LAST SQIF_PEEK_GO

 /* Field SQIF_PHASE_SEL0_LOW_PAD0_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel0_low_pad0() hal_get_register_field8(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD0)
#define hal_set_sqif_phase_sel0_low_pad0(x) hal_set_register_field(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD0,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL0_LOW_PAD0 SQIF_PHASE_SEL0
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL0_LOW_PAD0 SQIF_PHASE_SEL0

 /* Field SQIF_PHASE_SEL0_LOW_PAD1_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel0_low_pad1() hal_get_register_field8(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD1)
#define hal_set_sqif_phase_sel0_low_pad1(x) hal_set_register_field(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD1,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL0_LOW_PAD1 SQIF_PHASE_SEL0
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL0_LOW_PAD1 SQIF_PHASE_SEL0

 /* Field SQIF_PHASE_SEL0_LOW_PAD2_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel0_low_pad2() hal_get_register_field8(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD2)
#define hal_set_sqif_phase_sel0_low_pad2(x) hal_set_register_field(SQIF_PHASE_SEL0,SQIF_PHASE_SEL0_LOW_PAD2,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL0_LOW_PAD2 SQIF_PHASE_SEL0
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL0_LOW_PAD2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL0_LOW_PAD2 SQIF_PHASE_SEL0

 /* Field SQIF_PHASE_SEL1_HIGH_PAD0_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel1_high_pad0() hal_get_register_field8(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_HIGH_PAD0)
#define hal_set_sqif_phase_sel1_high_pad0(x) hal_set_register_field(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_HIGH_PAD0,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL1_HIGH_PAD0 SQIF_PHASE_SEL1
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL1_HIGH_PAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL1_HIGH_PAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL1_HIGH_PAD0 SQIF_PHASE_SEL1

 /* Field SQIF_PHASE_SEL1_HIGH_PAD1_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel1_high_pad1() hal_get_register_field8(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_HIGH_PAD1)
#define hal_set_sqif_phase_sel1_high_pad1(x) hal_set_register_field(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_HIGH_PAD1,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL1_HIGH_PAD1 SQIF_PHASE_SEL1
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL1_HIGH_PAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL1_HIGH_PAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL1_HIGH_PAD1 SQIF_PHASE_SEL1

 /* Field SQIF_PHASE_SEL1_LOW_PAD3_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel1_low_pad3() hal_get_register_field8(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_LOW_PAD3)
#define hal_set_sqif_phase_sel1_low_pad3(x) hal_set_register_field(SQIF_PHASE_SEL1,SQIF_PHASE_SEL1_LOW_PAD3,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL1_LOW_PAD3 SQIF_PHASE_SEL1
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL1_LOW_PAD3(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL1_LOW_PAD3(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL1_LOW_PAD3 SQIF_PHASE_SEL1

 /* Field SQIF_PHASE_SEL2_DDR_OVERRIDE */
 /* Accessor macros */
#define hal_get_sqif_phase_sel2_ddr_override() hal_get_register_field8(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_DDR_OVERRIDE)
#define hal_set_sqif_phase_sel2_ddr_override(x) hal_set_register_field(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_DDR_OVERRIDE,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL2_DDR_OVERRIDE SQIF_PHASE_SEL2
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL2_DDR_OVERRIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL2_DDR_OVERRIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL2_DDR_OVERRIDE SQIF_PHASE_SEL2

 /* Field SQIF_PHASE_SEL2_HIGH_PAD2_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel2_high_pad2() hal_get_register_field8(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_HIGH_PAD2)
#define hal_set_sqif_phase_sel2_high_pad2(x) hal_set_register_field(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_HIGH_PAD2,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL2_HIGH_PAD2 SQIF_PHASE_SEL2
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL2_HIGH_PAD2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL2_HIGH_PAD2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL2_HIGH_PAD2 SQIF_PHASE_SEL2

 /* Field SQIF_PHASE_SEL2_HIGH_PAD3_LSB */
 /* Accessor macros */
#define hal_get_sqif_phase_sel2_high_pad3() hal_get_register_field8(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_HIGH_PAD3)
#define hal_set_sqif_phase_sel2_high_pad3(x) hal_set_register_field(SQIF_PHASE_SEL2,SQIF_PHASE_SEL2_HIGH_PAD3,(x))
 /* Workings */
#define TYPE_OF_SQIF_PHASE_SEL2_HIGH_PAD3 SQIF_PHASE_SEL2
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL2_HIGH_PAD3(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL2_HIGH_PAD3(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_PHASE_SEL2_HIGH_PAD3 SQIF_PHASE_SEL2

 /* Field SQIF_POKE_DATA_LSB */
 /* Accessor macros */
#define hal_get_sqif_poke_data() hal_get_register_field8(SQIF_POKE,SQIF_POKE_DATA)
#define hal_set_sqif_poke_data(x) hal_set_register_field(SQIF_POKE,SQIF_POKE_DATA,(x))
 /* Workings */
#define TYPE_OF_SQIF_POKE_DATA SQIF_POKE
#define FIELDS_MASKS_SHIFTED_SQIF_POKE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_POKE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_POKE_DATA SQIF_POKE

 /* Field SQIF_POKE_LAST_DATA_LSB */
 /* Accessor macros */
#define hal_get_sqif_poke_last_data() hal_get_register_field8(SQIF_POKE_LAST,SQIF_POKE_LAST_DATA)
#define hal_set_sqif_poke_last_data(x) hal_set_register_field(SQIF_POKE_LAST,SQIF_POKE_LAST_DATA,(x))
 /* Workings */
#define TYPE_OF_SQIF_POKE_LAST_DATA SQIF_POKE_LAST
#define FIELDS_MASKS_SHIFTED_SQIF_POKE_LAST_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE_LAST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_POKE_LAST_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE_LAST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_POKE_LAST_DATA SQIF_POKE_LAST

 /* Field SQIF_RAM_CONF_ADD_LSB */
 /* Accessor macros */
#define hal_get_sqif_ram_conf_add() hal_get_register_field8(SQIF_RAM_CONF,SQIF_RAM_CONF_ADD)
#define hal_set_sqif_ram_conf_add(x) hal_set_register_field(SQIF_RAM_CONF,SQIF_RAM_CONF_ADD,(x))
 /* Workings */
#define TYPE_OF_SQIF_RAM_CONF_ADD SQIF_RAM_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_RAM_CONF_ADD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_RAM_CONF_ADD(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_RAM_CONF_ADD SQIF_RAM_CONF

 /* Field SQIF_RAM_CONF_DUM_LSB */
 /* Accessor macros */
#define hal_get_sqif_ram_conf_dum() hal_get_register_field8(SQIF_RAM_CONF,SQIF_RAM_CONF_DUM)
#define hal_set_sqif_ram_conf_dum(x) hal_set_register_field(SQIF_RAM_CONF,SQIF_RAM_CONF_DUM,(x))
 /* Workings */
#define TYPE_OF_SQIF_RAM_CONF_DUM SQIF_RAM_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_RAM_CONF_DUM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_RAM_CONF_DUM(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_RAM_CONF_DUM SQIF_RAM_CONF

 /* Field SQIF_RAM_CONF_DUM_WR_EN */
 /* Accessor macros */
#define hal_get_sqif_ram_conf_dum_wr_en() hal_get_register_field8(SQIF_RAM_CONF,SQIF_RAM_CONF_DUM_WR_EN)
#define hal_set_sqif_ram_conf_dum_wr_en(x) hal_set_register_field(SQIF_RAM_CONF,SQIF_RAM_CONF_DUM_WR_EN,(x))
 /* Workings */
#define TYPE_OF_SQIF_RAM_CONF_DUM_WR_EN SQIF_RAM_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_RAM_CONF_DUM_WR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_RAM_CONF_DUM_WR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_RAM_CONF_DUM_WR_EN SQIF_RAM_CONF

 /* Field SQIF_RAM_CONF_WID_LSB */
 /* Accessor macros */
#define hal_get_sqif_ram_conf_wid() hal_get_register_field8(SQIF_RAM_CONF,SQIF_RAM_CONF_WID)
#define hal_set_sqif_ram_conf_wid(x) hal_set_register_field(SQIF_RAM_CONF,SQIF_RAM_CONF_WID,(x))
 /* Workings */
#define TYPE_OF_SQIF_RAM_CONF_WID SQIF_RAM_CONF
#define FIELDS_MASKS_SHIFTED_SQIF_RAM_CONF_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_RAM_CONF_WID(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_RAM_CONF_WID SQIF_RAM_CONF

 /* Field SQIF__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif__p0_access_permission() ((sqif__p0_access_permission) hal_get_register_field8(SQIF_ACCESS_CTRL,SQIF__P0_ACCESS_PERMISSION))
#define hal_set_sqif__p0_access_permission(x) hal_set_register_field(SQIF_ACCESS_CTRL,SQIF__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF__P0_ACCESS_PERMISSION SQIF_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF__P0_ACCESS_PERMISSION SQIF_ACCESS_CTRL

 /* Field SQIF__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif__p1_access_permission() ((sqif__p1_access_permission) hal_get_register_field8(SQIF_ACCESS_CTRL,SQIF__P1_ACCESS_PERMISSION))
#define hal_set_sqif__p1_access_permission(x) hal_set_register_field(SQIF_ACCESS_CTRL,SQIF__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF__P1_ACCESS_PERMISSION SQIF_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF__P1_ACCESS_PERMISSION SQIF_ACCESS_CTRL

 /* Field SQIF__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif__p2_access_permission() ((sqif__p2_access_permission) hal_get_register_field8(SQIF_ACCESS_CTRL,SQIF__P2_ACCESS_PERMISSION))
#define hal_set_sqif__p2_access_permission(x) hal_set_register_field(SQIF_ACCESS_CTRL,SQIF__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF__P2_ACCESS_PERMISSION SQIF_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF__P2_ACCESS_PERMISSION SQIF_ACCESS_CTRL

 /* Field SQIF__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif__p3_access_permission() ((sqif__p3_access_permission) hal_get_register_field8(SQIF_ACCESS_CTRL,SQIF__P3_ACCESS_PERMISSION))
#define hal_set_sqif__p3_access_permission(x) hal_set_register_field(SQIF_ACCESS_CTRL,SQIF__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF__P3_ACCESS_PERMISSION SQIF_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF__P3_ACCESS_PERMISSION SQIF_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_SQIF_ACCESS_CTRL_SQIF_ACCESS_CTRL
#define CHECK_FIELD_TYPE_SQIF_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_SQIF_CONF_SQIF_CONF
#define CHECK_FIELD_TYPE_SQIF_CONF_END
#define CHECK_FIELD_TYPE_SQIF_CONF2_SQIF_CONF2
#define CHECK_FIELD_TYPE_SQIF_CONF2_END
#define CHECK_FIELD_TYPE_SQIF_CORR_CFG_SQIF_CORR_CFG
#define CHECK_FIELD_TYPE_SQIF_CORR_CFG_END
#define CHECK_FIELD_TYPE_SQIF_CTRL_SQIF_CTRL
#define CHECK_FIELD_TYPE_SQIF_CTRL_END
#define CHECK_FIELD_TYPE_SQIF_DDR_CENTER_SQIF_DDR_CENTER
#define CHECK_FIELD_TYPE_SQIF_DDR_CENTER_END
#define CHECK_FIELD_TYPE_SQIF_DDR_DBG_SEL_SQIF_DDR_DBG_SEL
#define CHECK_FIELD_TYPE_SQIF_DDR_DBG_SEL_END
#define CHECK_FIELD_TYPE_SQIF_DDR_LOCKED_SQIF_DDR_LOCKED
#define CHECK_FIELD_TYPE_SQIF_DDR_LOCKED_END
#define CHECK_FIELD_TYPE_SQIF_DDR_MARGIN_SQIF_DDR_MARGIN
#define CHECK_FIELD_TYPE_SQIF_DDR_MARGIN_END
#define CHECK_FIELD_TYPE_SQIF_DEBUG_SEL_SQIF_DEBUG_SEL
#define CHECK_FIELD_TYPE_SQIF_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_SQIF_FLASH_SIZE_SQIF_FLASH_SIZE
#define CHECK_FIELD_TYPE_SQIF_FLASH_SIZE_END
#define CHECK_FIELD_TYPE_SQIF_INST_SQIF_INST
#define CHECK_FIELD_TYPE_SQIF_INST_END
#define CHECK_FIELD_TYPE_SQIF_PAD_CAL_SQIF_PAD_CAL
#define CHECK_FIELD_TYPE_SQIF_PAD_CAL_END
#define CHECK_FIELD_TYPE_SQIF_PAD_DBG_SQIF_PAD_DBG
#define CHECK_FIELD_TYPE_SQIF_PAD_DBG_END
#define CHECK_FIELD_TYPE_SQIF_PEEK_SQIF_PEEK
#define CHECK_FIELD_TYPE_SQIF_PEEK_END
#define CHECK_FIELD_TYPE_SQIF_PEEK_GO_SQIF_PEEK_GO
#define CHECK_FIELD_TYPE_SQIF_PEEK_GO_END
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL0_SQIF_PHASE_SEL0
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL0_END
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL1_SQIF_PHASE_SEL1
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL1_END
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL2_SQIF_PHASE_SEL2
#define CHECK_FIELD_TYPE_SQIF_PHASE_SEL2_END
#define CHECK_FIELD_TYPE_SQIF_POKE_SQIF_POKE
#define CHECK_FIELD_TYPE_SQIF_POKE_END
#define CHECK_FIELD_TYPE_SQIF_POKE_LAST_SQIF_POKE_LAST
#define CHECK_FIELD_TYPE_SQIF_POKE_LAST_END
#define CHECK_FIELD_TYPE_SQIF_RAM_CONF_SQIF_RAM_CONF
#define CHECK_FIELD_TYPE_SQIF_RAM_CONF_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_SQIF_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_CONF(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_CONF2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CONF2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CONF2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_CORR_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CORR_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CORR_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_DDR_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DDR_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DDR_DBG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_INST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_INST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_INST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PAD_CAL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PAD_CAL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PAD_CAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PEEK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PEEK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PEEK_GO(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK_GO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PEEK_GO(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PEEK_GO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL0(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL1(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_PHASE_SEL2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_PHASE_SEL2(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_PHASE_SEL2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_POKE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_POKE(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_POKE_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE_LAST, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_POKE_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_POKE_LAST, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_RAM_CONF(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_RAM_CONF(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_RAM_CONF, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define SQIF_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_sqif_access_ctrl(x) hal_set_register(SQIF_ACCESS_CTRL, x, 1)
#define hal_get_reg_sqif_access_ctrl() hal_get_register(SQIF_ACCESS_CTRL, 1)
#define SQIF_CONF_REG_BITS (12u)
#define hal_set_reg_sqif_conf(x) hal_set_register(SQIF_CONF, x, 1)
#define hal_get_reg_sqif_conf() hal_get_register(SQIF_CONF, 1)
#define SQIF_CONF2_REG_BITS (13u)
#define hal_set_reg_sqif_conf2(x) hal_set_register(SQIF_CONF2, x, 1)
#define hal_get_reg_sqif_conf2() hal_get_register(SQIF_CONF2, 1)
#define SQIF_CORR_CFG_REG_BITS (14u)
#define hal_set_reg_sqif_corr_cfg(x) hal_set_register(SQIF_CORR_CFG, x, 1)
#define hal_get_reg_sqif_corr_cfg() hal_get_register(SQIF_CORR_CFG, 1)
#define SQIF_CTRL_REG_BITS (12u)
#define hal_set_reg_sqif_ctrl(x) hal_set_register(SQIF_CTRL, x, 1)
#define hal_get_reg_sqif_ctrl() hal_get_register(SQIF_CTRL, 1)
#define SQIF_DDR_CENTER_REG_BITS (10u)
#define hal_get_reg_sqif_ddr_center() hal_get_register(SQIF_DDR_CENTER, 1)
#define SQIF_DDR_DBG_SEL_REG_BITS (8u)
#define hal_set_reg_sqif_ddr_dbg_sel(x) hal_set_register(SQIF_DDR_DBG_SEL, x, 1)
#define hal_get_reg_sqif_ddr_dbg_sel() hal_get_register(SQIF_DDR_DBG_SEL, 1)
#define SQIF_DDR_LOCKED_REG_BITS (4u)
#define hal_get_reg_sqif_ddr_locked() hal_get_register(SQIF_DDR_LOCKED, 1)
#define SQIF_DDR_MARGIN_REG_BITS (10u)
#define hal_get_reg_sqif_ddr_margin() hal_get_register(SQIF_DDR_MARGIN, 1)
#define SQIF_DEBUG_SEL_REG_BITS (4u)
#define hal_set_reg_sqif_debug_sel(x) hal_set_register(SQIF_DEBUG_SEL, x, 1)
#define hal_get_reg_sqif_debug_sel() hal_get_register(SQIF_DEBUG_SEL, 1)
#define SQIF_FLASH_SIZE_REG_BITS (6u)
#define hal_set_reg_sqif_flash_size(x) hal_set_register(SQIF_FLASH_SIZE, x, 1)
#define hal_get_reg_sqif_flash_size() hal_get_register(SQIF_FLASH_SIZE, 1)
#define SQIF_INST_REG_BITS (16u)
#define hal_set_reg_sqif_inst(x) hal_set_register(SQIF_INST, x, 1)
#define hal_get_reg_sqif_inst() hal_get_register(SQIF_INST, 1)
#define SQIF_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_sqif_mutex_lock(x) hal_set_register(SQIF_MUTEX_LOCK, x, 1)
#define hal_get_reg_sqif_mutex_lock() hal_get_register(SQIF_MUTEX_LOCK, 1)
#define SQIF_PAD_CAL_REG_BITS (5u)
#define hal_set_reg_sqif_pad_cal(x) hal_set_register(SQIF_PAD_CAL, x, 1)
#define hal_get_reg_sqif_pad_cal() hal_get_register(SQIF_PAD_CAL, 1)
#define SQIF_PAD_DBG_REG_BITS (6u)
#define hal_get_reg_sqif_pad_dbg() hal_get_register(SQIF_PAD_DBG, 1)
#define SQIF_PEEK_REG_BITS (8u)
#define hal_get_reg_sqif_peek() hal_get_register(SQIF_PEEK, 1)
#define SQIF_PEEK_GO_REG_BITS (1u)
#define hal_set_reg_sqif_peek_go(x) hal_set_register(SQIF_PEEK_GO, x, 1)
#define hal_get_reg_sqif_peek_go() hal_get_register(SQIF_PEEK_GO, 1)
#define SQIF_PHASE_SEL0_REG_BITS (15u)
#define hal_set_reg_sqif_phase_sel0(x) hal_set_register(SQIF_PHASE_SEL0, x, 1)
#define hal_get_reg_sqif_phase_sel0() hal_get_register(SQIF_PHASE_SEL0, 1)
#define SQIF_PHASE_SEL1_REG_BITS (15u)
#define hal_set_reg_sqif_phase_sel1(x) hal_set_register(SQIF_PHASE_SEL1, x, 1)
#define hal_get_reg_sqif_phase_sel1() hal_get_register(SQIF_PHASE_SEL1, 1)
#define SQIF_PHASE_SEL2_REG_BITS (11u)
#define hal_set_reg_sqif_phase_sel2(x) hal_set_register(SQIF_PHASE_SEL2, x, 1)
#define hal_get_reg_sqif_phase_sel2() hal_get_register(SQIF_PHASE_SEL2, 1)
#define SQIF_POKE_REG_BITS (8u)
#define hal_set_reg_sqif_poke(x) hal_set_register(SQIF_POKE, x, 1)
#define hal_get_reg_sqif_poke() hal_get_register(SQIF_POKE, 1)
#define SQIF_POKE_LAST_REG_BITS (8u)
#define hal_set_reg_sqif_poke_last(x) hal_set_register(SQIF_POKE_LAST, x, 1)
#define hal_get_reg_sqif_poke_last() hal_get_register(SQIF_POKE_LAST, 1)
#define SQIF_RAM_CONF_REG_BITS (8u)
#define hal_set_reg_sqif_ram_conf(x) hal_set_register(SQIF_RAM_CONF, x, 1)
#define hal_get_reg_sqif_ram_conf() hal_get_register(SQIF_RAM_CONF, 1)

 /* Workings */
#define SETTER_FOR_SQIF_ACCESS_CTRL hal_set_reg_sqif_access_ctrl
#define GETTER_FOR_SQIF_ACCESS_CTRL hal_get_reg_sqif_access_ctrl
#define SETTER_FOR_SQIF_CONF hal_set_reg_sqif_conf
#define GETTER_FOR_SQIF_CONF hal_get_reg_sqif_conf
#define SETTER_FOR_SQIF_CONF2 hal_set_reg_sqif_conf2
#define GETTER_FOR_SQIF_CONF2 hal_get_reg_sqif_conf2
#define SETTER_FOR_SQIF_CORR_CFG hal_set_reg_sqif_corr_cfg
#define GETTER_FOR_SQIF_CORR_CFG hal_get_reg_sqif_corr_cfg
#define SETTER_FOR_SQIF_CTRL hal_set_reg_sqif_ctrl
#define GETTER_FOR_SQIF_CTRL hal_get_reg_sqif_ctrl
#define GETTER_FOR_SQIF_DDR_CENTER hal_get_reg_sqif_ddr_center
#define SETTER_FOR_SQIF_DDR_DBG_SEL hal_set_reg_sqif_ddr_dbg_sel
#define GETTER_FOR_SQIF_DDR_DBG_SEL hal_get_reg_sqif_ddr_dbg_sel
#define GETTER_FOR_SQIF_DDR_LOCKED hal_get_reg_sqif_ddr_locked
#define GETTER_FOR_SQIF_DDR_MARGIN hal_get_reg_sqif_ddr_margin
#define SETTER_FOR_SQIF_DEBUG_SEL hal_set_reg_sqif_debug_sel
#define GETTER_FOR_SQIF_DEBUG_SEL hal_get_reg_sqif_debug_sel
#define SETTER_FOR_SQIF_FLASH_SIZE hal_set_reg_sqif_flash_size
#define GETTER_FOR_SQIF_FLASH_SIZE hal_get_reg_sqif_flash_size
#define SETTER_FOR_SQIF_INST hal_set_reg_sqif_inst
#define GETTER_FOR_SQIF_INST hal_get_reg_sqif_inst
#define SETTER_FOR_SQIF_MUTEX_LOCK hal_set_reg_sqif_mutex_lock
#define GETTER_FOR_SQIF_MUTEX_LOCK hal_get_reg_sqif_mutex_lock
#define SETTER_FOR_SQIF_PAD_CAL hal_set_reg_sqif_pad_cal
#define GETTER_FOR_SQIF_PAD_CAL hal_get_reg_sqif_pad_cal
#define GETTER_FOR_SQIF_PAD_DBG hal_get_reg_sqif_pad_dbg
#define GETTER_FOR_SQIF_PEEK hal_get_reg_sqif_peek
#define SETTER_FOR_SQIF_PEEK_GO hal_set_reg_sqif_peek_go
#define GETTER_FOR_SQIF_PEEK_GO hal_get_reg_sqif_peek_go
#define SETTER_FOR_SQIF_PHASE_SEL0 hal_set_reg_sqif_phase_sel0
#define GETTER_FOR_SQIF_PHASE_SEL0 hal_get_reg_sqif_phase_sel0
#define SETTER_FOR_SQIF_PHASE_SEL1 hal_set_reg_sqif_phase_sel1
#define GETTER_FOR_SQIF_PHASE_SEL1 hal_get_reg_sqif_phase_sel1
#define SETTER_FOR_SQIF_PHASE_SEL2 hal_set_reg_sqif_phase_sel2
#define GETTER_FOR_SQIF_PHASE_SEL2 hal_get_reg_sqif_phase_sel2
#define SETTER_FOR_SQIF_POKE hal_set_reg_sqif_poke
#define GETTER_FOR_SQIF_POKE hal_get_reg_sqif_poke
#define SETTER_FOR_SQIF_POKE_LAST hal_set_reg_sqif_poke_last
#define GETTER_FOR_SQIF_POKE_LAST hal_get_reg_sqif_poke_last
#define SETTER_FOR_SQIF_RAM_CONF hal_set_reg_sqif_ram_conf
#define GETTER_FOR_SQIF_RAM_CONF hal_get_reg_sqif_ram_conf

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_SQIF) */
#endif /* __HAL_MACROS_H__MODULE_SQIF */


#if defined(IO_DEFS_MODULE_APPS_SYS_CPU1_VM) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_CPU1_VM
#define __HAL_MACROS_H__MODULE_APPS_SYS_CPU1_VM

/* -- CPU1 Apps-specific virtual memory registers -- */

 /* Field APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__p0_access_permission() ((apps_sys_cpu1_vm__p0_access_permission) hal_get_register_field8(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu1_vm__p0_access_permission(x) hal_set_register_field(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__P0_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL

 /* Field APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__p1_access_permission() ((apps_sys_cpu1_vm__p1_access_permission) hal_get_register_field8(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu1_vm__p1_access_permission(x) hal_set_register_field(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__P1_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL

 /* Field APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__p2_access_permission() ((apps_sys_cpu1_vm__p2_access_permission) hal_get_register_field8(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu1_vm__p2_access_permission(x) hal_set_register_field(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__P2_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL

 /* Field APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__p3_access_permission() ((apps_sys_cpu1_vm__p3_access_permission) hal_get_register_field8(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu1_vm__p3_access_permission(x) hal_set_register_field(VM_CPU1_ACCESS_CTRL,APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__P3_ACCESS_PERMISSION VM_CPU1_ACCESS_CTRL

 /* Field APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_buffer_access_handle_handle() hal_get_register_field8(VM_BUFFER_ACCESS_CPU1_HANDLE,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE)
#define hal_set_apps_sys_cpu1_vm__vm_buffer_access_handle_handle(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU1_HANDLE,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE VM_BUFFER_ACCESS_CPU1_HANDLE
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_HANDLE VM_BUFFER_ACCESS_CPU1_HANDLE

 /* Field APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_buffer_access_handle_subsystem() hal_get_register_field8(VM_BUFFER_ACCESS_CPU1_HANDLE,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM)
#define hal_set_apps_sys_cpu1_vm__vm_buffer_access_handle_subsystem(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU1_HANDLE,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM VM_BUFFER_ACCESS_CPU1_HANDLE
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM VM_BUFFER_ACCESS_CPU1_HANDLE

 /* Field APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_buffer_access_status_access() hal_get_register_field8(VM_BUFFER_ACCESS_CPU1_STATUS,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS VM_BUFFER_ACCESS_CPU1_STATUS
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACCESS VM_BUFFER_ACCESS_CPU1_STATUS

 /* Field APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_buffer_access_status_active() hal_get_register_field8(VM_BUFFER_ACCESS_CPU1_STATUS,APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE VM_BUFFER_ACCESS_CPU1_STATUS
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_BUFFER_ACCESS_STATUS_ACTIVE VM_BUFFER_ACCESS_CPU1_STATUS

 /* Field APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_request_status_access_denied_read_status() hal_get_register_field8(VM_REQUEST_CPU1_READ_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED)
#define hal_get_apps_sys_cpu1_vm__vm_request_status_access_denied_write_status() hal_get_register_field8(VM_REQUEST_CPU1_WRITE_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACCESS_DENIED APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM

 /* Field APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_request_status_active_read_status() hal_get_register_field8(VM_REQUEST_CPU1_READ_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE)
#define hal_get_apps_sys_cpu1_vm__vm_request_status_active_write_status() hal_get_register_field8(VM_REQUEST_CPU1_WRITE_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_ACTIVE APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM

 /* Field APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_handle_read_status() hal_get_register_field8(VM_REQUEST_CPU1_READ_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE)
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_handle_write_status() hal_get_register_field8(VM_REQUEST_CPU1_WRITE_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_HANDLE APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM

 /* Field APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_status_read_status() hal_get_register_field8(VM_REQUEST_CPU1_READ_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS)
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_status_write_status() hal_get_register_field8(VM_REQUEST_CPU1_WRITE_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_STATUS APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM

 /* Field APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_subsys_read_status() hal_get_register_field8(VM_REQUEST_CPU1_READ_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS)
#define hal_get_apps_sys_cpu1_vm__vm_request_status_buffer_subsys_write_status() hal_get_register_field8(VM_REQUEST_CPU1_WRITE_STATUS,APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS)
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU1_VM__VM_REQUEST_STATUS_BUFFER_SUBSYS APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM

 /* Field VM_BUFFER_ACCESS_CPU1_OFFSET_READ_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_cpu1_offset_read() hal_get_register_field32(VM_BUFFER_ACCESS_CPU1_OFFSET_READ,VM_BUFFER_ACCESS_CPU1_OFFSET_READ)
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_CPU1_OFFSET_READ VM_BUFFER_ACCESS_CPU1_OFFSET_READ
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU1_OFFSET_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_OFFSET_READ, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU1_OFFSET_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_OFFSET_READ, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_CPU1_OFFSET_READ VM_BUFFER_ACCESS_CPU1_OFFSET_READ

 /* Field VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_cpu1_offset_write() hal_get_register_field32(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE,VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE)
#define hal_set_vm_buffer_access_cpu1_offset_write(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE,VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE,(x))
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE

 /* Field VM_CPU1_REQUESTS_READ */
 /* Accessor macros */
#define hal_get_vm_cpu1_requests_read() hal_get_register_field8(VM_CPU1_CLEAR_PORT,VM_CPU1_REQUESTS_READ)
#define hal_set_vm_cpu1_requests_read(x) hal_set_register_field(VM_CPU1_CLEAR_PORT,VM_CPU1_REQUESTS_READ,(x))
 /* Workings */
#define TYPE_OF_VM_CPU1_REQUESTS_READ VM_CPU1_CLEAR_PORT
#define FIELDS_MASKS_SHIFTED_VM_CPU1_REQUESTS_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU1_REQUESTS_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_CPU1_REQUESTS_READ VM_CPU1_CLEAR_PORT

 /* Field VM_CPU1_REQUESTS_WRITE */
 /* Accessor macros */
#define hal_get_vm_cpu1_requests_write() hal_get_register_field8(VM_CPU1_CLEAR_PORT,VM_CPU1_REQUESTS_WRITE)
#define hal_set_vm_cpu1_requests_write(x) hal_set_register_field(VM_CPU1_CLEAR_PORT,VM_CPU1_REQUESTS_WRITE,(x))
 /* Workings */
#define TYPE_OF_VM_CPU1_REQUESTS_WRITE VM_CPU1_CLEAR_PORT
#define FIELDS_MASKS_SHIFTED_VM_CPU1_REQUESTS_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU1_REQUESTS_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_CPU1_REQUESTS_WRITE VM_CPU1_CLEAR_PORT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_HANDLE_VM_BUFFER_ACCESS_CPU1_HANDLE
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_HANDLE_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_OFFSET_READ_VM_BUFFER_ACCESS_CPU1_OFFSET_READ
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_OFFSET_READ_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_STATUS_VM_BUFFER_ACCESS_CPU1_STATUS
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU1_STATUS_END
#define CHECK_FIELD_TYPE_VM_CPU1_ACCESS_CTRL_VM_CPU1_ACCESS_CTRL
#define CHECK_FIELD_TYPE_VM_CPU1_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_VM_CPU1_CLEAR_PORT_VM_CPU1_CLEAR_PORT
#define CHECK_FIELD_TYPE_VM_CPU1_CLEAR_PORT_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_READ_STATUS_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_READ_STATUS_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_WRITE_STATUS_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_WRITE_STATUS_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_VM__VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU1_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU1_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU1_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU1_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_CPU1_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU1_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_CPU1_CLEAR_PORT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU1_CLEAR_PORT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU1_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU1_READ_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_READ_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU1_READ_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_READ_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU1_WRITE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_WRITE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU1_WRITE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_WRITE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define MMU_BUFFER_ACCESS_CPU1_DO_ACTION_REG_BITS (1u)
#define hal_set_reg_mmu_buffer_access_cpu1_do_action(x) hal_set_register(MMU_BUFFER_ACCESS_CPU1_DO_ACTION, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu1_do_action() hal_get_register(MMU_BUFFER_ACCESS_CPU1_DO_ACTION, 1)
#define MMU_BUFFER_ACCESS_CPU1_HANDLE_REG_BITS (12u)
#define hal_set_reg_mmu_buffer_access_cpu1_handle(x) hal_set_register(MMU_BUFFER_ACCESS_CPU1_HANDLE, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu1_handle() hal_get_register(MMU_BUFFER_ACCESS_CPU1_HANDLE, 1)
#define MMU_BUFFER_ACCESS_CPU1_OFFSET_READ_REG_BITS (18u)
#define hal_get_reg_mmu_buffer_access_cpu1_offset_read() hal_get_register(MMU_BUFFER_ACCESS_CPU1_OFFSET_READ, 1)
#define MMU_BUFFER_ACCESS_CPU1_OFFSET_WRITE_REG_BITS (18u)
#define hal_set_reg_mmu_buffer_access_cpu1_offset_write(x) hal_set_register(MMU_BUFFER_ACCESS_CPU1_OFFSET_WRITE, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu1_offset_write() hal_get_register(MMU_BUFFER_ACCESS_CPU1_OFFSET_WRITE, 1)
#define MMU_BUFFER_ACCESS_CPU1_STATUS_REG_BITS (5u)
#define hal_get_reg_mmu_buffer_access_cpu1_status() hal_get_register(MMU_BUFFER_ACCESS_CPU1_STATUS, 1)
#define VM_BUFFER_ACCESS_CPU1_DO_ACTION_REG_BITS (1u)
#define hal_set_reg_vm_buffer_access_cpu1_do_action(x) hal_set_register(VM_BUFFER_ACCESS_CPU1_DO_ACTION, x, 1)
#define hal_get_reg_vm_buffer_access_cpu1_do_action() hal_get_register(VM_BUFFER_ACCESS_CPU1_DO_ACTION, 1)
#define VM_BUFFER_ACCESS_CPU1_HANDLE_REG_BITS (12u)
#define hal_set_reg_vm_buffer_access_cpu1_handle(x) hal_set_register(VM_BUFFER_ACCESS_CPU1_HANDLE, x, 1)
#define hal_get_reg_vm_buffer_access_cpu1_handle() hal_get_register(VM_BUFFER_ACCESS_CPU1_HANDLE, 1)
#define VM_BUFFER_ACCESS_CPU1_OFFSET_READ_REG_BITS (18u)
#define hal_get_reg_vm_buffer_access_cpu1_offset_read() hal_get_register(VM_BUFFER_ACCESS_CPU1_OFFSET_READ, 1)
#define VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE_REG_BITS (18u)
#define hal_set_reg_vm_buffer_access_cpu1_offset_write(x) hal_set_register(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE, x, 1)
#define hal_get_reg_vm_buffer_access_cpu1_offset_write() hal_get_register(VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE, 1)
#define VM_BUFFER_ACCESS_CPU1_STATUS_REG_BITS (5u)
#define hal_get_reg_vm_buffer_access_cpu1_status() hal_get_register(VM_BUFFER_ACCESS_CPU1_STATUS, 1)
#define VM_CPU1_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_vm_cpu1_access_ctrl(x) hal_set_register(VM_CPU1_ACCESS_CTRL, x, 1)
#define hal_get_reg_vm_cpu1_access_ctrl() hal_get_register(VM_CPU1_ACCESS_CTRL, 1)
#define VM_CPU1_CLEAR_PORT_REG_BITS (2u)
#define hal_set_reg_vm_cpu1_clear_port(x) hal_set_register(VM_CPU1_CLEAR_PORT, x, 1)
#define hal_get_reg_vm_cpu1_clear_port() hal_get_register(VM_CPU1_CLEAR_PORT, 1)
#define VM_CPU1_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_vm_cpu1_mutex_lock(x) hal_set_register(VM_CPU1_MUTEX_LOCK, x, 1)
#define hal_get_reg_vm_cpu1_mutex_lock() hal_get_register(VM_CPU1_MUTEX_LOCK, 1)
#define VM_REQUEST_CPU1_READ_STATUS_REG_BITS (18u)
#define hal_get_reg_vm_request_cpu1_read_status() hal_get_register(VM_REQUEST_CPU1_READ_STATUS, 1)
#define VM_REQUEST_CPU1_WRITE_STATUS_REG_BITS (18u)
#define hal_get_reg_vm_request_cpu1_write_status() hal_get_register(VM_REQUEST_CPU1_WRITE_STATUS, 1)

 /* Workings */
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU1_DO_ACTION hal_set_reg_mmu_buffer_access_cpu1_do_action
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU1_DO_ACTION hal_get_reg_mmu_buffer_access_cpu1_do_action
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU1_HANDLE hal_set_reg_mmu_buffer_access_cpu1_handle
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU1_HANDLE hal_get_reg_mmu_buffer_access_cpu1_handle
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU1_OFFSET_READ hal_get_reg_mmu_buffer_access_cpu1_offset_read
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU1_OFFSET_WRITE hal_set_reg_mmu_buffer_access_cpu1_offset_write
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU1_OFFSET_WRITE hal_get_reg_mmu_buffer_access_cpu1_offset_write
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU1_STATUS hal_get_reg_mmu_buffer_access_cpu1_status
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU1_DO_ACTION hal_set_reg_vm_buffer_access_cpu1_do_action
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU1_DO_ACTION hal_get_reg_vm_buffer_access_cpu1_do_action
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU1_HANDLE hal_set_reg_vm_buffer_access_cpu1_handle
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU1_HANDLE hal_get_reg_vm_buffer_access_cpu1_handle
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU1_OFFSET_READ hal_get_reg_vm_buffer_access_cpu1_offset_read
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE hal_set_reg_vm_buffer_access_cpu1_offset_write
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU1_OFFSET_WRITE hal_get_reg_vm_buffer_access_cpu1_offset_write
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU1_STATUS hal_get_reg_vm_buffer_access_cpu1_status
#define SETTER_FOR_VM_CPU1_ACCESS_CTRL hal_set_reg_vm_cpu1_access_ctrl
#define GETTER_FOR_VM_CPU1_ACCESS_CTRL hal_get_reg_vm_cpu1_access_ctrl
#define SETTER_FOR_VM_CPU1_CLEAR_PORT hal_set_reg_vm_cpu1_clear_port
#define GETTER_FOR_VM_CPU1_CLEAR_PORT hal_get_reg_vm_cpu1_clear_port
#define SETTER_FOR_VM_CPU1_MUTEX_LOCK hal_set_reg_vm_cpu1_mutex_lock
#define GETTER_FOR_VM_CPU1_MUTEX_LOCK hal_get_reg_vm_cpu1_mutex_lock
#define GETTER_FOR_VM_REQUEST_CPU1_READ_STATUS hal_get_reg_vm_request_cpu1_read_status
#define GETTER_FOR_VM_REQUEST_CPU1_WRITE_STATUS hal_get_reg_vm_request_cpu1_write_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_CPU1_VM) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_CPU1_VM */


#if defined(IO_DEFS_MODULE_HOST_SYS_CONFIG) 

#ifndef __HAL_MACROS_H__MODULE_HOST_SYS_CONFIG
#define __HAL_MACROS_H__MODULE_HOST_SYS_CONFIG

/* -- Host subsystem interface control registers -- */

 /* Field HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE)
#define hal_set_host_sys_bitserial_0_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_clk_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_clk_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_clk_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_clk_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_data_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_data_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_data_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_data_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_sel_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_sel_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_0_sel_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_0_sel_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE)
#define hal_set_host_sys_bitserial_1_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_clk_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_clk_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_clk_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_clk_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_data_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_data_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_data_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_data_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_sel_input_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_sel_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL

 /* Field HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_bitserial_1_sel_output_pio_ctrl() hal_get_register_field8(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_bitserial_1_sel_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL,HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_BTM_DEBUG_SELECT_LSB */
 /* Accessor macros */
#define hal_get_host_sys_btm_debug_select() hal_get_register_field8(HOST_SYS_BTM_DEBUG_SELECT,HOST_SYS_BTM_DEBUG_SELECT)
#define hal_set_host_sys_btm_debug_select(x) hal_set_register_field(HOST_SYS_BTM_DEBUG_SELECT,HOST_SYS_BTM_DEBUG_SELECT,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_BTM_DEBUG_SELECT HOST_SYS_BTM_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BTM_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BTM_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BTM_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BTM_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BTM_DEBUG_SELECT HOST_SYS_BTM_DEBUG_SELECT

 /* Field HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS */
 /* Accessor macros */
#define hal_get_host_sys_build_options_btm_locked_clocks() hal_get_register_field8(HOST_SYS_BUILD_OPTIONS,HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS)
 /* Workings */
#define TYPE_OF_HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS HOST_SYS_BUILD_OPTIONS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BUILD_OPTIONS_BTM_LOCKED_CLOCKS HOST_SYS_BUILD_OPTIONS

 /* Field HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS */
 /* Accessor macros */
#define hal_get_host_sys_build_options_btm_phase_locked_clocks() hal_get_register_field8(HOST_SYS_BUILD_OPTIONS,HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS)
 /* Workings */
#define TYPE_OF_HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS HOST_SYS_BUILD_OPTIONS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BUILD_OPTIONS_BTM_PHASE_LOCKED_CLOCKS HOST_SYS_BUILD_OPTIONS

 /* Field HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN_LSB */
 /* Accessor macros */
#define hal_get_host_sys_build_options_clk_80m_div_min() hal_get_register_field8(HOST_SYS_BUILD_OPTIONS,HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN)
 /* Workings */
#define TYPE_OF_HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN HOST_SYS_BUILD_OPTIONS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BUILD_OPTIONS_CLK_80M_DIV_MIN HOST_SYS_BUILD_OPTIONS

 /* Field HOST_SYS_BUILD_OPTIONS_POWER_AWARE */
 /* Accessor macros */
#define hal_get_host_sys_build_options_power_aware() hal_get_register_field8(HOST_SYS_BUILD_OPTIONS,HOST_SYS_BUILD_OPTIONS_POWER_AWARE)
 /* Workings */
#define TYPE_OF_HOST_SYS_BUILD_OPTIONS_POWER_AWARE HOST_SYS_BUILD_OPTIONS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BUILD_OPTIONS_POWER_AWARE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BUILD_OPTIONS_POWER_AWARE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_BUILD_OPTIONS_POWER_AWARE HOST_SYS_BUILD_OPTIONS

 /* Field HOST_SYS_CLK_80M_DIV_LSB */
 /* Accessor macros */
#define hal_get_host_sys_clk_80m_div() hal_get_register_field8(HOST_SYS_CLK_80M_DIV,HOST_SYS_CLK_80M_DIV)
#define hal_set_host_sys_clk_80m_div(x) hal_set_register_field(HOST_SYS_CLK_80M_DIV,HOST_SYS_CLK_80M_DIV,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_CLK_80M_DIV HOST_SYS_CLK_80M_DIV
#define FIELDS_MASKS_SHIFTED_HOST_SYS_CLK_80M_DIV(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CLK_80M_DIV, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_CLK_80M_DIV(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CLK_80M_DIV, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_CLK_80M_DIV HOST_SYS_CLK_80M_DIV

 /* Field HOST_SYS_CONFIG_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_config_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_CONFIG_CLK_FORCE_ENABLE)
#define hal_set_host_sys_config_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_CONFIG_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_CONFIG_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_CONFIG_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_CONFIG_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_CONFIG_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_DEBUG_SELECT1500_LSB */
 /* Accessor macros */
#define hal_get_host_sys_debug_select1500() hal_get_register_field8(HOST_SYS_DEBUG_SELECT,HOST_SYS_DEBUG_SELECT1500)
#define hal_set_host_sys_debug_select1500(x) hal_set_register_field(HOST_SYS_DEBUG_SELECT,HOST_SYS_DEBUG_SELECT1500,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_DEBUG_SELECT1500 HOST_SYS_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_HOST_SYS_DEBUG_SELECT1500(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_DEBUG_SELECT1500(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_DEBUG_SELECT1500 HOST_SYS_DEBUG_SELECT

 /* Field HOST_SYS_DEBUG_SELECT3116_LSB */
 /* Accessor macros */
#define hal_get_host_sys_debug_select3116() hal_get_register_field8(HOST_SYS_DEBUG_SELECT,HOST_SYS_DEBUG_SELECT3116)
#define hal_set_host_sys_debug_select3116(x) hal_set_register_field(HOST_SYS_DEBUG_SELECT,HOST_SYS_DEBUG_SELECT3116,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_DEBUG_SELECT3116 HOST_SYS_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_HOST_SYS_DEBUG_SELECT3116(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_DEBUG_SELECT3116(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_DEBUG_SELECT3116 HOST_SYS_DEBUG_SELECT

 /* Field HOST_SYS_EMAW_LSB */
 /* Accessor macros */
#define hal_get_host_sys_emaw_ram0_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA,HOST_SYS_EMAW)
#define hal_set_host_sys_emaw_ram0_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA,HOST_SYS_EMAW,(x))
#define hal_get_host_sys_emaw_ram1_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA,HOST_SYS_EMAW)
#define hal_set_host_sys_emaw_ram1_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA,HOST_SYS_EMAW,(x))
#define hal_get_host_sys_emaw_ram2_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA,HOST_SYS_EMAW)
#define hal_set_host_sys_emaw_ram2_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA,HOST_SYS_EMAW,(x))
#define hal_get_host_sys_emaw_ram3_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA,HOST_SYS_EMAW)
#define hal_set_host_sys_emaw_ram3_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA,HOST_SYS_EMAW,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_EMAW HOST_SYS_RAM_EMA_FIELDS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_EMAW(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_EMAW HOST_SYS_RAM_EMA_FIELDS

 /* Field HOST_SYS_EMA_LSB */
 /* Accessor macros */
#define hal_get_host_sys_ema_ram0_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA,HOST_SYS_EMA)
#define hal_set_host_sys_ema_ram0_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA,HOST_SYS_EMA,(x))
#define hal_get_host_sys_ema_ram1_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA,HOST_SYS_EMA)
#define hal_set_host_sys_ema_ram1_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA,HOST_SYS_EMA,(x))
#define hal_get_host_sys_ema_ram2_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA,HOST_SYS_EMA)
#define hal_set_host_sys_ema_ram2_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA,HOST_SYS_EMA,(x))
#define hal_get_host_sys_ema_ram3_ema() hal_get_register_field8(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA,HOST_SYS_EMA)
#define hal_set_host_sys_ema_ram3_ema(x) hal_set_register_field(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA,HOST_SYS_EMA,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_EMA HOST_SYS_RAM_EMA_FIELDS
#define FIELDS_MASKS_SHIFTED_HOST_SYS_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_EMA HOST_SYS_RAM_EMA_FIELDS

 /* Field HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN_LSB */
 /* Accessor macros */
#define hal_get_host_sys_reg_access_subsys_in_addr_en() hal_get_register_field16(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN,HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN)
#define hal_set_host_sys_reg_access_subsys_in_addr_en(x) hal_set_register_field(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN,HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN
#define FIELDS_MASKS_SHIFTED_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN

 /* Field HOST_SYS_REG_IF_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_reg_if_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_REG_IF_CLK_FORCE_ENABLE)
#define hal_set_host_sys_reg_if_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_REG_IF_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_REG_IF_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_REG_IF_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_REG_IF_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_REG_IF_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_SDIO_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_sdio_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_SDIO_CLK_FORCE_ENABLE)
#define hal_set_host_sys_sdio_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_SDIO_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_SDIO_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_SDIO_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_SDIO_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_SDIO_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_sdio_sideband_interrupt_output_pio_ctrl() hal_get_register_field8(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL,HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_sdio_sideband_interrupt_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL,HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_TValA1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvala1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValA1)
#define hal_set_host_sys_tvala1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValA1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValA1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValA1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValA1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValA1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1

 /* Field HOST_SYS_TValA_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvala() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValA)
#define hal_set_host_sys_tvala(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValA,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValA HOST_SYS_MMU_RAM_SEQ_TIMING_REG2
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValA(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValA(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValA HOST_SYS_MMU_RAM_SEQ_TIMING_REG2

 /* Field HOST_SYS_TValB1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalb1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValB1)
#define hal_set_host_sys_tvalb1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValB1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValB1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValB1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValB1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValB1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1

 /* Field HOST_SYS_TValB_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalb() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValB)
#define hal_set_host_sys_tvalb(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValB,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValB HOST_SYS_MMU_RAM_SEQ_TIMING_REG2
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValB(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValB(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValB HOST_SYS_MMU_RAM_SEQ_TIMING_REG2

 /* Field HOST_SYS_TValC1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalc1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValC1)
#define hal_set_host_sys_tvalc1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValC1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValC1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValC1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValC1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValC1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG1

 /* Field HOST_SYS_TValC_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalc() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValC)
#define hal_set_host_sys_tvalc(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2,HOST_SYS_TValC,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValC HOST_SYS_MMU_RAM_SEQ_TIMING_REG2
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValC(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValC(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValC HOST_SYS_MMU_RAM_SEQ_TIMING_REG2

 /* Field HOST_SYS_TValD1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvald1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValD1)
#define hal_set_host_sys_tvald1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValD1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValD1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValD1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValD1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValD1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0

 /* Field HOST_SYS_TValD_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvald() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValD)
#define hal_set_host_sys_tvald(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1,HOST_SYS_TValD,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValD HOST_SYS_MMU_RAM_SEQ_TIMING_REG1
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValD(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValD(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValD HOST_SYS_MMU_RAM_SEQ_TIMING_REG1

 /* Field HOST_SYS_TValE1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvale1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValE1)
#define hal_set_host_sys_tvale1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValE1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValE1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValE1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValE1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValE1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0

 /* Field HOST_SYS_TValF1_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalf1() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValF1)
#define hal_set_host_sys_tvalf1(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValF1,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValF1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValF1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValF1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValF1 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0

 /* Field HOST_SYS_TValF3_LSB */
 /* Accessor macros */
#define hal_get_host_sys_tvalf3() hal_get_register_field8(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValF3)
#define hal_set_host_sys_tvalf3(x) hal_set_register_field(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0,HOST_SYS_TValF3,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_TValF3 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0
#define FIELDS_MASKS_SHIFTED_HOST_SYS_TValF3(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_TValF3(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_TValF3 HOST_SYS_MMU_RAM_SEQ_TIMING_REG0

 /* Field HOST_SYS_UART_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_uart_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_UART_CLK_FORCE_ENABLE)
#define hal_set_host_sys_uart_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_UART_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_UART_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_UART_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_UART_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_UART_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Field HOST_SYS_UART_CTSB_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_uart_ctsb_input_pio_ctrl() hal_get_register_field8(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL,HOST_SYS_UART_CTSB_INPUT_PIO_CTRL)
#define hal_set_host_sys_uart_ctsb_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL,HOST_SYS_UART_CTSB_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL HOST_SYS_UART_CTSB_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL HOST_SYS_UART_CTSB_INPUT_PIO_CTRL

 /* Field HOST_SYS_UART_DATA_INPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_uart_data_input_pio_ctrl() hal_get_register_field8(HOST_SYS_UART_DATA_INPUT_PIO_CTRL,HOST_SYS_UART_DATA_INPUT_PIO_CTRL)
#define hal_set_host_sys_uart_data_input_pio_ctrl(x) hal_set_register_field(HOST_SYS_UART_DATA_INPUT_PIO_CTRL,HOST_SYS_UART_DATA_INPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_UART_DATA_INPUT_PIO_CTRL HOST_SYS_UART_DATA_INPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_UART_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_DATA_INPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_UART_DATA_INPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_DATA_INPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_UART_DATA_INPUT_PIO_CTRL HOST_SYS_UART_DATA_INPUT_PIO_CTRL

 /* Field HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_uart_data_output_pio_ctrl() hal_get_register_field8(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL,HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_uart_data_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL,HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL_LSB */
 /* Accessor macros */
#define hal_get_host_sys_uart_rtsb_output_pio_ctrl() hal_get_register_field8(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL,HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL)
#define hal_set_host_sys_uart_rtsb_output_pio_ctrl(x) hal_set_register_field(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL,HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL
#define FIELDS_MASKS_SHIFTED_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL

 /* Field HOST_SYS_USB_CLK_FORCE_ENABLE */
 /* Accessor macros */
#define hal_get_host_sys_usb_clk_force_enable() hal_get_register_field8(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_USB_CLK_FORCE_ENABLE)
#define hal_set_host_sys_usb_clk_force_enable(x) hal_set_register_field(HOST_SYS_CONFIG_FORCE_CLK_ENABLES,HOST_SYS_USB_CLK_FORCE_ENABLE,(x))
 /* Workings */
#define TYPE_OF_HOST_SYS_USB_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define FIELDS_MASKS_SHIFTED_HOST_SYS_USB_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_USB_CLK_FORCE_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_HOST_SYS_USB_CLK_FORCE_ENABLE HOST_SYS_CONFIG_FORCE_CLK_ENABLES

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_BTM_DEBUG_SELECT_HOST_SYS_BTM_DEBUG_SELECT
#define CHECK_FIELD_TYPE_HOST_SYS_BTM_DEBUG_SELECT_END
#define CHECK_FIELD_TYPE_HOST_SYS_BUILD_OPTIONS_HOST_SYS_BUILD_OPTIONS
#define CHECK_FIELD_TYPE_HOST_SYS_BUILD_OPTIONS_END
#define CHECK_FIELD_TYPE_HOST_SYS_CLK_80M_DIV_HOST_SYS_CLK_80M_DIV
#define CHECK_FIELD_TYPE_HOST_SYS_CLK_80M_DIV_END
#define CHECK_FIELD_TYPE_HOST_SYS_CONFIG_FORCE_CLK_ENABLES_HOST_SYS_CONFIG_FORCE_CLK_ENABLES
#define CHECK_FIELD_TYPE_HOST_SYS_CONFIG_FORCE_CLK_ENABLES_END
#define CHECK_FIELD_TYPE_HOST_SYS_DEBUG_SELECT_HOST_SYS_DEBUG_SELECT
#define CHECK_FIELD_TYPE_HOST_SYS_DEBUG_SELECT_END
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0_END
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1_END
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2
#define CHECK_FIELD_TYPE_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2_END
#define CHECK_FIELD_TYPE_HOST_SYS_RAM_EMA_FIELDS_HOST_SYS_RAM_EMA_FIELDS
#define CHECK_FIELD_TYPE_HOST_SYS_RAM_EMA_FIELDS_END
#define CHECK_FIELD_TYPE_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN
#define CHECK_FIELD_TYPE_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN_END
#define CHECK_FIELD_TYPE_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_UART_DATA_INPUT_PIO_CTRL_HOST_SYS_UART_DATA_INPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_UART_DATA_INPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL
#define CHECK_FIELD_TYPE_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL_END
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA_HOST_SYS_RAM_EMA_FIELDS
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA_END
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA_HOST_SYS_RAM_EMA_FIELDS
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA_END
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA_HOST_SYS_RAM_EMA_FIELDS
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA_END
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA_HOST_SYS_RAM_EMA_FIELDS
#define CHECK_FIELD_TYPE_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_HOST_SYS_BUILD_OPTIONS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_BUILD_OPTIONS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_BUILD_OPTIONS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_CONFIG_FORCE_CLK_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_CONFIG_FORCE_CLK_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_HOST_SYS_RAM_EMA_FIELDS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_HOST_SYS_RAM_EMA_FIELDS(next, val, rest) \
   (CHECK_FIELD_TYPE(HOST_SYS_RAM_EMA_FIELDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA(next, val, rest) \
   (CHECK_FIELD_TYPE(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_clk_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_clk_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_clk_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_clk_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_data_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_data_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_data_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_data_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_sel_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_sel_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_0_sel_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_0_sel_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_clk_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_clk_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_clk_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_clk_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_data_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_data_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_data_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_data_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_sel_input_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_sel_input_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL, 1)
#define HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_bitserial_1_sel_output_pio_ctrl(x) hal_set_register(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_bitserial_1_sel_output_pio_ctrl() hal_get_register(HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_BTM_DEBUG_SELECT_REG_BITS (6u)
#define hal_set_reg_host_sys_btm_debug_select(x) hal_set_register(HOST_SYS_BTM_DEBUG_SELECT, x, 1)
#define hal_get_reg_host_sys_btm_debug_select() hal_get_register(HOST_SYS_BTM_DEBUG_SELECT, 1)
#define HOST_SYS_BUILD_OPTIONS_REG_BITS (6u)
#define hal_get_reg_host_sys_build_options() hal_get_register(HOST_SYS_BUILD_OPTIONS, 1)
#define HOST_SYS_CLK_80M_DIV_REG_BITS (8u)
#define hal_set_reg_host_sys_clk_80m_div(x) hal_set_register(HOST_SYS_CLK_80M_DIV, x, 1)
#define hal_get_reg_host_sys_clk_80m_div() hal_get_register(HOST_SYS_CLK_80M_DIV, 1)
#define HOST_SYS_CONFIG_ENABLES_REG_BITS (5u)
#define hal_set_reg_host_sys_config_enables(x) hal_set_register(HOST_SYS_CONFIG_ENABLES, x, 1)
#define hal_get_reg_host_sys_config_enables() hal_get_register(HOST_SYS_CONFIG_ENABLES, 1)
#define HOST_SYS_CONFIG_FORCE_CLK_ENABLES_REG_BITS (7u)
#define hal_set_reg_host_sys_config_force_clk_enables(x) hal_set_register(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, x, 1)
#define hal_get_reg_host_sys_config_force_clk_enables() hal_get_register(HOST_SYS_CONFIG_FORCE_CLK_ENABLES, 1)
#define HOST_SYS_CONFIG_MASK_HW_CLK_REQS_REG_BITS (5u)
#define hal_set_reg_host_sys_config_mask_hw_clk_reqs(x) hal_set_register(HOST_SYS_CONFIG_MASK_HW_CLK_REQS, x, 1)
#define hal_get_reg_host_sys_config_mask_hw_clk_reqs() hal_get_register(HOST_SYS_CONFIG_MASK_HW_CLK_REQS, 1)
#define HOST_SYS_DEBUG_SELECT_REG_BITS (8u)
#define hal_set_reg_host_sys_debug_select(x) hal_set_register(HOST_SYS_DEBUG_SELECT, x, 1)
#define hal_get_reg_host_sys_debug_select() hal_get_register(HOST_SYS_DEBUG_SELECT, 1)
#define HOST_SYS_HIFS_BUILT_REG_BITS (5u)
#define hal_get_reg_host_sys_hifs_built() hal_get_register(HOST_SYS_HIFS_BUILT, 1)
#define HOST_SYS_MMU_RAM_SEQ_TIMING_REG0_REG_BITS (16u)
#define hal_set_reg_host_sys_mmu_ram_seq_timing_reg0(x) hal_set_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, x, 1)
#define hal_get_reg_host_sys_mmu_ram_seq_timing_reg0() hal_get_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG0, 1)
#define HOST_SYS_MMU_RAM_SEQ_TIMING_REG1_REG_BITS (16u)
#define hal_set_reg_host_sys_mmu_ram_seq_timing_reg1(x) hal_set_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, x, 1)
#define hal_get_reg_host_sys_mmu_ram_seq_timing_reg1() hal_get_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG1, 1)
#define HOST_SYS_MMU_RAM_SEQ_TIMING_REG2_REG_BITS (12u)
#define hal_set_reg_host_sys_mmu_ram_seq_timing_reg2(x) hal_set_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, x, 1)
#define hal_get_reg_host_sys_mmu_ram_seq_timing_reg2() hal_get_register(HOST_SYS_MMU_RAM_SEQ_TIMING_REG2, 1)
#define HOST_SYS_POWER_ENABLES_REG_BITS (5u)
#define hal_set_reg_host_sys_power_enables(x) hal_set_register(HOST_SYS_POWER_ENABLES, x, 1)
#define hal_get_reg_host_sys_power_enables() hal_get_register(HOST_SYS_POWER_ENABLES, 1)
#define HOST_SYS_POWER_STATUS_REG_BITS (5u)
#define hal_get_reg_host_sys_power_status() hal_get_register(HOST_SYS_POWER_STATUS, 1)
#define HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN_REG_BITS (16u)
#define hal_set_reg_host_sys_reg_access_subsys_in_addr_en(x) hal_set_register(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN, x, 1)
#define hal_get_reg_host_sys_reg_access_subsys_in_addr_en() hal_get_register(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN, 1)
#define HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_sdio_sideband_interrupt_output_pio_ctrl(x) hal_set_register(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_sdio_sideband_interrupt_output_pio_ctrl() hal_get_register(HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_UART_CTSB_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_uart_ctsb_input_pio_ctrl(x) hal_set_register(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_uart_ctsb_input_pio_ctrl() hal_get_register(HOST_SYS_UART_CTSB_INPUT_PIO_CTRL, 1)
#define HOST_SYS_UART_DATA_INPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_uart_data_input_pio_ctrl(x) hal_set_register(HOST_SYS_UART_DATA_INPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_uart_data_input_pio_ctrl() hal_get_register(HOST_SYS_UART_DATA_INPUT_PIO_CTRL, 1)
#define HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_uart_data_output_pio_ctrl(x) hal_set_register(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_uart_data_output_pio_ctrl() hal_get_register(HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL, 1)
#define HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL_REG_BITS (7u)
#define hal_set_reg_host_sys_uart_rtsb_output_pio_ctrl(x) hal_set_register(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL, x, 1)
#define hal_get_reg_host_sys_uart_rtsb_output_pio_ctrl() hal_get_register(HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL, 1)
#define USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA_REG_BITS (5u)
#define hal_set_reg_usb_tx_prefetch_ram_16eps_ram0_ema(x) hal_set_register(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA, x, 1)
#define hal_get_reg_usb_tx_prefetch_ram_16eps_ram0_ema() hal_get_register(USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA, 1)
#define USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA_REG_BITS (5u)
#define hal_set_reg_usb_tx_prefetch_ram_16eps_ram1_ema(x) hal_set_register(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA, x, 1)
#define hal_get_reg_usb_tx_prefetch_ram_16eps_ram1_ema() hal_get_register(USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA, 1)
#define USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA_REG_BITS (5u)
#define hal_set_reg_usb_tx_prefetch_ram_16eps_ram2_ema(x) hal_set_register(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA, x, 1)
#define hal_get_reg_usb_tx_prefetch_ram_16eps_ram2_ema() hal_get_register(USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA, 1)
#define USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA_REG_BITS (5u)
#define hal_set_reg_usb_tx_prefetch_ram_16eps_ram3_ema(x) hal_set_register(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA, x, 1)
#define hal_get_reg_usb_tx_prefetch_ram_16eps_ram3_ema() hal_get_register(USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA, 1)

 /* Workings */
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_clk_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_CLK_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_clk_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_clk_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_CLK_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_clk_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_data_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_DATA_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_data_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_data_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_DATA_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_data_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_sel_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_SEL_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_sel_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_0_sel_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_0_SEL_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_0_sel_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_clk_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_CLK_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_clk_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_clk_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_CLK_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_clk_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_data_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_DATA_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_data_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_data_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_DATA_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_data_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_sel_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_SEL_INPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_sel_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL hal_set_reg_host_sys_bitserial_1_sel_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_BITSERIAL_1_SEL_OUTPUT_PIO_CTRL hal_get_reg_host_sys_bitserial_1_sel_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_BTM_DEBUG_SELECT hal_set_reg_host_sys_btm_debug_select
#define GETTER_FOR_HOST_SYS_BTM_DEBUG_SELECT hal_get_reg_host_sys_btm_debug_select
#define GETTER_FOR_HOST_SYS_BUILD_OPTIONS hal_get_reg_host_sys_build_options
#define SETTER_FOR_HOST_SYS_CLK_80M_DIV hal_set_reg_host_sys_clk_80m_div
#define GETTER_FOR_HOST_SYS_CLK_80M_DIV hal_get_reg_host_sys_clk_80m_div
#define SETTER_FOR_HOST_SYS_CONFIG_ENABLES hal_set_reg_host_sys_config_enables
#define GETTER_FOR_HOST_SYS_CONFIG_ENABLES hal_get_reg_host_sys_config_enables
#define SETTER_FOR_HOST_SYS_CONFIG_FORCE_CLK_ENABLES hal_set_reg_host_sys_config_force_clk_enables
#define GETTER_FOR_HOST_SYS_CONFIG_FORCE_CLK_ENABLES hal_get_reg_host_sys_config_force_clk_enables
#define SETTER_FOR_HOST_SYS_CONFIG_MASK_HW_CLK_REQS hal_set_reg_host_sys_config_mask_hw_clk_reqs
#define GETTER_FOR_HOST_SYS_CONFIG_MASK_HW_CLK_REQS hal_get_reg_host_sys_config_mask_hw_clk_reqs
#define SETTER_FOR_HOST_SYS_DEBUG_SELECT hal_set_reg_host_sys_debug_select
#define GETTER_FOR_HOST_SYS_DEBUG_SELECT hal_get_reg_host_sys_debug_select
#define GETTER_FOR_HOST_SYS_HIFS_BUILT hal_get_reg_host_sys_hifs_built
#define SETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0 hal_set_reg_host_sys_mmu_ram_seq_timing_reg0
#define GETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG0 hal_get_reg_host_sys_mmu_ram_seq_timing_reg0
#define SETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1 hal_set_reg_host_sys_mmu_ram_seq_timing_reg1
#define GETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG1 hal_get_reg_host_sys_mmu_ram_seq_timing_reg1
#define SETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2 hal_set_reg_host_sys_mmu_ram_seq_timing_reg2
#define GETTER_FOR_HOST_SYS_MMU_RAM_SEQ_TIMING_REG2 hal_get_reg_host_sys_mmu_ram_seq_timing_reg2
#define SETTER_FOR_HOST_SYS_POWER_ENABLES hal_set_reg_host_sys_power_enables
#define GETTER_FOR_HOST_SYS_POWER_ENABLES hal_get_reg_host_sys_power_enables
#define GETTER_FOR_HOST_SYS_POWER_STATUS hal_get_reg_host_sys_power_status
#define SETTER_FOR_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN hal_set_reg_host_sys_reg_access_subsys_in_addr_en
#define GETTER_FOR_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN hal_get_reg_host_sys_reg_access_subsys_in_addr_en
#define SETTER_FOR_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL hal_set_reg_host_sys_sdio_sideband_interrupt_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL hal_get_reg_host_sys_sdio_sideband_interrupt_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL hal_set_reg_host_sys_uart_ctsb_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL hal_get_reg_host_sys_uart_ctsb_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_UART_DATA_INPUT_PIO_CTRL hal_set_reg_host_sys_uart_data_input_pio_ctrl
#define GETTER_FOR_HOST_SYS_UART_DATA_INPUT_PIO_CTRL hal_get_reg_host_sys_uart_data_input_pio_ctrl
#define SETTER_FOR_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL hal_set_reg_host_sys_uart_data_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL hal_get_reg_host_sys_uart_data_output_pio_ctrl
#define SETTER_FOR_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL hal_set_reg_host_sys_uart_rtsb_output_pio_ctrl
#define GETTER_FOR_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL hal_get_reg_host_sys_uart_rtsb_output_pio_ctrl
#define SETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA hal_set_reg_usb_tx_prefetch_ram_16eps_ram0_ema
#define GETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM0_EMA hal_get_reg_usb_tx_prefetch_ram_16eps_ram0_ema
#define SETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA hal_set_reg_usb_tx_prefetch_ram_16eps_ram1_ema
#define GETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM1_EMA hal_get_reg_usb_tx_prefetch_ram_16eps_ram1_ema
#define SETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA hal_set_reg_usb_tx_prefetch_ram_16eps_ram2_ema
#define GETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM2_EMA hal_get_reg_usb_tx_prefetch_ram_16eps_ram2_ema
#define SETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA hal_set_reg_usb_tx_prefetch_ram_16eps_ram3_ema
#define GETTER_FOR_USB_TX_PREFETCH_RAM_16EPS_RAM3_EMA hal_get_reg_usb_tx_prefetch_ram_16eps_ram3_ema

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_HOST_SYS_CONFIG) */
#endif /* __HAL_MACROS_H__MODULE_HOST_SYS_CONFIG */

#if defined(IO_DEFS_MODULE_K32_CORE) 

#ifndef __HAL_MACROS_H__MODULE_K32_CORE
#define __HAL_MACROS_H__MODULE_K32_CORE

/* -- Kalimba 32-bit Core Control registers -- */

 /* Field ADDSUB_SATURATE_ON_OVERFLOW */
 /* Accessor macros */
#define hal_get_addsub_saturate_on_overflow() hal_get_register_field8(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW)
#define hal_set_addsub_saturate_on_overflow(x) hal_set_register_field(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW,(x))
 /* Workings */
#define TYPE_OF_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE

 /* Field ARITHMETIC_16BIT_MODE */
 /* Accessor macros */
#define hal_get_arithmetic_16bit_mode() hal_get_register_field8(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE)
#define hal_set_arithmetic_16bit_mode(x) hal_set_register_field(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE,(x))
 /* Workings */
#define TYPE_OF_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE

 /* Field BITREVERSE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_addr() hal_get_register_field32(BITREVERSE_ADDR,BITREVERSE_ADDR)
 /* Workings */
#define TYPE_OF_BITREVERSE_ADDR BITREVERSE_ADDR
#define FIELDS_MASKS_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_ADDR BITREVERSE_ADDR

 /* Field BITREVERSE_DATA16_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data16() hal_get_register_field32(BITREVERSE_DATA16,BITREVERSE_DATA16)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA16 BITREVERSE_DATA16
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA16 BITREVERSE_DATA16

 /* Field BITREVERSE_DATA_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data() hal_get_register_field32(BITREVERSE_DATA,BITREVERSE_DATA)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA BITREVERSE_DATA
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA BITREVERSE_DATA

 /* Field BITREVERSE_VAL_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_val() hal_get_register_field32(BITREVERSE_VAL,BITREVERSE_VAL)
#define hal_set_bitreverse_val(x) hal_set_register_field(BITREVERSE_VAL,BITREVERSE_VAL,(x))
 /* Workings */
#define TYPE_OF_BITREVERSE_VAL BITREVERSE_VAL
#define FIELDS_MASKS_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_VAL BITREVERSE_VAL

 /* Field DBG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_dbg_counters_en() hal_get_register_field8(DBG_COUNTERS_EN,DBG_COUNTERS_EN)
#define hal_set_dbg_counters_en(x) hal_set_register_field(DBG_COUNTERS_EN,DBG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_DBG_COUNTERS_EN DBG_COUNTERS_EN
#define FIELDS_MASKS_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DBG_COUNTERS_EN DBG_COUNTERS_EN

 /* Field DISABLE_FRAC_MULT_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_frac_mult_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING)
#define hal_set_disable_frac_mult_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_RMAC_STORE_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_rmac_store_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING)
#define hal_set_disable_rmac_store_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_UNBIASED_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_unbiased_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING)
#define hal_set_disable_unbiased_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE

 /* Field FRAME_POINTER_LSB */
 /* Accessor macros */
#define hal_get_frame_pointer() hal_get_register_field32(FRAME_POINTER,FRAME_POINTER)
#define hal_set_frame_pointer(x) hal_set_register_field(FRAME_POINTER,FRAME_POINTER,(x))
 /* Workings */
#define TYPE_OF_FRAME_POINTER FRAME_POINTER
#define FIELDS_MASKS_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FRAME_POINTER FRAME_POINTER

 /* Field MM_DOLOOP_END_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_end() hal_get_register_field32(MM_DOLOOP_END,MM_DOLOOP_END)
#define hal_set_mm_doloop_end(x) hal_set_register_field(MM_DOLOOP_END,MM_DOLOOP_END,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_END MM_DOLOOP_END
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_END MM_DOLOOP_END

 /* Field MM_DOLOOP_START_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_start() hal_get_register_field32(MM_DOLOOP_START,MM_DOLOOP_START)
#define hal_set_mm_doloop_start(x) hal_set_register_field(MM_DOLOOP_START,MM_DOLOOP_START,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_START MM_DOLOOP_START
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_START MM_DOLOOP_START

 /* Field MM_QUOTIENT_LSB */
 /* Accessor macros */
#define hal_get_mm_quotient() hal_get_register_field32(MM_QUOTIENT,MM_QUOTIENT)
#define hal_set_mm_quotient(x) hal_set_register_field(MM_QUOTIENT,MM_QUOTIENT,(x))
 /* Workings */
#define TYPE_OF_MM_QUOTIENT MM_QUOTIENT
#define FIELDS_MASKS_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_QUOTIENT MM_QUOTIENT

 /* Field MM_REM_LSB */
 /* Accessor macros */
#define hal_get_mm_rem() hal_get_register_field32(MM_REM,MM_REM)
#define hal_set_mm_rem(x) hal_set_register_field(MM_REM,MM_REM,(x))
 /* Workings */
#define TYPE_OF_MM_REM MM_REM
#define FIELDS_MASKS_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_REM MM_REM

 /* Field MM_RINTLINK_LSB */
 /* Accessor macros */
#define hal_get_mm_rintlink() hal_get_register_field32(MM_RINTLINK,MM_RINTLINK)
#define hal_set_mm_rintlink(x) hal_set_register_field(MM_RINTLINK,MM_RINTLINK,(x))
 /* Workings */
#define TYPE_OF_MM_RINTLINK MM_RINTLINK
#define FIELDS_MASKS_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_RINTLINK MM_RINTLINK

 /* Field NUM_CORE_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_core_stalls() hal_get_register_field32(NUM_CORE_STALLS,NUM_CORE_STALLS)
 /* Workings */
#define TYPE_OF_NUM_CORE_STALLS NUM_CORE_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_CORE_STALLS NUM_CORE_STALLS

 /* Field NUM_INSTRS_LSB */
 /* Accessor macros */
#define hal_get_num_instrs() hal_get_register_field32(NUM_INSTRS,NUM_INSTRS)
 /* Workings */
#define TYPE_OF_NUM_INSTRS NUM_INSTRS
#define FIELDS_MASKS_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTRS NUM_INSTRS

 /* Field NUM_INSTR_EXPAND_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_instr_expand_stalls() hal_get_register_field32(NUM_INSTR_EXPAND_STALLS,NUM_INSTR_EXPAND_STALLS)
 /* Workings */
#define TYPE_OF_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS

 /* Field NUM_MEM_ACCESS_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_mem_access_stalls() hal_get_register_field32(NUM_MEM_ACCESS_STALLS,NUM_MEM_ACCESS_STALLS)
 /* Workings */
#define TYPE_OF_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS

 /* Field NUM_RUN_CLKS_LSB */
 /* Accessor macros */
#define hal_get_num_run_clks() hal_get_register_field32(NUM_RUN_CLKS,NUM_RUN_CLKS)
 /* Workings */
#define TYPE_OF_NUM_RUN_CLKS NUM_RUN_CLKS
#define FIELDS_MASKS_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_RUN_CLKS NUM_RUN_CLKS

 /* Field PC_STATUS_LSB */
 /* Accessor macros */
#define hal_get_pc_status() hal_get_register_field32(PC_STATUS,PC_STATUS)
 /* Workings */
#define TYPE_OF_PC_STATUS PC_STATUS
#define FIELDS_MASKS_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PC_STATUS PC_STATUS

 /* Field STACK_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_end_addr() hal_get_register_field32(STACK_END_ADDR,STACK_END_ADDR)
#define hal_set_stack_end_addr(x) hal_set_register_field(STACK_END_ADDR,STACK_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_END_ADDR STACK_END_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_END_ADDR STACK_END_ADDR

 /* Field STACK_OVERFLOW_PC_LSB */
 /* Accessor macros */
#define hal_get_stack_overflow_pc() hal_get_register_field32(STACK_OVERFLOW_PC,STACK_OVERFLOW_PC)
 /* Workings */
#define TYPE_OF_STACK_OVERFLOW_PC STACK_OVERFLOW_PC
#define FIELDS_MASKS_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_OVERFLOW_PC STACK_OVERFLOW_PC

 /* Field STACK_POINTER_LSB */
 /* Accessor macros */
#define hal_get_stack_pointer() hal_get_register_field32(STACK_POINTER,STACK_POINTER)
#define hal_set_stack_pointer(x) hal_set_register_field(STACK_POINTER,STACK_POINTER,(x))
 /* Workings */
#define TYPE_OF_STACK_POINTER STACK_POINTER
#define FIELDS_MASKS_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_POINTER STACK_POINTER

 /* Field STACK_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_start_addr() hal_get_register_field32(STACK_START_ADDR,STACK_START_ADDR)
#define hal_set_stack_start_addr(x) hal_set_register_field(STACK_START_ADDR,STACK_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_START_ADDR STACK_START_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_START_ADDR STACK_START_ADDR

 /* Field TEST_REG_0_LSB */
 /* Accessor macros */
#define hal_get_test_reg_0() hal_get_register_field32(TEST_REG_0,TEST_REG_0)
#define hal_set_test_reg_0(x) hal_set_register_field(TEST_REG_0,TEST_REG_0,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_0 TEST_REG_0
#define FIELDS_MASKS_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_0 TEST_REG_0

 /* Field TEST_REG_1_LSB */
 /* Accessor macros */
#define hal_get_test_reg_1() hal_get_register_field32(TEST_REG_1,TEST_REG_1)
#define hal_set_test_reg_1(x) hal_set_register_field(TEST_REG_1,TEST_REG_1,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_1 TEST_REG_1
#define FIELDS_MASKS_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_1 TEST_REG_1

 /* Field TEST_REG_2_LSB */
 /* Accessor macros */
#define hal_get_test_reg_2() hal_get_register_field32(TEST_REG_2,TEST_REG_2)
#define hal_set_test_reg_2(x) hal_set_register_field(TEST_REG_2,TEST_REG_2,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_2 TEST_REG_2
#define FIELDS_MASKS_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_2 TEST_REG_2

 /* Field TEST_REG_3_LSB */
 /* Accessor macros */
#define hal_get_test_reg_3() hal_get_register_field32(TEST_REG_3,TEST_REG_3)
#define hal_set_test_reg_3(x) hal_set_register_field(TEST_REG_3,TEST_REG_3,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_3 TEST_REG_3
#define FIELDS_MASKS_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_3 TEST_REG_3

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_ARITHMETIC_MODE
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_END
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_BITREVERSE_ADDR
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_BITREVERSE_DATA
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_BITREVERSE_DATA16
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_END
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_BITREVERSE_VAL
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_END
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_DBG_COUNTERS_EN
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_END
#define CHECK_FIELD_TYPE_FRAME_POINTER_FRAME_POINTER
#define CHECK_FIELD_TYPE_FRAME_POINTER_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_MM_DOLOOP_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_MM_DOLOOP_START
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_END
#define CHECK_FIELD_TYPE_MM_QUOTIENT_MM_QUOTIENT
#define CHECK_FIELD_TYPE_MM_QUOTIENT_END
#define CHECK_FIELD_TYPE_MM_REM_MM_REM
#define CHECK_FIELD_TYPE_MM_REM_END
#define CHECK_FIELD_TYPE_MM_RINTLINK_MM_RINTLINK
#define CHECK_FIELD_TYPE_MM_RINTLINK_END
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_NUM_CORE_STALLS
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_END
#define CHECK_FIELD_TYPE_NUM_INSTRS_NUM_INSTRS
#define CHECK_FIELD_TYPE_NUM_INSTRS_END
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_NUM_INSTR_EXPAND_STALLS
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_END
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_NUM_MEM_ACCESS_STALLS
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_END
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_NUM_RUN_CLKS
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_END
#define CHECK_FIELD_TYPE_PC_STATUS_PC_STATUS
#define CHECK_FIELD_TYPE_PC_STATUS_END
#define CHECK_FIELD_TYPE_STACK_END_ADDR_STACK_END_ADDR
#define CHECK_FIELD_TYPE_STACK_END_ADDR_END
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_STACK_OVERFLOW_PC
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_END
#define CHECK_FIELD_TYPE_STACK_POINTER_STACK_POINTER
#define CHECK_FIELD_TYPE_STACK_POINTER_END
#define CHECK_FIELD_TYPE_STACK_START_ADDR_STACK_START_ADDR
#define CHECK_FIELD_TYPE_STACK_START_ADDR_END
#define CHECK_FIELD_TYPE_TEST_REG_0_TEST_REG_0
#define CHECK_FIELD_TYPE_TEST_REG_0_END
#define CHECK_FIELD_TYPE_TEST_REG_1_TEST_REG_1
#define CHECK_FIELD_TYPE_TEST_REG_1_END
#define CHECK_FIELD_TYPE_TEST_REG_2_TEST_REG_2
#define CHECK_FIELD_TYPE_TEST_REG_2_END
#define CHECK_FIELD_TYPE_TEST_REG_3_TEST_REG_3
#define CHECK_FIELD_TYPE_TEST_REG_3_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define ARITHMETIC_MODE_REG_BITS (5u)
#define hal_set_reg_arithmetic_mode(x) hal_set_register(ARITHMETIC_MODE, x, 1)
#define hal_get_reg_arithmetic_mode() hal_get_register(ARITHMETIC_MODE, 1)
#define BITREVERSE_ADDR_REG_BITS (32u)
#define hal_get_reg_bitreverse_addr() hal_get_register(BITREVERSE_ADDR, 1)
#define BITREVERSE_DATA_REG_BITS (32u)
#define hal_get_reg_bitreverse_data() hal_get_register(BITREVERSE_DATA, 1)
#define BITREVERSE_DATA16_REG_BITS (32u)
#define hal_get_reg_bitreverse_data16() hal_get_register(BITREVERSE_DATA16, 1)
#define BITREVERSE_VAL_REG_BITS (32u)
#define hal_set_reg_bitreverse_val(x) hal_set_register(BITREVERSE_VAL, x, 1)
#define hal_get_reg_bitreverse_val() hal_get_register(BITREVERSE_VAL, 1)
#define DBG_COUNTERS_EN_REG_BITS (1u)
#define hal_set_reg_dbg_counters_en(x) hal_set_register(DBG_COUNTERS_EN, x, 1)
#define hal_get_reg_dbg_counters_en() hal_get_register(DBG_COUNTERS_EN, 1)
#define FRAME_POINTER_REG_BITS (32u)
#define hal_set_reg_frame_pointer(x) hal_set_register(FRAME_POINTER, x, 1)
#define hal_get_reg_frame_pointer() hal_get_register(FRAME_POINTER, 1)
#define MM_DOLOOP_END_REG_BITS (32u)
#define hal_set_reg_mm_doloop_end(x) hal_set_register(MM_DOLOOP_END, x, 1)
#define hal_get_reg_mm_doloop_end() hal_get_register(MM_DOLOOP_END, 1)
#define MM_DOLOOP_START_REG_BITS (32u)
#define hal_set_reg_mm_doloop_start(x) hal_set_register(MM_DOLOOP_START, x, 1)
#define hal_get_reg_mm_doloop_start() hal_get_register(MM_DOLOOP_START, 1)
#define MM_QUOTIENT_REG_BITS (32u)
#define hal_set_reg_mm_quotient(x) hal_set_register(MM_QUOTIENT, x, 1)
#define hal_get_reg_mm_quotient() hal_get_register(MM_QUOTIENT, 1)
#define MM_REM_REG_BITS (32u)
#define hal_set_reg_mm_rem(x) hal_set_register(MM_REM, x, 1)
#define hal_get_reg_mm_rem() hal_get_register(MM_REM, 1)
#define MM_RINTLINK_REG_BITS (32u)
#define hal_set_reg_mm_rintlink(x) hal_set_register(MM_RINTLINK, x, 1)
#define hal_get_reg_mm_rintlink() hal_get_register(MM_RINTLINK, 1)
#define NUM_CORE_STALLS_REG_BITS (32u)
#define hal_get_reg_num_core_stalls() hal_get_register(NUM_CORE_STALLS, 1)
#define NUM_INSTRS_REG_BITS (32u)
#define hal_get_reg_num_instrs() hal_get_register(NUM_INSTRS, 1)
#define NUM_INSTR_EXPAND_STALLS_REG_BITS (32u)
#define hal_get_reg_num_instr_expand_stalls() hal_get_register(NUM_INSTR_EXPAND_STALLS, 1)
#define NUM_MEM_ACCESS_STALLS_REG_BITS (32u)
#define hal_get_reg_num_mem_access_stalls() hal_get_register(NUM_MEM_ACCESS_STALLS, 1)
#define NUM_RUN_CLKS_REG_BITS (32u)
#define hal_get_reg_num_run_clks() hal_get_register(NUM_RUN_CLKS, 1)
#define PC_STATUS_REG_BITS (32u)
#define hal_get_reg_pc_status() hal_get_register(PC_STATUS, 1)
#define STACK_END_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_end_addr(x) hal_set_register(STACK_END_ADDR, x, 1)
#define hal_get_reg_stack_end_addr() hal_get_register(STACK_END_ADDR, 1)
#define STACK_OVERFLOW_PC_REG_BITS (32u)
#define hal_get_reg_stack_overflow_pc() hal_get_register(STACK_OVERFLOW_PC, 1)
#define STACK_POINTER_REG_BITS (32u)
#define hal_set_reg_stack_pointer(x) hal_set_register(STACK_POINTER, x, 1)
#define hal_get_reg_stack_pointer() hal_get_register(STACK_POINTER, 1)
#define STACK_START_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_start_addr(x) hal_set_register(STACK_START_ADDR, x, 1)
#define hal_get_reg_stack_start_addr() hal_get_register(STACK_START_ADDR, 1)
#define TEST_REG_0_REG_BITS (32u)
#define hal_set_reg_test_reg_0(x) hal_set_register(TEST_REG_0, x, 1)
#define hal_get_reg_test_reg_0() hal_get_register(TEST_REG_0, 1)
#define TEST_REG_1_REG_BITS (32u)
#define hal_set_reg_test_reg_1(x) hal_set_register(TEST_REG_1, x, 1)
#define hal_get_reg_test_reg_1() hal_get_register(TEST_REG_1, 1)
#define TEST_REG_2_REG_BITS (32u)
#define hal_set_reg_test_reg_2(x) hal_set_register(TEST_REG_2, x, 1)
#define hal_get_reg_test_reg_2() hal_get_register(TEST_REG_2, 1)
#define TEST_REG_3_REG_BITS (32u)
#define hal_set_reg_test_reg_3(x) hal_set_register(TEST_REG_3, x, 1)
#define hal_get_reg_test_reg_3() hal_get_register(TEST_REG_3, 1)

 /* Workings */
#define SETTER_FOR_ARITHMETIC_MODE hal_set_reg_arithmetic_mode
#define GETTER_FOR_ARITHMETIC_MODE hal_get_reg_arithmetic_mode
#define GETTER_FOR_BITREVERSE_ADDR hal_get_reg_bitreverse_addr
#define GETTER_FOR_BITREVERSE_DATA hal_get_reg_bitreverse_data
#define GETTER_FOR_BITREVERSE_DATA16 hal_get_reg_bitreverse_data16
#define SETTER_FOR_BITREVERSE_VAL hal_set_reg_bitreverse_val
#define GETTER_FOR_BITREVERSE_VAL hal_get_reg_bitreverse_val
#define SETTER_FOR_DBG_COUNTERS_EN hal_set_reg_dbg_counters_en
#define GETTER_FOR_DBG_COUNTERS_EN hal_get_reg_dbg_counters_en
#define SETTER_FOR_FRAME_POINTER hal_set_reg_frame_pointer
#define GETTER_FOR_FRAME_POINTER hal_get_reg_frame_pointer
#define SETTER_FOR_MM_DOLOOP_END hal_set_reg_mm_doloop_end
#define GETTER_FOR_MM_DOLOOP_END hal_get_reg_mm_doloop_end
#define SETTER_FOR_MM_DOLOOP_START hal_set_reg_mm_doloop_start
#define GETTER_FOR_MM_DOLOOP_START hal_get_reg_mm_doloop_start
#define SETTER_FOR_MM_QUOTIENT hal_set_reg_mm_quotient
#define GETTER_FOR_MM_QUOTIENT hal_get_reg_mm_quotient
#define SETTER_FOR_MM_REM hal_set_reg_mm_rem
#define GETTER_FOR_MM_REM hal_get_reg_mm_rem
#define SETTER_FOR_MM_RINTLINK hal_set_reg_mm_rintlink
#define GETTER_FOR_MM_RINTLINK hal_get_reg_mm_rintlink
#define GETTER_FOR_NUM_CORE_STALLS hal_get_reg_num_core_stalls
#define GETTER_FOR_NUM_INSTRS hal_get_reg_num_instrs
#define GETTER_FOR_NUM_INSTR_EXPAND_STALLS hal_get_reg_num_instr_expand_stalls
#define GETTER_FOR_NUM_MEM_ACCESS_STALLS hal_get_reg_num_mem_access_stalls
#define GETTER_FOR_NUM_RUN_CLKS hal_get_reg_num_run_clks
#define GETTER_FOR_PC_STATUS hal_get_reg_pc_status
#define SETTER_FOR_STACK_END_ADDR hal_set_reg_stack_end_addr
#define GETTER_FOR_STACK_END_ADDR hal_get_reg_stack_end_addr
#define GETTER_FOR_STACK_OVERFLOW_PC hal_get_reg_stack_overflow_pc
#define SETTER_FOR_STACK_POINTER hal_set_reg_stack_pointer
#define GETTER_FOR_STACK_POINTER hal_get_reg_stack_pointer
#define SETTER_FOR_STACK_START_ADDR hal_set_reg_stack_start_addr
#define GETTER_FOR_STACK_START_ADDR hal_get_reg_stack_start_addr
#define SETTER_FOR_TEST_REG_0 hal_set_reg_test_reg_0
#define GETTER_FOR_TEST_REG_0 hal_get_reg_test_reg_0
#define SETTER_FOR_TEST_REG_1 hal_set_reg_test_reg_1
#define GETTER_FOR_TEST_REG_1 hal_get_reg_test_reg_1
#define SETTER_FOR_TEST_REG_2 hal_set_reg_test_reg_2
#define GETTER_FOR_TEST_REG_2 hal_get_reg_test_reg_2
#define SETTER_FOR_TEST_REG_3 hal_set_reg_test_reg_3
#define GETTER_FOR_TEST_REG_3 hal_get_reg_test_reg_3

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_CORE) */
#endif /* __HAL_MACROS_H__MODULE_K32_CORE */




#if defined(IO_DEFS_MODULE_APPS_SYS_SYS) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_SYS
#define __HAL_MACROS_H__MODULE_APPS_SYS_SYS

/* -- Auto-generated from subsystem manifest TMux Config. -- */

 /* Field APPS_FORCE_PWM_MODE_ANA_SMPS_REQ */
 /* Accessor macros */
#define hal_get_apps_force_pwm_mode_ana_smps_req() hal_get_register_field8(APPS_FORCE_PWM_MODE_REQ,APPS_FORCE_PWM_MODE_ANA_SMPS_REQ)
#define hal_set_apps_force_pwm_mode_ana_smps_req(x) hal_set_register_field(APPS_FORCE_PWM_MODE_REQ,APPS_FORCE_PWM_MODE_ANA_SMPS_REQ,(x))
 /* Workings */
#define TYPE_OF_APPS_FORCE_PWM_MODE_ANA_SMPS_REQ APPS_FORCE_PWM_MODE_REQ
#define FIELDS_MASKS_SHIFTED_APPS_FORCE_PWM_MODE_ANA_SMPS_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_FORCE_PWM_MODE_ANA_SMPS_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_FORCE_PWM_MODE_ANA_SMPS_REQ APPS_FORCE_PWM_MODE_REQ

 /* Field APPS_FORCE_PWM_MODE_CORE_SMPS_REQ */
 /* Accessor macros */
#define hal_get_apps_force_pwm_mode_core_smps_req() hal_get_register_field8(APPS_FORCE_PWM_MODE_REQ,APPS_FORCE_PWM_MODE_CORE_SMPS_REQ)
#define hal_set_apps_force_pwm_mode_core_smps_req(x) hal_set_register_field(APPS_FORCE_PWM_MODE_REQ,APPS_FORCE_PWM_MODE_CORE_SMPS_REQ,(x))
 /* Workings */
#define TYPE_OF_APPS_FORCE_PWM_MODE_CORE_SMPS_REQ APPS_FORCE_PWM_MODE_REQ
#define FIELDS_MASKS_SHIFTED_APPS_FORCE_PWM_MODE_CORE_SMPS_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_FORCE_PWM_MODE_CORE_SMPS_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_FORCE_PWM_MODE_CORE_SMPS_REQ APPS_FORCE_PWM_MODE_REQ

 /* Field APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC */
 /* Accessor macros */
#define hal_get_apps_remote_subsystem_accessor_access_control_window0_dmac() hal_get_register_field8(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC)
#define hal_set_apps_remote_subsystem_accessor_access_control_window0_dmac(x) hal_set_register_field(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC,(x))
 /* Workings */
#define TYPE_OF_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL
#define FIELDS_MASKS_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_DMAC APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL

 /* Field APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE */
 /* Accessor macros */
#define hal_get_apps_remote_subsystem_accessor_access_control_window0_remote() hal_get_register_field8(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE)
#define hal_set_apps_remote_subsystem_accessor_access_control_window0_remote(x) hal_set_register_field(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE,(x))
 /* Workings */
#define TYPE_OF_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL
#define FIELDS_MASKS_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW0_REMOTE APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL

 /* Field APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC */
 /* Accessor macros */
#define hal_get_apps_remote_subsystem_accessor_access_control_window1_dmac() hal_get_register_field8(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC)
#define hal_set_apps_remote_subsystem_accessor_access_control_window1_dmac(x) hal_set_register_field(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC,(x))
 /* Workings */
#define TYPE_OF_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL
#define FIELDS_MASKS_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_DMAC APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL

 /* Field APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE */
 /* Accessor macros */
#define hal_get_apps_remote_subsystem_accessor_access_control_window1_remote() hal_get_register_field8(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE)
#define hal_set_apps_remote_subsystem_accessor_access_control_window1_remote(x) hal_set_register_field(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL,APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE,(x))
 /* Workings */
#define TYPE_OF_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL
#define FIELDS_MASKS_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_WINDOW1_REMOTE APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL

 /* Field APPS_SMPS_ANA_IN_PWM_MODE */
 /* Accessor macros */
#define hal_get_apps_smps_ana_in_pwm_mode() hal_get_register_field8(APPS_SMPS_IN_PWM_MODE_STATUS,APPS_SMPS_ANA_IN_PWM_MODE)
 /* Workings */
#define TYPE_OF_APPS_SMPS_ANA_IN_PWM_MODE APPS_SMPS_IN_PWM_MODE_STATUS
#define FIELDS_MASKS_SHIFTED_APPS_SMPS_ANA_IN_PWM_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SMPS_ANA_IN_PWM_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SMPS_ANA_IN_PWM_MODE APPS_SMPS_IN_PWM_MODE_STATUS

 /* Field APPS_SMPS_CORE_IN_PWM_MODE */
 /* Accessor macros */
#define hal_get_apps_smps_core_in_pwm_mode() hal_get_register_field8(APPS_SMPS_IN_PWM_MODE_STATUS,APPS_SMPS_CORE_IN_PWM_MODE)
 /* Workings */
#define TYPE_OF_APPS_SMPS_CORE_IN_PWM_MODE APPS_SMPS_IN_PWM_MODE_STATUS
#define FIELDS_MASKS_SHIFTED_APPS_SMPS_CORE_IN_PWM_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SMPS_CORE_IN_PWM_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SMPS_CORE_IN_PWM_MODE APPS_SMPS_IN_PWM_MODE_STATUS

 /* Field APPS_SYS_CACHE_SEL */
 /* Accessor macros */
#define hal_get_apps_sys_cache_sel() hal_get_register_field8(APPS_SYS_CACHE_SEL,APPS_SYS_CACHE_SEL)
#define hal_set_apps_sys_cache_sel(x) hal_set_register_field(APPS_SYS_CACHE_SEL,APPS_SYS_CACHE_SEL,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CACHE_SEL APPS_SYS_CACHE_SEL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CACHE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CACHE_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CACHE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CACHE_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CACHE_SEL APPS_SYS_CACHE_SEL

 /* Field APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST */
 /* Accessor macros */
#define hal_get_apps_sys_dm0_access_restrict_sdio_host() hal_get_register_field8(APPS_SYS_DM0_ACCESS_RESTRICT,APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST)
#define hal_set_apps_sys_dm0_access_restrict_sdio_host(x) hal_set_register_field(APPS_SYS_DM0_ACCESS_RESTRICT,APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST APPS_SYS_DM0_ACCESS_RESTRICT
#define FIELDS_MASKS_SHIFTED_APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_DM0_ACCESS_RESTRICT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_DM0_ACCESS_RESTRICT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_DM0_ACCESS_RESTRICT_SDIO_HOST APPS_SYS_DM0_ACCESS_RESTRICT

 /* Field APPS_SYS_SQIF0_PRESENT_FLASH */
 /* Accessor macros */
#define hal_get_apps_sys_sqif0_present_flash() hal_get_register_field8(APPS_SYS_SQIF0_PRESENT,APPS_SYS_SQIF0_PRESENT_FLASH)
#define hal_set_apps_sys_sqif0_present_flash(x) hal_set_register_field(APPS_SYS_SQIF0_PRESENT,APPS_SYS_SQIF0_PRESENT_FLASH,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF0_PRESENT_FLASH APPS_SYS_SQIF0_PRESENT
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF0_PRESENT_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF0_PRESENT_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF0_PRESENT_FLASH APPS_SYS_SQIF0_PRESENT

 /* Field APPS_SYS_SQIF0_PRESENT_SRAM */
 /* Accessor macros */
#define hal_get_apps_sys_sqif0_present_sram() hal_get_register_field8(APPS_SYS_SQIF0_PRESENT,APPS_SYS_SQIF0_PRESENT_SRAM)
#define hal_set_apps_sys_sqif0_present_sram(x) hal_set_register_field(APPS_SYS_SQIF0_PRESENT,APPS_SYS_SQIF0_PRESENT_SRAM,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF0_PRESENT_SRAM APPS_SYS_SQIF0_PRESENT
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF0_PRESENT_SRAM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF0_PRESENT_SRAM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF0_PRESENT_SRAM APPS_SYS_SQIF0_PRESENT

 /* Field APPS_SYS_SQIF1_PRESENT_FLASH */
 /* Accessor macros */
#define hal_get_apps_sys_sqif1_present_flash() hal_get_register_field8(APPS_SYS_SQIF1_PRESENT,APPS_SYS_SQIF1_PRESENT_FLASH)
#define hal_set_apps_sys_sqif1_present_flash(x) hal_set_register_field(APPS_SYS_SQIF1_PRESENT,APPS_SYS_SQIF1_PRESENT_FLASH,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF1_PRESENT_FLASH APPS_SYS_SQIF1_PRESENT
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF1_PRESENT_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF1_PRESENT_FLASH(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF1_PRESENT_FLASH APPS_SYS_SQIF1_PRESENT

 /* Field APPS_SYS_SQIF1_PRESENT_SRAM */
 /* Accessor macros */
#define hal_get_apps_sys_sqif1_present_sram() hal_get_register_field8(APPS_SYS_SQIF1_PRESENT,APPS_SYS_SQIF1_PRESENT_SRAM)
#define hal_set_apps_sys_sqif1_present_sram(x) hal_set_register_field(APPS_SYS_SQIF1_PRESENT,APPS_SYS_SQIF1_PRESENT_SRAM,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF1_PRESENT_SRAM APPS_SYS_SQIF1_PRESENT
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF1_PRESENT_SRAM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF1_PRESENT_SRAM(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF1_PRESENT_SRAM APPS_SYS_SQIF1_PRESENT

 /* Field APPS_SYS_SQIF_SEL */
 /* Accessor macros */
#define hal_get_apps_sys_sqif_sel() hal_get_register_field8(APPS_SYS_SQIF_SEL,APPS_SYS_SQIF_SEL)
#define hal_set_apps_sys_sqif_sel(x) hal_set_register_field(APPS_SYS_SQIF_SEL,APPS_SYS_SQIF_SEL,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SQIF_SEL APPS_SYS_SQIF_SEL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SQIF_SEL APPS_SYS_SQIF_SEL

 /* Field APPS_SYS_SYS__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sys__p0_access_permission() ((apps_sys_sys__p0_access_permission) hal_get_register_field8(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P0_ACCESS_PERMISSION))
#define hal_set_apps_sys_sys__p0_access_permission(x) hal_set_register_field(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SYS__P0_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SYS__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SYS__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SYS__P0_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL

 /* Field APPS_SYS_SYS__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sys__p1_access_permission() ((apps_sys_sys__p1_access_permission) hal_get_register_field8(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P1_ACCESS_PERMISSION))
#define hal_set_apps_sys_sys__p1_access_permission(x) hal_set_register_field(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SYS__P1_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SYS__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SYS__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SYS__P1_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL

 /* Field APPS_SYS_SYS__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sys__p2_access_permission() ((apps_sys_sys__p2_access_permission) hal_get_register_field8(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P2_ACCESS_PERMISSION))
#define hal_set_apps_sys_sys__p2_access_permission(x) hal_set_register_field(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SYS__P2_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SYS__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SYS__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SYS__P2_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL

 /* Field APPS_SYS_SYS__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_sys__p3_access_permission() ((apps_sys_sys__p3_access_permission) hal_get_register_field8(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P3_ACCESS_PERMISSION))
#define hal_set_apps_sys_sys__p3_access_permission(x) hal_set_register_field(APPS_SYS_ACCESS_CTRL,APPS_SYS_SYS__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_SYS__P3_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SYS__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SYS__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_SYS__P3_ACCESS_PERMISSION APPS_SYS_ACCESS_CTRL

 /* Field APPS_SYS_TEST_REG_LSB */
 /* Accessor macros */
#define hal_get_apps_sys_test_reg() hal_get_register_field32(APPS_SYS_TEST_REG,APPS_SYS_TEST_REG)
#define hal_set_apps_sys_test_reg(x) hal_set_register_field(APPS_SYS_TEST_REG,APPS_SYS_TEST_REG,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_TEST_REG APPS_SYS_TEST_REG
#define FIELDS_MASKS_SHIFTED_APPS_SYS_TEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TEST_REG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_TEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TEST_REG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_TEST_REG APPS_SYS_TEST_REG

 /* Field CHIP_VERSION_MAJOR_LSB */
 /* Accessor macros */
#define hal_get_chip_version_major() hal_get_register_field8(SUB_SYS_CHIP_VERSION,CHIP_VERSION_MAJOR)
 /* Workings */
#define TYPE_OF_CHIP_VERSION_MAJOR SUB_SYS_CHIP_VERSION
#define FIELDS_MASKS_SHIFTED_CHIP_VERSION_MAJOR(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CHIP_VERSION_MAJOR(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CHIP_VERSION_MAJOR SUB_SYS_CHIP_VERSION

 /* Field CHIP_VERSION_MINOR_LSB */
 /* Accessor macros */
#define hal_get_chip_version_minor() hal_get_register_field8(SUB_SYS_CHIP_VERSION,CHIP_VERSION_MINOR)
 /* Workings */
#define TYPE_OF_CHIP_VERSION_MINOR SUB_SYS_CHIP_VERSION
#define FIELDS_MASKS_SHIFTED_CHIP_VERSION_MINOR(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CHIP_VERSION_MINOR(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CHIP_VERSION_MINOR SUB_SYS_CHIP_VERSION

 /* Field CHIP_VERSION_VARIANT_LSB */
 /* Accessor macros */
#define hal_get_chip_version_variant() hal_get_register_field8(SUB_SYS_CHIP_VERSION,CHIP_VERSION_VARIANT)
 /* Workings */
#define TYPE_OF_CHIP_VERSION_VARIANT SUB_SYS_CHIP_VERSION
#define FIELDS_MASKS_SHIFTED_CHIP_VERSION_VARIANT(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CHIP_VERSION_VARIANT(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CHIP_VERSION_VARIANT SUB_SYS_CHIP_VERSION

 /* Field EN_0 */
 /* Accessor macros */
#define hal_get_en_0() hal_get_register_field8(APPS_SYS_TBUS_WINDOW_EN,EN_0)
#define hal_set_en_0(x) hal_set_register_field(APPS_SYS_TBUS_WINDOW_EN,EN_0,(x))
 /* Workings */
#define TYPE_OF_EN_0 APPS_SYS_TBUS_WINDOW_EN
#define FIELDS_MASKS_SHIFTED_EN_0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EN_0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EN_0 APPS_SYS_TBUS_WINDOW_EN

 /* Field EN_1 */
 /* Accessor macros */
#define hal_get_en_1() hal_get_register_field8(APPS_SYS_TBUS_WINDOW_EN,EN_1)
#define hal_set_en_1(x) hal_set_register_field(APPS_SYS_TBUS_WINDOW_EN,EN_1,(x))
 /* Workings */
#define TYPE_OF_EN_1 APPS_SYS_TBUS_WINDOW_EN
#define FIELDS_MASKS_SHIFTED_EN_1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EN_1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EN_1 APPS_SYS_TBUS_WINDOW_EN

 /* Field INTERCONNECT_DEBUG_ENABLE */
 /* Accessor macros */
#define hal_get_interconnect_debug_enable() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,INTERCONNECT_DEBUG_ENABLE)
#define hal_set_interconnect_debug_enable(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,INTERCONNECT_DEBUG_ENABLE,(x))
 /* Workings */
#define TYPE_OF_INTERCONNECT_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_INTERCONNECT_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTERCONNECT_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTERCONNECT_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field INTERCONNECT_DEBUG_MUX_SEL_LSB */
 /* Accessor macros */
#define hal_get_interconnect_debug_mux_sel() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,INTERCONNECT_DEBUG_MUX_SEL)
#define hal_set_interconnect_debug_mux_sel(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,INTERCONNECT_DEBUG_MUX_SEL,(x))
 /* Workings */
#define TYPE_OF_INTERCONNECT_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_INTERCONNECT_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTERCONNECT_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTERCONNECT_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field MASTER_0_LSB */
 /* Accessor macros */
#define hal_get_master_0() hal_get_register_field8(APPS_SYS_TBUS_WINDOW_IDS,MASTER_0)
#define hal_set_master_0(x) hal_set_register_field(APPS_SYS_TBUS_WINDOW_IDS,MASTER_0,(x))
 /* Workings */
#define TYPE_OF_MASTER_0 APPS_SYS_TBUS_WINDOW_IDS
#define FIELDS_MASKS_SHIFTED_MASTER_0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MASTER_0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MASTER_0 APPS_SYS_TBUS_WINDOW_IDS

 /* Field MASTER_1_LSB */
 /* Accessor macros */
#define hal_get_master_1() hal_get_register_field8(APPS_SYS_TBUS_WINDOW_IDS,MASTER_1)
#define hal_set_master_1(x) hal_set_register_field(APPS_SYS_TBUS_WINDOW_IDS,MASTER_1,(x))
 /* Workings */
#define TYPE_OF_MASTER_1 APPS_SYS_TBUS_WINDOW_IDS
#define FIELDS_MASKS_SHIFTED_MASTER_1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MASTER_1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MASTER_1 APPS_SYS_TBUS_WINDOW_IDS

 /* Field RAM_MASTER_MUX_DEBUG_ENABLE */
 /* Accessor macros */
#define hal_get_ram_master_mux_debug_enable() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,RAM_MASTER_MUX_DEBUG_ENABLE)
#define hal_set_ram_master_mux_debug_enable(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,RAM_MASTER_MUX_DEBUG_ENABLE,(x))
 /* Workings */
#define TYPE_OF_RAM_MASTER_MUX_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_RAM_MASTER_MUX_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_MASTER_MUX_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_MASTER_MUX_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field RAM_SEQUENCER_ACTIVE_STATUS_LSB */
 /* Accessor macros */
#define hal_get_ram_sequencer_active_status() hal_get_register_field16(RAM_SEQUENCER_ACTIVE_STATUS,RAM_SEQUENCER_ACTIVE_STATUS)
 /* Workings */
#define TYPE_OF_RAM_SEQUENCER_ACTIVE_STATUS RAM_SEQUENCER_ACTIVE_STATUS
#define FIELDS_MASKS_SHIFTED_RAM_SEQUENCER_ACTIVE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(RAM_SEQUENCER_ACTIVE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_RAM_SEQUENCER_ACTIVE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(RAM_SEQUENCER_ACTIVE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_RAM_SEQUENCER_ACTIVE_STATUS RAM_SEQUENCER_ACTIVE_STATUS

 /* Field REMOTE_MASTER_DEBUG_MUX_SEL_LSB */
 /* Accessor macros */
#define hal_get_remote_master_debug_mux_sel() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,REMOTE_MASTER_DEBUG_MUX_SEL)
#define hal_set_remote_master_debug_mux_sel(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,REMOTE_MASTER_DEBUG_MUX_SEL,(x))
 /* Workings */
#define TYPE_OF_REMOTE_MASTER_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_REMOTE_MASTER_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REMOTE_MASTER_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REMOTE_MASTER_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field SHARED_RAM_DEBUG_ENABLE */
 /* Accessor macros */
#define hal_get_shared_ram_debug_enable() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,SHARED_RAM_DEBUG_ENABLE)
#define hal_set_shared_ram_debug_enable(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,SHARED_RAM_DEBUG_ENABLE,(x))
 /* Workings */
#define TYPE_OF_SHARED_RAM_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_SHARED_RAM_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SHARED_RAM_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SHARED_RAM_DEBUG_ENABLE APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field SHARED_RAM_DEBUG_MUX_SEL_LSB */
 /* Accessor macros */
#define hal_get_shared_ram_debug_mux_sel() hal_get_register_field8(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,SHARED_RAM_DEBUG_MUX_SEL)
#define hal_set_shared_ram_debug_mux_sel(x) hal_set_register_field(APPS_SYS_INTERCONNECT_DEBUG_CONTROL,SHARED_RAM_DEBUG_MUX_SEL,(x))
 /* Workings */
#define TYPE_OF_SHARED_RAM_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define FIELDS_MASKS_SHIFTED_SHARED_RAM_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SHARED_RAM_DEBUG_MUX_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SHARED_RAM_DEBUG_MUX_SEL APPS_SYS_INTERCONNECT_DEBUG_CONTROL

 /* Field SUB_SYS_DEBUG_SELECT_SHIFT_HIGH */
 /* Accessor macros */
#define hal_get_sub_sys_debug_select_shift_high() hal_get_register_field8(SUB_SYS_DEBUG_SELECT_SHIFT,SUB_SYS_DEBUG_SELECT_SHIFT_HIGH)
#define hal_set_sub_sys_debug_select_shift_high(x) hal_set_register_field(SUB_SYS_DEBUG_SELECT_SHIFT,SUB_SYS_DEBUG_SELECT_SHIFT_HIGH,(x))
 /* Workings */
#define TYPE_OF_SUB_SYS_DEBUG_SELECT_SHIFT_HIGH SUB_SYS_DEBUG_SELECT_SHIFT
#define FIELDS_MASKS_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT_HIGH(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT_HIGH(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_DEBUG_SELECT_SHIFT_HIGH SUB_SYS_DEBUG_SELECT_SHIFT

 /* Field SUB_SYS_DEBUG_SELECT_SHIFT_LOW */
 /* Accessor macros */
#define hal_get_sub_sys_debug_select_shift_low() hal_get_register_field8(SUB_SYS_DEBUG_SELECT_SHIFT,SUB_SYS_DEBUG_SELECT_SHIFT_LOW)
#define hal_set_sub_sys_debug_select_shift_low(x) hal_set_register_field(SUB_SYS_DEBUG_SELECT_SHIFT,SUB_SYS_DEBUG_SELECT_SHIFT_LOW,(x))
 /* Workings */
#define TYPE_OF_SUB_SYS_DEBUG_SELECT_SHIFT_LOW SUB_SYS_DEBUG_SELECT_SHIFT
#define FIELDS_MASKS_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT_LOW(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT_LOW(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_DEBUG_SELECT_SHIFT_LOW SUB_SYS_DEBUG_SELECT_SHIFT

 /* Field SUB_SYS_DEBUG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_sub_sys_debug_status() hal_get_register_field32(SUB_SYS_DEBUG_STATUS,SUB_SYS_DEBUG_STATUS)
 /* Workings */
#define TYPE_OF_SUB_SYS_DEBUG_STATUS SUB_SYS_DEBUG_STATUS
#define FIELDS_MASKS_SHIFTED_SUB_SYS_DEBUG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_DEBUG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_DEBUG_STATUS SUB_SYS_DEBUG_STATUS

 /* Field SUB_SYS_ID_LSB */
 /* Accessor macros */
#define hal_get_sub_sys_id() hal_get_register_field8(SUB_SYS_ID,SUB_SYS_ID)
 /* Workings */
#define TYPE_OF_SUB_SYS_ID SUB_SYS_ID
#define FIELDS_MASKS_SHIFTED_SUB_SYS_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_ID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_ID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_ID SUB_SYS_ID

 /* Field SUB_SYS_REG_SRC_HASH_LSB */
 /* Accessor macros */
#define hal_get_sub_sys_reg_src_hash() hal_get_register_field16(SUB_SYS_REG_SRC_HASH,SUB_SYS_REG_SRC_HASH)
 /* Workings */
#define TYPE_OF_SUB_SYS_REG_SRC_HASH SUB_SYS_REG_SRC_HASH
#define FIELDS_MASKS_SHIFTED_SUB_SYS_REG_SRC_HASH(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_REG_SRC_HASH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_REG_SRC_HASH(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_REG_SRC_HASH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_REG_SRC_HASH SUB_SYS_REG_SRC_HASH

 /* Field SUB_SYS_RST_STATUS_LSB */
 /* Accessor macros */
#define hal_get_sub_sys_rst_status() hal_get_register_field8(SUB_SYS_RST_STATUS,SUB_SYS_RST_STATUS)
#define hal_set_sub_sys_rst_status(x) hal_set_register_field(SUB_SYS_RST_STATUS,SUB_SYS_RST_STATUS,(x))
 /* Workings */
#define TYPE_OF_SUB_SYS_RST_STATUS SUB_SYS_RST_STATUS
#define FIELDS_MASKS_SHIFTED_SUB_SYS_RST_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_RST_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_RST_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_RST_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_RST_STATUS SUB_SYS_RST_STATUS

 /* Field SUB_SYS_TRANSACTION_MUX_DBG_SEL_LSB */
 /* Accessor macros */
#define hal_get_sub_sys_transaction_mux_dbg_sel() hal_get_register_field8(SUB_SYS_TRANSACTION_MUX_DBG_SEL,SUB_SYS_TRANSACTION_MUX_DBG_SEL)
#define hal_set_sub_sys_transaction_mux_dbg_sel(x) hal_set_register_field(SUB_SYS_TRANSACTION_MUX_DBG_SEL,SUB_SYS_TRANSACTION_MUX_DBG_SEL,(x))
 /* Workings */
#define TYPE_OF_SUB_SYS_TRANSACTION_MUX_DBG_SEL SUB_SYS_TRANSACTION_MUX_DBG_SEL
#define FIELDS_MASKS_SHIFTED_SUB_SYS_TRANSACTION_MUX_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_TRANSACTION_MUX_DBG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_TRANSACTION_MUX_DBG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_TRANSACTION_MUX_DBG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SUB_SYS_TRANSACTION_MUX_DBG_SEL SUB_SYS_TRANSACTION_MUX_DBG_SEL

 /* Field TCM0 */
 /* Accessor macros */
#define hal_get_tcm0() hal_get_register_field8(APPS_SYS_TCM_LOCK,TCM0)
#define hal_set_tcm0(x) hal_set_register_field(APPS_SYS_TCM_LOCK,TCM0,(x))
 /* Workings */
#define TYPE_OF_TCM0 APPS_SYS_TCM_LOCK
#define FIELDS_MASKS_SHIFTED_TCM0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM0(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM0 APPS_SYS_TCM_LOCK

 /* Field TCM1 */
 /* Accessor macros */
#define hal_get_tcm1() hal_get_register_field8(APPS_SYS_TCM_LOCK,TCM1)
#define hal_set_tcm1(x) hal_set_register_field(APPS_SYS_TCM_LOCK,TCM1,(x))
 /* Workings */
#define TYPE_OF_TCM1 APPS_SYS_TCM_LOCK
#define FIELDS_MASKS_SHIFTED_TCM1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM1(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM1 APPS_SYS_TCM_LOCK

 /* Field TCM_REMAP_HIGH_ENABLE */
 /* Accessor macros */
#define hal_get_tcm_remap_high_enable_cpu0_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_ENABLE)
#define hal_set_tcm_remap_high_enable_cpu0_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_ENABLE,(x))
#define hal_get_tcm_remap_high_enable_cpu1_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_ENABLE)
#define hal_set_tcm_remap_high_enable_cpu1_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TCM_REMAP_HIGH_ENABLE TCM_REMAP_CONTROLS
#define FIELDS_MASKS_SHIFTED_TCM_REMAP_HIGH_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM_REMAP_HIGH_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM_REMAP_HIGH_ENABLE TCM_REMAP_CONTROLS

 /* Field TCM_REMAP_HIGH_SELECT */
 /* Accessor macros */
#define hal_get_tcm_remap_high_select_cpu0_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_SELECT)
#define hal_set_tcm_remap_high_select_cpu0_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_SELECT,(x))
#define hal_get_tcm_remap_high_select_cpu1_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_SELECT)
#define hal_set_tcm_remap_high_select_cpu1_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_HIGH_SELECT,(x))
 /* Workings */
#define TYPE_OF_TCM_REMAP_HIGH_SELECT TCM_REMAP_CONTROLS
#define FIELDS_MASKS_SHIFTED_TCM_REMAP_HIGH_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM_REMAP_HIGH_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM_REMAP_HIGH_SELECT TCM_REMAP_CONTROLS

 /* Field TCM_REMAP_LOW_ENABLE */
 /* Accessor macros */
#define hal_get_tcm_remap_low_enable_cpu0_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_ENABLE)
#define hal_set_tcm_remap_low_enable_cpu0_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_ENABLE,(x))
#define hal_get_tcm_remap_low_enable_cpu1_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_ENABLE)
#define hal_set_tcm_remap_low_enable_cpu1_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TCM_REMAP_LOW_ENABLE TCM_REMAP_CONTROLS
#define FIELDS_MASKS_SHIFTED_TCM_REMAP_LOW_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM_REMAP_LOW_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM_REMAP_LOW_ENABLE TCM_REMAP_CONTROLS

 /* Field TCM_REMAP_LOW_SELECT */
 /* Accessor macros */
#define hal_get_tcm_remap_low_select_cpu0_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_SELECT)
#define hal_set_tcm_remap_low_select_cpu0_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU0_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_SELECT,(x))
#define hal_get_tcm_remap_low_select_cpu1_tcm_remap_controls() hal_get_register_field8(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_SELECT)
#define hal_set_tcm_remap_low_select_cpu1_tcm_remap_controls(x) hal_set_register_field(APPS_SYS_CPU1_TCM_REMAP_CONTROLS,TCM_REMAP_LOW_SELECT,(x))
 /* Workings */
#define TYPE_OF_TCM_REMAP_LOW_SELECT TCM_REMAP_CONTROLS
#define FIELDS_MASKS_SHIFTED_TCM_REMAP_LOW_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM_REMAP_LOW_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TCM_REMAP_LOW_SELECT TCM_REMAP_CONTROLS

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_APPS_FORCE_PWM_MODE_REQ_APPS_FORCE_PWM_MODE_REQ
#define CHECK_FIELD_TYPE_APPS_FORCE_PWM_MODE_REQ_END
#define CHECK_FIELD_TYPE_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL
#define CHECK_FIELD_TYPE_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_END
#define CHECK_FIELD_TYPE_APPS_SMPS_IN_PWM_MODE_STATUS_APPS_SMPS_IN_PWM_MODE_STATUS
#define CHECK_FIELD_TYPE_APPS_SMPS_IN_PWM_MODE_STATUS_END
#define CHECK_FIELD_TYPE_APPS_SYS_ACCESS_CTRL_APPS_SYS_ACCESS_CTRL
#define CHECK_FIELD_TYPE_APPS_SYS_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_APPS_SYS_CACHE_SEL_APPS_SYS_CACHE_SEL
#define CHECK_FIELD_TYPE_APPS_SYS_CACHE_SEL_END
#define CHECK_FIELD_TYPE_APPS_SYS_CPU0_TCM_REMAP_CONTROLS_TCM_REMAP_CONTROLS
#define CHECK_FIELD_TYPE_APPS_SYS_CPU0_TCM_REMAP_CONTROLS_END
#define CHECK_FIELD_TYPE_APPS_SYS_CPU1_TCM_REMAP_CONTROLS_TCM_REMAP_CONTROLS
#define CHECK_FIELD_TYPE_APPS_SYS_CPU1_TCM_REMAP_CONTROLS_END
#define CHECK_FIELD_TYPE_APPS_SYS_DM0_ACCESS_RESTRICT_APPS_SYS_DM0_ACCESS_RESTRICT
#define CHECK_FIELD_TYPE_APPS_SYS_DM0_ACCESS_RESTRICT_END
#define CHECK_FIELD_TYPE_APPS_SYS_INTERCONNECT_DEBUG_CONTROL_APPS_SYS_INTERCONNECT_DEBUG_CONTROL
#define CHECK_FIELD_TYPE_APPS_SYS_INTERCONNECT_DEBUG_CONTROL_END
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF0_PRESENT_APPS_SYS_SQIF0_PRESENT
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF0_PRESENT_END
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF1_PRESENT_APPS_SYS_SQIF1_PRESENT
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF1_PRESENT_END
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_SEL_APPS_SYS_SQIF_SEL
#define CHECK_FIELD_TYPE_APPS_SYS_SQIF_SEL_END
#define CHECK_FIELD_TYPE_APPS_SYS_TBUS_WINDOW_EN_APPS_SYS_TBUS_WINDOW_EN
#define CHECK_FIELD_TYPE_APPS_SYS_TBUS_WINDOW_EN_END
#define CHECK_FIELD_TYPE_APPS_SYS_TBUS_WINDOW_IDS_APPS_SYS_TBUS_WINDOW_IDS
#define CHECK_FIELD_TYPE_APPS_SYS_TBUS_WINDOW_IDS_END
#define CHECK_FIELD_TYPE_APPS_SYS_TCM_LOCK_APPS_SYS_TCM_LOCK
#define CHECK_FIELD_TYPE_APPS_SYS_TCM_LOCK_END
#define CHECK_FIELD_TYPE_APPS_SYS_TEST_REG_APPS_SYS_TEST_REG
#define CHECK_FIELD_TYPE_APPS_SYS_TEST_REG_END
#define CHECK_FIELD_TYPE_RAM_SEQUENCER_ACTIVE_STATUS_RAM_SEQUENCER_ACTIVE_STATUS
#define CHECK_FIELD_TYPE_RAM_SEQUENCER_ACTIVE_STATUS_END
#define CHECK_FIELD_TYPE_SUB_SYS_CHIP_VERSION_SUB_SYS_CHIP_VERSION
#define CHECK_FIELD_TYPE_SUB_SYS_CHIP_VERSION_END
#define CHECK_FIELD_TYPE_SUB_SYS_DEBUG_SELECT_SHIFT_SUB_SYS_DEBUG_SELECT_SHIFT
#define CHECK_FIELD_TYPE_SUB_SYS_DEBUG_SELECT_SHIFT_END
#define CHECK_FIELD_TYPE_SUB_SYS_DEBUG_STATUS_SUB_SYS_DEBUG_STATUS
#define CHECK_FIELD_TYPE_SUB_SYS_DEBUG_STATUS_END
#define CHECK_FIELD_TYPE_SUB_SYS_ID_SUB_SYS_ID
#define CHECK_FIELD_TYPE_SUB_SYS_ID_END
#define CHECK_FIELD_TYPE_SUB_SYS_REG_SRC_HASH_SUB_SYS_REG_SRC_HASH
#define CHECK_FIELD_TYPE_SUB_SYS_REG_SRC_HASH_END
#define CHECK_FIELD_TYPE_SUB_SYS_RST_STATUS_SUB_SYS_RST_STATUS
#define CHECK_FIELD_TYPE_SUB_SYS_RST_STATUS_END
#define CHECK_FIELD_TYPE_SUB_SYS_TRANSACTION_MUX_DBG_SEL_SUB_SYS_TRANSACTION_MUX_DBG_SEL
#define CHECK_FIELD_TYPE_SUB_SYS_TRANSACTION_MUX_DBG_SEL_END
#define CHECK_FIELD_TYPE_TCM_REMAP_CONTROLS_TCM_REMAP_CONTROLS
#define CHECK_FIELD_TYPE_TCM_REMAP_CONTROLS_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_APPS_FORCE_PWM_MODE_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_FORCE_PWM_MODE_REQ(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_FORCE_PWM_MODE_REQ, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SMPS_IN_PWM_MODE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SMPS_IN_PWM_MODE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SMPS_IN_PWM_MODE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU0_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU0_TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU0_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU0_TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU1_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU1_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_CPU1_TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_DM0_ACCESS_RESTRICT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_DM0_ACCESS_RESTRICT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_DM0_ACCESS_RESTRICT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_DM0_ACCESS_RESTRICT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_INTERCONNECT_DEBUG_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_INTERCONNECT_DEBUG_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF0_PRESENT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF0_PRESENT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF0_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_SQIF1_PRESENT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_SQIF1_PRESENT(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_SQIF1_PRESENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_TBUS_WINDOW_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_TBUS_WINDOW_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_TBUS_WINDOW_IDS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_TBUS_WINDOW_IDS(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TBUS_WINDOW_IDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_APPS_SYS_TCM_LOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_TCM_LOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(APPS_SYS_TCM_LOCK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SUB_SYS_CHIP_VERSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_CHIP_VERSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_CHIP_VERSION, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SUB_SYS_DEBUG_SELECT_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(SUB_SYS_DEBUG_SELECT_SHIFT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TCM_REMAP_CONTROLS(next, val, rest) \
   (CHECK_FIELD_TYPE(TCM_REMAP_CONTROLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define APPS_FORCE_PWM_MODE_REQ_REG_BITS (2u)
#define hal_set_reg_apps_force_pwm_mode_req(x) hal_set_register(APPS_FORCE_PWM_MODE_REQ, x, 1)
#define hal_get_reg_apps_force_pwm_mode_req() hal_get_register(APPS_FORCE_PWM_MODE_REQ, 1)
#define APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL_REG_BITS (4u)
#define hal_set_reg_apps_remote_subsystem_accessor_access_control(x) hal_set_register(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, x, 1)
#define hal_get_reg_apps_remote_subsystem_accessor_access_control() hal_get_register(APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL, 1)
#define APPS_SMPS_IN_PWM_MODE_STATUS_REG_BITS (2u)
#define hal_get_reg_apps_smps_in_pwm_mode_status() hal_get_register(APPS_SMPS_IN_PWM_MODE_STATUS, 1)
#define APPS_SYS_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_apps_sys_access_ctrl(x) hal_set_register(APPS_SYS_ACCESS_CTRL, x, 1)
#define hal_get_reg_apps_sys_access_ctrl() hal_get_register(APPS_SYS_ACCESS_CTRL, 1)
#define APPS_SYS_CACHE_SEL_REG_BITS (1u)
#define hal_set_reg_apps_sys_cache_sel(x) hal_set_register(APPS_SYS_CACHE_SEL, x, 1)
#define hal_get_reg_apps_sys_cache_sel() hal_get_register(APPS_SYS_CACHE_SEL, 1)
#define APPS_SYS_CPU0_TCM_REMAP_CONTROLS_REG_BITS (4u)
#define hal_set_reg_apps_sys_cpu0_tcm_remap_controls(x) hal_set_register(APPS_SYS_CPU0_TCM_REMAP_CONTROLS, x, 1)
#define hal_get_reg_apps_sys_cpu0_tcm_remap_controls() hal_get_register(APPS_SYS_CPU0_TCM_REMAP_CONTROLS, 1)
#define APPS_SYS_CPU1_TCM_REMAP_CONTROLS_REG_BITS (4u)
#define hal_set_reg_apps_sys_cpu1_tcm_remap_controls(x) hal_set_register(APPS_SYS_CPU1_TCM_REMAP_CONTROLS, x, 1)
#define hal_get_reg_apps_sys_cpu1_tcm_remap_controls() hal_get_register(APPS_SYS_CPU1_TCM_REMAP_CONTROLS, 1)
#define APPS_SYS_DM0_ACCESS_RESTRICT_REG_BITS (2u)
#define hal_set_reg_apps_sys_dm0_access_restrict(x) hal_set_register(APPS_SYS_DM0_ACCESS_RESTRICT, x, 1)
#define hal_get_reg_apps_sys_dm0_access_restrict() hal_get_register(APPS_SYS_DM0_ACCESS_RESTRICT, 1)
#define APPS_SYS_INTERCONNECT_DEBUG_CONTROL_REG_BITS (15u)
#define hal_set_reg_apps_sys_interconnect_debug_control(x) hal_set_register(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, x, 1)
#define hal_get_reg_apps_sys_interconnect_debug_control() hal_get_register(APPS_SYS_INTERCONNECT_DEBUG_CONTROL, 1)
#define APPS_SYS_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_apps_sys_mutex_lock(x) hal_set_register(APPS_SYS_MUTEX_LOCK, x, 1)
#define hal_get_reg_apps_sys_mutex_lock() hal_get_register(APPS_SYS_MUTEX_LOCK, 1)
#define APPS_SYS_PIO_MUX_REG_BITS (72u)
#define hal_set_reg_apps_sys_pio_mux(i, x) hal_set_register_indexed(APPS_SYS_PIO_MUX, i, x)
#define hal_set_reg_apps_sys_pio_mux_word0(x) hal_set_register(APPS_SYS_PIO_MUX_WORD0, (x), 1)
#define hal_set_reg_apps_sys_pio_mux_word1(x) hal_set_register(APPS_SYS_PIO_MUX_WORD1, (x), 1)
#define hal_set_reg_apps_sys_pio_mux_word2(x) hal_set_register(APPS_SYS_PIO_MUX_WORD2, (x), 1)
#define hal_get_reg_apps_sys_pio_mux(i) hal_get_register_indexed(APPS_SYS_PIO_MUX, i)
#define hal_get_reg_apps_sys_pio_mux_word0() hal_get_register(APPS_SYS_PIO_MUX_WORD0, 1)
#define hal_get_reg_apps_sys_pio_mux_word1() hal_get_register(APPS_SYS_PIO_MUX_WORD1, 1)
#define hal_get_reg_apps_sys_pio_mux_word2() hal_get_register(APPS_SYS_PIO_MUX_WORD2, 1)
#define APPS_SYS_SQIF0_PRESENT_REG_BITS (2u)
#define hal_set_reg_apps_sys_sqif0_present(x) hal_set_register(APPS_SYS_SQIF0_PRESENT, x, 1)
#define hal_get_reg_apps_sys_sqif0_present() hal_get_register(APPS_SYS_SQIF0_PRESENT, 1)
#define APPS_SYS_SQIF1_PRESENT_REG_BITS (2u)
#define hal_set_reg_apps_sys_sqif1_present(x) hal_set_register(APPS_SYS_SQIF1_PRESENT, x, 1)
#define hal_get_reg_apps_sys_sqif1_present() hal_get_register(APPS_SYS_SQIF1_PRESENT, 1)
#define APPS_SYS_SQIF_SEL_REG_BITS (1u)
#define hal_set_reg_apps_sys_sqif_sel(x) hal_set_register(APPS_SYS_SQIF_SEL, x, 1)
#define hal_get_reg_apps_sys_sqif_sel() hal_get_register(APPS_SYS_SQIF_SEL, 1)
#define APPS_SYS_SQIF_WINDOW_CONTROL_REG_BITS (5u)
#define hal_set_reg_apps_sys_sqif_window_control(x) hal_set_register(APPS_SYS_SQIF_WINDOW_CONTROL, x, 1)
#define hal_get_reg_apps_sys_sqif_window_control() hal_get_register(APPS_SYS_SQIF_WINDOW_CONTROL, 1)
#define APPS_SYS_TBUS_WINDOW_EN_REG_BITS (2u)
#define hal_set_reg_apps_sys_tbus_window_en(x) hal_set_register(APPS_SYS_TBUS_WINDOW_EN, x, 1)
#define hal_get_reg_apps_sys_tbus_window_en() hal_get_register(APPS_SYS_TBUS_WINDOW_EN, 1)
#define APPS_SYS_TBUS_WINDOW_IDS_REG_BITS (8u)
#define hal_set_reg_apps_sys_tbus_window_ids(x) hal_set_register(APPS_SYS_TBUS_WINDOW_IDS, x, 1)
#define hal_get_reg_apps_sys_tbus_window_ids() hal_get_register(APPS_SYS_TBUS_WINDOW_IDS, 1)
#define APPS_SYS_TCM_LOCK_REG_BITS (2u)
#define hal_set_reg_apps_sys_tcm_lock(x) hal_set_register(APPS_SYS_TCM_LOCK, x, 1)
#define hal_get_reg_apps_sys_tcm_lock() hal_get_register(APPS_SYS_TCM_LOCK, 1)
#define APPS_SYS_TEST_REG_REG_BITS (32u)
#define hal_set_reg_apps_sys_test_reg(x) hal_set_register(APPS_SYS_TEST_REG, x, 1)
#define hal_get_reg_apps_sys_test_reg() hal_get_register(APPS_SYS_TEST_REG, 1)
#define RAM_SEQUENCER_ACTIVE_STATUS_REG_BITS (11u)
#define hal_get_reg_ram_sequencer_active_status() hal_get_register(RAM_SEQUENCER_ACTIVE_STATUS, 1)
#define SUB_SYS_CHIP_VERSION_REG_BITS (16u)
#define hal_get_reg_sub_sys_chip_version() hal_get_register(SUB_SYS_CHIP_VERSION, 1)
#define SUB_SYS_DEBUG_SELECT_HIGH_REG_BITS (7u)
#define hal_set_reg_sub_sys_debug_select_high(x) hal_set_register(SUB_SYS_DEBUG_SELECT_HIGH, x, 1)
#define hal_get_reg_sub_sys_debug_select_high() hal_get_register(SUB_SYS_DEBUG_SELECT_HIGH, 1)
#define SUB_SYS_DEBUG_SELECT_LOW_REG_BITS (7u)
#define hal_set_reg_sub_sys_debug_select_low(x) hal_set_register(SUB_SYS_DEBUG_SELECT_LOW, x, 1)
#define hal_get_reg_sub_sys_debug_select_low() hal_get_register(SUB_SYS_DEBUG_SELECT_LOW, 1)
#define SUB_SYS_DEBUG_SELECT_SHIFT_REG_BITS (2u)
#define hal_set_reg_sub_sys_debug_select_shift(x) hal_set_register(SUB_SYS_DEBUG_SELECT_SHIFT, x, 1)
#define hal_get_reg_sub_sys_debug_select_shift() hal_get_register(SUB_SYS_DEBUG_SELECT_SHIFT, 1)
#define SUB_SYS_DEBUG_STATUS_REG_BITS (32u)
#define hal_get_reg_sub_sys_debug_status() hal_get_register(SUB_SYS_DEBUG_STATUS, 1)
#define SUB_SYS_ID_REG_BITS (4u)
#define hal_get_reg_sub_sys_id() hal_get_register(SUB_SYS_ID, 1)
#define SUB_SYS_REG_SRC_HASH_REG_BITS (16u)
#define hal_get_reg_sub_sys_reg_src_hash() hal_get_register(SUB_SYS_REG_SRC_HASH, 1)
#define SUB_SYS_RST_STATUS_REG_BITS (3u)
#define hal_set_reg_sub_sys_rst_status(x) hal_set_register(SUB_SYS_RST_STATUS, x, 1)
#define hal_get_reg_sub_sys_rst_status() hal_get_register(SUB_SYS_RST_STATUS, 1)
#define SUB_SYS_TRANSACTION_MUX_DBG_SEL_REG_BITS (6u)
#define hal_set_reg_sub_sys_transaction_mux_dbg_sel(x) hal_set_register(SUB_SYS_TRANSACTION_MUX_DBG_SEL, x, 1)
#define hal_get_reg_sub_sys_transaction_mux_dbg_sel() hal_get_register(SUB_SYS_TRANSACTION_MUX_DBG_SEL, 1)

 /* Workings */
#define SETTER_FOR_APPS_FORCE_PWM_MODE_REQ hal_set_reg_apps_force_pwm_mode_req
#define GETTER_FOR_APPS_FORCE_PWM_MODE_REQ hal_get_reg_apps_force_pwm_mode_req
#define SETTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL hal_set_reg_apps_remote_subsystem_accessor_access_control
#define GETTER_FOR_APPS_REMOTE_SUBSYSTEM_ACCESSOR_ACCESS_CONTROL hal_get_reg_apps_remote_subsystem_accessor_access_control
#define GETTER_FOR_APPS_SMPS_IN_PWM_MODE_STATUS hal_get_reg_apps_smps_in_pwm_mode_status
#define SETTER_FOR_APPS_SYS_ACCESS_CTRL hal_set_reg_apps_sys_access_ctrl
#define GETTER_FOR_APPS_SYS_ACCESS_CTRL hal_get_reg_apps_sys_access_ctrl
#define SETTER_FOR_APPS_SYS_CACHE_SEL hal_set_reg_apps_sys_cache_sel
#define GETTER_FOR_APPS_SYS_CACHE_SEL hal_get_reg_apps_sys_cache_sel
#define SETTER_FOR_APPS_SYS_CPU0_TCM_REMAP_CONTROLS hal_set_reg_apps_sys_cpu0_tcm_remap_controls
#define GETTER_FOR_APPS_SYS_CPU0_TCM_REMAP_CONTROLS hal_get_reg_apps_sys_cpu0_tcm_remap_controls
#define SETTER_FOR_APPS_SYS_CPU1_TCM_REMAP_CONTROLS hal_set_reg_apps_sys_cpu1_tcm_remap_controls
#define GETTER_FOR_APPS_SYS_CPU1_TCM_REMAP_CONTROLS hal_get_reg_apps_sys_cpu1_tcm_remap_controls
#define SETTER_FOR_APPS_SYS_DM0_ACCESS_RESTRICT hal_set_reg_apps_sys_dm0_access_restrict
#define GETTER_FOR_APPS_SYS_DM0_ACCESS_RESTRICT hal_get_reg_apps_sys_dm0_access_restrict
#define SETTER_FOR_APPS_SYS_INTERCONNECT_DEBUG_CONTROL hal_set_reg_apps_sys_interconnect_debug_control
#define GETTER_FOR_APPS_SYS_INTERCONNECT_DEBUG_CONTROL hal_get_reg_apps_sys_interconnect_debug_control
#define SETTER_FOR_APPS_SYS_MUTEX_LOCK hal_set_reg_apps_sys_mutex_lock
#define GETTER_FOR_APPS_SYS_MUTEX_LOCK hal_get_reg_apps_sys_mutex_lock
#define SETTER_FOR_APPS_SYS_PIO_MUX hal_set_reg_apps_sys_pio_mux
#define SETTER_FOR_APPS_SYS_PIO_MUX_WORD0 hal_set_reg_apps_sys_pio_mux_word0
#define SETTER_FOR_APPS_SYS_PIO_MUX_WORD1 hal_set_reg_apps_sys_pio_mux_word1
#define SETTER_FOR_APPS_SYS_PIO_MUX_WORD2 hal_set_reg_apps_sys_pio_mux_word2
#define GETTER_FOR_APPS_SYS_PIO_MUX hal_get_reg_apps_sys_pio_mux
#define GETTER_FOR_APPS_SYS_PIO_MUX_WORD0 hal_get_reg_apps_sys_pio_mux_word0
#define GETTER_FOR_APPS_SYS_PIO_MUX_WORD1 hal_get_reg_apps_sys_pio_mux_word1
#define GETTER_FOR_APPS_SYS_PIO_MUX_WORD2 hal_get_reg_apps_sys_pio_mux_word2
#define SETTER_FOR_APPS_SYS_SQIF0_PRESENT hal_set_reg_apps_sys_sqif0_present
#define GETTER_FOR_APPS_SYS_SQIF0_PRESENT hal_get_reg_apps_sys_sqif0_present
#define SETTER_FOR_APPS_SYS_SQIF1_PRESENT hal_set_reg_apps_sys_sqif1_present
#define GETTER_FOR_APPS_SYS_SQIF1_PRESENT hal_get_reg_apps_sys_sqif1_present
#define SETTER_FOR_APPS_SYS_SQIF_SEL hal_set_reg_apps_sys_sqif_sel
#define GETTER_FOR_APPS_SYS_SQIF_SEL hal_get_reg_apps_sys_sqif_sel
#define SETTER_FOR_APPS_SYS_SQIF_WINDOW_CONTROL hal_set_reg_apps_sys_sqif_window_control
#define GETTER_FOR_APPS_SYS_SQIF_WINDOW_CONTROL hal_get_reg_apps_sys_sqif_window_control
#define SETTER_FOR_APPS_SYS_TBUS_WINDOW_EN hal_set_reg_apps_sys_tbus_window_en
#define GETTER_FOR_APPS_SYS_TBUS_WINDOW_EN hal_get_reg_apps_sys_tbus_window_en
#define SETTER_FOR_APPS_SYS_TBUS_WINDOW_IDS hal_set_reg_apps_sys_tbus_window_ids
#define GETTER_FOR_APPS_SYS_TBUS_WINDOW_IDS hal_get_reg_apps_sys_tbus_window_ids
#define SETTER_FOR_APPS_SYS_TCM_LOCK hal_set_reg_apps_sys_tcm_lock
#define GETTER_FOR_APPS_SYS_TCM_LOCK hal_get_reg_apps_sys_tcm_lock
#define SETTER_FOR_APPS_SYS_TEST_REG hal_set_reg_apps_sys_test_reg
#define GETTER_FOR_APPS_SYS_TEST_REG hal_get_reg_apps_sys_test_reg
#define GETTER_FOR_RAM_SEQUENCER_ACTIVE_STATUS hal_get_reg_ram_sequencer_active_status
#define GETTER_FOR_SUB_SYS_CHIP_VERSION hal_get_reg_sub_sys_chip_version
#define SETTER_FOR_SUB_SYS_DEBUG_SELECT_HIGH hal_set_reg_sub_sys_debug_select_high
#define GETTER_FOR_SUB_SYS_DEBUG_SELECT_HIGH hal_get_reg_sub_sys_debug_select_high
#define SETTER_FOR_SUB_SYS_DEBUG_SELECT_LOW hal_set_reg_sub_sys_debug_select_low
#define GETTER_FOR_SUB_SYS_DEBUG_SELECT_LOW hal_get_reg_sub_sys_debug_select_low
#define SETTER_FOR_SUB_SYS_DEBUG_SELECT_SHIFT hal_set_reg_sub_sys_debug_select_shift
#define GETTER_FOR_SUB_SYS_DEBUG_SELECT_SHIFT hal_get_reg_sub_sys_debug_select_shift
#define GETTER_FOR_SUB_SYS_DEBUG_STATUS hal_get_reg_sub_sys_debug_status
#define GETTER_FOR_SUB_SYS_ID hal_get_reg_sub_sys_id
#define GETTER_FOR_SUB_SYS_REG_SRC_HASH hal_get_reg_sub_sys_reg_src_hash
#define SETTER_FOR_SUB_SYS_RST_STATUS hal_set_reg_sub_sys_rst_status
#define GETTER_FOR_SUB_SYS_RST_STATUS hal_get_reg_sub_sys_rst_status
#define SETTER_FOR_SUB_SYS_TRANSACTION_MUX_DBG_SEL hal_set_reg_sub_sys_transaction_mux_dbg_sel
#define GETTER_FOR_SUB_SYS_TRANSACTION_MUX_DBG_SEL hal_get_reg_sub_sys_transaction_mux_dbg_sel

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_SYS) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_SYS */

#if defined(IO_DEFS_MODULE_K32_MONITOR) 

#ifndef __HAL_MACROS_H__MODULE_K32_MONITOR
#define __HAL_MACROS_H__MODULE_K32_MONITOR

/* -- Kalimba 32-bit Monitor Control registers. -- */

 /* Field DM1_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm1_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM1_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_end_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm1_prog_exception_region_end_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM1_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_start_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm1_prog_exception_region_start_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm2_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM2_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_end_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm2_prog_exception_region_end_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_start_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm2_prog_exception_region_start_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR

 /* Field EXCEPTION_EN_BREAK */
 /* Accessor macros */
#define hal_get_exception_en_break() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_BREAK)
#define hal_set_exception_en_break(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_BREAK,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_BREAK EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_BREAK EXCEPTION_EN

 /* Field EXCEPTION_EN_IRQ */
 /* Accessor macros */
#define hal_get_exception_en_irq() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_IRQ)
#define hal_set_exception_en_irq(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_IRQ,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_IRQ EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_IRQ EXCEPTION_EN

 /* Field EXCEPTION_PC_LSB */
 /* Accessor macros */
#define hal_get_exception_pc() hal_get_register_field32(EXCEPTION_PC,EXCEPTION_PC)
 /* Workings */
#define TYPE_OF_EXCEPTION_PC EXCEPTION_PC
#define FIELDS_MASKS_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_PC EXCEPTION_PC

 /* Field PM_PROG_EXCEPTION_OOB_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_oob_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE)
#define hal_set_pm_prog_exception_oob_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_pm_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_end_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_pm_prog_exception_region_end_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR

 /* Field PM_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_start_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_pm_prog_exception_region_start_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_DM1_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_DM1_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_DM2_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_DM2_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_EXCEPTION_EN_EXCEPTION_EN
#define CHECK_FIELD_TYPE_EXCEPTION_EN_END
#define CHECK_FIELD_TYPE_EXCEPTION_PC_EXCEPTION_PC
#define CHECK_FIELD_TYPE_EXCEPTION_PC_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_PM_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_PM_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_PROG_EXCEPTION_REGION_ENABLE
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define DM1_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_end_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_end_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM1_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_start_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_start_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_end_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_end_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_start_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_start_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define EXCEPTION_EN_REG_BITS (2u)
#define hal_set_reg_exception_en(x) hal_set_register(EXCEPTION_EN, x, 1)
#define hal_get_reg_exception_en() hal_get_register(EXCEPTION_EN, 1)
#define EXCEPTION_PC_REG_BITS (32u)
#define hal_get_reg_exception_pc() hal_get_register(EXCEPTION_PC, 1)
#define EXCEPTION_TYPE_REG_BITS (4u)
#define hal_get_reg_exception_type() hal_get_register(EXCEPTION_TYPE, 1)
#define PM_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_end_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_end_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define PM_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_start_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_start_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define PROG_EXCEPTION_REGION_ENABLE_REG_BITS (4u)
#define hal_set_reg_prog_exception_region_enable(x) hal_set_register(PROG_EXCEPTION_REGION_ENABLE, x, 1)
#define hal_get_reg_prog_exception_region_enable() hal_get_register(PROG_EXCEPTION_REGION_ENABLE, 1)

 /* Workings */
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm1_prog_exception_region_end_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm1_prog_exception_region_end_addr
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm1_prog_exception_region_start_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm1_prog_exception_region_start_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm2_prog_exception_region_end_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm2_prog_exception_region_end_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm2_prog_exception_region_start_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm2_prog_exception_region_start_addr
#define SETTER_FOR_EXCEPTION_EN hal_set_reg_exception_en
#define GETTER_FOR_EXCEPTION_EN hal_get_reg_exception_en
#define GETTER_FOR_EXCEPTION_PC hal_get_reg_exception_pc
#define GETTER_FOR_EXCEPTION_TYPE hal_get_reg_exception_type
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_pm_prog_exception_region_end_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_pm_prog_exception_region_end_addr
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_pm_prog_exception_region_start_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_pm_prog_exception_region_start_addr
#define SETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_set_reg_prog_exception_region_enable
#define GETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_get_reg_prog_exception_region_enable

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MONITOR) */
#endif /* __HAL_MACROS_H__MODULE_K32_MONITOR */

#if defined(IO_DEFS_MODULE_LED_CTRL) 

#ifndef __HAL_MACROS_H__MODULE_LED_CTRL
#define __HAL_MACROS_H__MODULE_LED_CTRL

/* -- Control registers for LED controllers -- */

 /* Field LED0 */
 /* Accessor macros */
#define hal_get_led0_en() hal_get_register_field8(LED_EN,LED0)
#define hal_set_led0_en(x) hal_set_register_field(LED_EN,LED0,(x))
#define hal_get_led0_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED0)
#define hal_set_led0_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED0,(x))
#define hal_get_led0_update() hal_get_register_field8(LED_UPDATE,LED0)
#define hal_set_led0_update(x) hal_set_register_field(LED_UPDATE,LED0,(x))
 /* Workings */
#define TYPE_OF_LED0 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED0(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED0(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED0 LED_INSTANCE

 /* Field LED1 */
 /* Accessor macros */
#define hal_get_led1_en() hal_get_register_field8(LED_EN,LED1)
#define hal_set_led1_en(x) hal_set_register_field(LED_EN,LED1,(x))
#define hal_get_led1_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED1)
#define hal_set_led1_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED1,(x))
#define hal_get_led1_update() hal_get_register_field8(LED_UPDATE,LED1)
#define hal_set_led1_update(x) hal_set_register_field(LED_UPDATE,LED1,(x))
 /* Workings */
#define TYPE_OF_LED1 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED1(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED1(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED1 LED_INSTANCE

 /* Field LED2 */
 /* Accessor macros */
#define hal_get_led2_en() hal_get_register_field8(LED_EN,LED2)
#define hal_set_led2_en(x) hal_set_register_field(LED_EN,LED2,(x))
#define hal_get_led2_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED2)
#define hal_set_led2_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED2,(x))
#define hal_get_led2_update() hal_get_register_field8(LED_UPDATE,LED2)
#define hal_set_led2_update(x) hal_set_register_field(LED_UPDATE,LED2,(x))
 /* Workings */
#define TYPE_OF_LED2 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED2(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED2(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED2 LED_INSTANCE

 /* Field LED3 */
 /* Accessor macros */
#define hal_get_led3_en() hal_get_register_field8(LED_EN,LED3)
#define hal_set_led3_en(x) hal_set_register_field(LED_EN,LED3,(x))
#define hal_get_led3_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED3)
#define hal_set_led3_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED3,(x))
#define hal_get_led3_update() hal_get_register_field8(LED_UPDATE,LED3)
#define hal_set_led3_update(x) hal_set_register_field(LED_UPDATE,LED3,(x))
 /* Workings */
#define TYPE_OF_LED3 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED3(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED3(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED3 LED_INSTANCE

 /* Field LED4 */
 /* Accessor macros */
#define hal_get_led4_en() hal_get_register_field8(LED_EN,LED4)
#define hal_set_led4_en(x) hal_set_register_field(LED_EN,LED4,(x))
#define hal_get_led4_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED4)
#define hal_set_led4_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED4,(x))
#define hal_get_led4_update() hal_get_register_field8(LED_UPDATE,LED4)
#define hal_set_led4_update(x) hal_set_register_field(LED_UPDATE,LED4,(x))
 /* Workings */
#define TYPE_OF_LED4 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED4(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED4(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED4 LED_INSTANCE

 /* Field LED5 */
 /* Accessor macros */
#define hal_get_led5_en() hal_get_register_field8(LED_EN,LED5)
#define hal_set_led5_en(x) hal_set_register_field(LED_EN,LED5,(x))
#define hal_get_led5_mode() hal_get_register_field8(LED_SINGLE_SHOT_MODE,LED5)
#define hal_set_led5_mode(x) hal_set_register_field(LED_SINGLE_SHOT_MODE,LED5,(x))
#define hal_get_led5_update() hal_get_register_field8(LED_UPDATE,LED5)
#define hal_set_led5_update(x) hal_set_register_field(LED_UPDATE,LED5,(x))
 /* Workings */
#define TYPE_OF_LED5 LED_INSTANCE
#define FIELDS_MASKS_SHIFTED_LED5(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED5(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED5 LED_INSTANCE

 /* Field LED_CONFIGURE */
 /* Accessor macros */
#define hal_get_led_configure() hal_get_register_field8(LED_CONFIGURE,LED_CONFIGURE)
#define hal_set_led_configure(x) hal_set_register_field(LED_CONFIGURE,LED_CONFIGURE,(x))
 /* Workings */
#define TYPE_OF_LED_CONFIGURE LED_CONFIGURE
#define FIELDS_MASKS_SHIFTED_LED_CONFIGURE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CONFIGURE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_CONFIGURE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CONFIGURE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_CONFIGURE LED_CONFIGURE

 /* Field LED_COUNTHOLD_VALUE_LSB */
 /* Accessor macros */
#define hal_get_led_counthold_value() hal_get_register_field16(LED_COUNTHOLD_VALUE,LED_COUNTHOLD_VALUE)
#define hal_set_led_counthold_value(x) hal_set_register_field(LED_COUNTHOLD_VALUE,LED_COUNTHOLD_VALUE,(x))
 /* Workings */
#define TYPE_OF_LED_COUNTHOLD_VALUE LED_COUNTHOLD_VALUE
#define FIELDS_MASKS_SHIFTED_LED_COUNTHOLD_VALUE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_COUNTHOLD_VALUE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_COUNTHOLD_VALUE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_COUNTHOLD_VALUE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_COUNTHOLD_VALUE LED_COUNTHOLD_VALUE

 /* Field LED_CTRL_CLK_ENABLE */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_LED_CTRL_CLK_ENABLE LED_CTRL_CLK_ENABLE
#define FIELDS_MASKS_SHIFTED_LED_CTRL_CLK_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CTRL_CLK_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_CTRL_CLK_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CTRL_CLK_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_CTRL_CLK_ENABLE LED_CTRL_CLK_ENABLE

 /* Field LED_CTRL_SOFT_RESET */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_LED_CTRL_SOFT_RESET LED_CTRL_SOFT_RESET
#define FIELDS_MASKS_SHIFTED_LED_CTRL_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CTRL_SOFT_RESET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_CTRL_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_CTRL_SOFT_RESET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_CTRL_SOFT_RESET LED_CTRL_SOFT_RESET

 /* Field LED_DEBUG_SELECT_LSB */
 /* Accessor macros */
#define hal_get_led_debug_select() hal_get_register_field8(LED_DEBUG_SELECT,LED_DEBUG_SELECT)
#define hal_set_led_debug_select(x) hal_set_register_field(LED_DEBUG_SELECT,LED_DEBUG_SELECT,(x))
 /* Workings */
#define TYPE_OF_LED_DEBUG_SELECT LED_DEBUG_SELECT
#define FIELDS_MASKS_SHIFTED_LED_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_DEBUG_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_DEBUG_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_DEBUG_SELECT LED_DEBUG_SELECT

 /* Field LED_HOLD_HIGH_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_hold_high_config() hal_get_register_field16(LED_HOLD_HIGH_CONFIG,LED_HOLD_HIGH_CONFIG)
#define hal_set_led_hold_high_config(x) hal_set_register_field(LED_HOLD_HIGH_CONFIG,LED_HOLD_HIGH_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_HOLD_HIGH_CONFIG LED_HOLD_HIGH_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_HOLD_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_HIGH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_HOLD_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_HIGH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_HOLD_HIGH_CONFIG LED_HOLD_HIGH_CONFIG

 /* Field LED_HOLD_HIGH_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_hold_high_config_status() hal_get_register_field16(LED_HOLD_HIGH_CONFIG_STATUS,LED_HOLD_HIGH_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_HOLD_HIGH_CONFIG_STATUS LED_HOLD_HIGH_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_HOLD_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_HIGH_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_HOLD_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_HIGH_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_HOLD_HIGH_CONFIG_STATUS LED_HOLD_HIGH_CONFIG_STATUS

 /* Field LED_HOLD_LOW_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_hold_low_config() hal_get_register_field16(LED_HOLD_LOW_CONFIG,LED_HOLD_LOW_CONFIG)
#define hal_set_led_hold_low_config(x) hal_set_register_field(LED_HOLD_LOW_CONFIG,LED_HOLD_LOW_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_HOLD_LOW_CONFIG LED_HOLD_LOW_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_HOLD_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_LOW_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_HOLD_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_LOW_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_HOLD_LOW_CONFIG LED_HOLD_LOW_CONFIG

 /* Field LED_HOLD_LOW_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_hold_low_config_status() hal_get_register_field16(LED_HOLD_LOW_CONFIG_STATUS,LED_HOLD_LOW_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_HOLD_LOW_CONFIG_STATUS LED_HOLD_LOW_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_HOLD_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_LOW_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_HOLD_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_HOLD_LOW_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_HOLD_LOW_CONFIG_STATUS LED_HOLD_LOW_CONFIG_STATUS

 /* Field LED_INDEX_LSB */
 /* Accessor macros */
#define hal_get_led_index() hal_get_register_field8(LED_INDEX,LED_INDEX)
#define hal_set_led_index(x) hal_set_register_field(LED_INDEX,LED_INDEX,(x))
 /* Workings */
#define TYPE_OF_LED_INDEX LED_INDEX
#define FIELDS_MASKS_SHIFTED_LED_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INDEX, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INDEX, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_INDEX LED_INDEX

 /* Field LED_LOGARITHMIC_EN */
 /* Accessor macros */
#define hal_get_led_logarithmic_en() hal_get_register_field8(LED_LOGARITHMIC_EN,LED_LOGARITHMIC_EN)
#define hal_set_led_logarithmic_en(x) hal_set_register_field(LED_LOGARITHMIC_EN,LED_LOGARITHMIC_EN,(x))
 /* Workings */
#define TYPE_OF_LED_LOGARITHMIC_EN LED_LOGARITHMIC_EN
#define FIELDS_MASKS_SHIFTED_LED_LOGARITHMIC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_LOGARITHMIC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_LOGARITHMIC_EN LED_LOGARITHMIC_EN

 /* Field LED_LOGARITHMIC_OFFSET_HIGH_LSB */
 /* Accessor macros */
#define hal_get_led_logarithmic_offset_high() hal_get_register_field8(LED_LOGARITHMIC_OFFSET_HIGH,LED_LOGARITHMIC_OFFSET_HIGH)
#define hal_set_led_logarithmic_offset_high(x) hal_set_register_field(LED_LOGARITHMIC_OFFSET_HIGH,LED_LOGARITHMIC_OFFSET_HIGH,(x))
 /* Workings */
#define TYPE_OF_LED_LOGARITHMIC_OFFSET_HIGH LED_LOGARITHMIC_OFFSET_HIGH
#define FIELDS_MASKS_SHIFTED_LED_LOGARITHMIC_OFFSET_HIGH(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_OFFSET_HIGH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_LOGARITHMIC_OFFSET_HIGH(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_OFFSET_HIGH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_LOGARITHMIC_OFFSET_HIGH LED_LOGARITHMIC_OFFSET_HIGH

 /* Field LED_LOGARITHMIC_OFFSET_LOW_LSB */
 /* Accessor macros */
#define hal_get_led_logarithmic_offset_low() hal_get_register_field8(LED_LOGARITHMIC_OFFSET_LOW,LED_LOGARITHMIC_OFFSET_LOW)
#define hal_set_led_logarithmic_offset_low(x) hal_set_register_field(LED_LOGARITHMIC_OFFSET_LOW,LED_LOGARITHMIC_OFFSET_LOW,(x))
 /* Workings */
#define TYPE_OF_LED_LOGARITHMIC_OFFSET_LOW LED_LOGARITHMIC_OFFSET_LOW
#define FIELDS_MASKS_SHIFTED_LED_LOGARITHMIC_OFFSET_LOW(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_OFFSET_LOW, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_LOGARITHMIC_OFFSET_LOW(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_OFFSET_LOW, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_LOGARITHMIC_OFFSET_LOW LED_LOGARITHMIC_OFFSET_LOW

 /* Field LED_LOGARITHMIC_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_logarithmic_status() hal_get_register_field16(LED_LOGARITHMIC_STATUS,LED_LOGARITHMIC_STATUS)
 /* Workings */
#define TYPE_OF_LED_LOGARITHMIC_STATUS LED_LOGARITHMIC_STATUS
#define FIELDS_MASKS_SHIFTED_LED_LOGARITHMIC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_LOGARITHMIC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_LOGARITHMIC_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_LOGARITHMIC_STATUS LED_LOGARITHMIC_STATUS

 /* Field LED_MAX_HIGH_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_max_high_config() hal_get_register_field16(LED_MAX_HIGH_CONFIG,LED_MAX_HIGH_CONFIG)
#define hal_set_led_max_high_config(x) hal_set_register_field(LED_MAX_HIGH_CONFIG,LED_MAX_HIGH_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_MAX_HIGH_CONFIG LED_MAX_HIGH_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_MAX_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_HIGH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MAX_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_HIGH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MAX_HIGH_CONFIG LED_MAX_HIGH_CONFIG

 /* Field LED_MAX_HIGH_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_max_high_config_status() hal_get_register_field16(LED_MAX_HIGH_CONFIG_STATUS,LED_MAX_HIGH_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_MAX_HIGH_CONFIG_STATUS LED_MAX_HIGH_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_MAX_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_HIGH_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MAX_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_HIGH_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MAX_HIGH_CONFIG_STATUS LED_MAX_HIGH_CONFIG_STATUS

 /* Field LED_MAX_LOW_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_max_low_config() hal_get_register_field16(LED_MAX_LOW_CONFIG,LED_MAX_LOW_CONFIG)
#define hal_set_led_max_low_config(x) hal_set_register_field(LED_MAX_LOW_CONFIG,LED_MAX_LOW_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_MAX_LOW_CONFIG LED_MAX_LOW_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_MAX_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_LOW_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MAX_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_LOW_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MAX_LOW_CONFIG LED_MAX_LOW_CONFIG

 /* Field LED_MAX_LOW_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_max_low_config_status() hal_get_register_field16(LED_MAX_LOW_CONFIG_STATUS,LED_MAX_LOW_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_MAX_LOW_CONFIG_STATUS LED_MAX_LOW_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_MAX_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_LOW_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MAX_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MAX_LOW_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MAX_LOW_CONFIG_STATUS LED_MAX_LOW_CONFIG_STATUS

 /* Field LED_MIN_HIGH_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_min_high_config() hal_get_register_field16(LED_MIN_HIGH_CONFIG,LED_MIN_HIGH_CONFIG)
#define hal_set_led_min_high_config(x) hal_set_register_field(LED_MIN_HIGH_CONFIG,LED_MIN_HIGH_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_MIN_HIGH_CONFIG LED_MIN_HIGH_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_MIN_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_HIGH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MIN_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_HIGH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MIN_HIGH_CONFIG LED_MIN_HIGH_CONFIG

 /* Field LED_MIN_HIGH_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_min_high_config_status() hal_get_register_field16(LED_MIN_HIGH_CONFIG_STATUS,LED_MIN_HIGH_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_MIN_HIGH_CONFIG_STATUS LED_MIN_HIGH_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_MIN_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_HIGH_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MIN_HIGH_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_HIGH_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MIN_HIGH_CONFIG_STATUS LED_MIN_HIGH_CONFIG_STATUS

 /* Field LED_MIN_LOW_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_min_low_config() hal_get_register_field16(LED_MIN_LOW_CONFIG,LED_MIN_LOW_CONFIG)
#define hal_set_led_min_low_config(x) hal_set_register_field(LED_MIN_LOW_CONFIG,LED_MIN_LOW_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_MIN_LOW_CONFIG LED_MIN_LOW_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_MIN_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_LOW_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MIN_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_LOW_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MIN_LOW_CONFIG LED_MIN_LOW_CONFIG

 /* Field LED_MIN_LOW_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_min_low_config_status() hal_get_register_field16(LED_MIN_LOW_CONFIG_STATUS,LED_MIN_LOW_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_MIN_LOW_CONFIG_STATUS LED_MIN_LOW_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_MIN_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_LOW_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_MIN_LOW_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_MIN_LOW_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_MIN_LOW_CONFIG_STATUS LED_MIN_LOW_CONFIG_STATUS

 /* Field LED_PIN_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_pin_config() hal_get_register_field8(LED_PIN_CONFIG,LED_PIN_CONFIG)
#define hal_set_led_pin_config(x) hal_set_register_field(LED_PIN_CONFIG,LED_PIN_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_PIN_CONFIG LED_PIN_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_PIN_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_PIN_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_PIN_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_PIN_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_PIN_CONFIG LED_PIN_CONFIG

 /* Field LED_PIN_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_pin_config_status() hal_get_register_field8(LED_PIN_CONFIG_STATUS,LED_PIN_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_PIN_CONFIG_STATUS LED_PIN_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_PIN_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_PIN_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_PIN_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_PIN_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_PIN_CONFIG_STATUS LED_PIN_CONFIG_STATUS

 /* Field LED_RAMP_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_ramp_config() hal_get_register_field16(LED_RAMP_CONFIG,LED_RAMP_CONFIG)
#define hal_set_led_ramp_config(x) hal_set_register_field(LED_RAMP_CONFIG,LED_RAMP_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_RAMP_CONFIG LED_RAMP_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_RAMP_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_RAMP_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_RAMP_CONFIG LED_RAMP_CONFIG

 /* Field LED_RAMP_CONFIG_STATUS_LSB */
 /* Accessor macros */
#define hal_get_led_ramp_config_status() hal_get_register_field16(LED_RAMP_CONFIG_STATUS,LED_RAMP_CONFIG_STATUS)
 /* Workings */
#define TYPE_OF_LED_RAMP_CONFIG_STATUS LED_RAMP_CONFIG_STATUS
#define FIELDS_MASKS_SHIFTED_LED_RAMP_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CONFIG_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_RAMP_CONFIG_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CONFIG_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_RAMP_CONFIG_STATUS LED_RAMP_CONFIG_STATUS

 /* Field LED_RAMP_CURRENT_HIGH_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_ramp_current_high_config() hal_get_register_field16(LED_RAMP_CURRENT_HIGH_CONFIG,LED_RAMP_CURRENT_HIGH_CONFIG)
#define hal_set_led_ramp_current_high_config(x) hal_set_register_field(LED_RAMP_CURRENT_HIGH_CONFIG,LED_RAMP_CURRENT_HIGH_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_RAMP_CURRENT_HIGH_CONFIG LED_RAMP_CURRENT_HIGH_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_RAMP_CURRENT_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CURRENT_HIGH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_RAMP_CURRENT_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CURRENT_HIGH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_RAMP_CURRENT_HIGH_CONFIG LED_RAMP_CURRENT_HIGH_CONFIG

 /* Field LED_RAMP_CURRENT_LOW_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_ramp_current_low_config() hal_get_register_field16(LED_RAMP_CURRENT_LOW_CONFIG,LED_RAMP_CURRENT_LOW_CONFIG)
#define hal_set_led_ramp_current_low_config(x) hal_set_register_field(LED_RAMP_CURRENT_LOW_CONFIG,LED_RAMP_CURRENT_LOW_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_RAMP_CURRENT_LOW_CONFIG LED_RAMP_CURRENT_LOW_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_RAMP_CURRENT_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CURRENT_LOW_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_RAMP_CURRENT_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_CURRENT_LOW_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_RAMP_CURRENT_LOW_CONFIG LED_RAMP_CURRENT_LOW_CONFIG

 /* Field LED_RAMP_SHIFT_LSB */
 /* Accessor macros */
#define hal_get_led_ramp_shift() hal_get_register_field8(LED_RAMP_SHIFT,LED_RAMP_SHIFT)
#define hal_set_led_ramp_shift(x) hal_set_register_field(LED_RAMP_SHIFT,LED_RAMP_SHIFT,(x))
 /* Workings */
#define TYPE_OF_LED_RAMP_SHIFT LED_RAMP_SHIFT
#define FIELDS_MASKS_SHIFTED_LED_RAMP_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_SHIFT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_RAMP_SHIFT(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_RAMP_SHIFT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_RAMP_SHIFT LED_RAMP_SHIFT

 /* Field LED_SINGLE_SHOT_HIGH_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_single_shot_high_config() hal_get_register_field16(LED_SINGLE_SHOT_HIGH_CONFIG,LED_SINGLE_SHOT_HIGH_CONFIG)
#define hal_set_led_single_shot_high_config(x) hal_set_register_field(LED_SINGLE_SHOT_HIGH_CONFIG,LED_SINGLE_SHOT_HIGH_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_SINGLE_SHOT_HIGH_CONFIG LED_SINGLE_SHOT_HIGH_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_SINGLE_SHOT_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_HIGH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_SINGLE_SHOT_HIGH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_HIGH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_SINGLE_SHOT_HIGH_CONFIG LED_SINGLE_SHOT_HIGH_CONFIG

 /* Field LED_SINGLE_SHOT_LOW_CONFIG_LSB */
 /* Accessor macros */
#define hal_get_led_single_shot_low_config() hal_get_register_field16(LED_SINGLE_SHOT_LOW_CONFIG,LED_SINGLE_SHOT_LOW_CONFIG)
#define hal_set_led_single_shot_low_config(x) hal_set_register_field(LED_SINGLE_SHOT_LOW_CONFIG,LED_SINGLE_SHOT_LOW_CONFIG,(x))
 /* Workings */
#define TYPE_OF_LED_SINGLE_SHOT_LOW_CONFIG LED_SINGLE_SHOT_LOW_CONFIG
#define FIELDS_MASKS_SHIFTED_LED_SINGLE_SHOT_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_LOW_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_SINGLE_SHOT_LOW_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_LOW_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_SINGLE_SHOT_LOW_CONFIG LED_SINGLE_SHOT_LOW_CONFIG

 /* Field LED_START_UP_STATE_LSB */
 /* Accessor macros */
#define hal_get_led_start_up_state() hal_get_register_field8(LED_START_UP_STATE,LED_START_UP_STATE)
#define hal_set_led_start_up_state(x) hal_set_register_field(LED_START_UP_STATE,LED_START_UP_STATE,(x))
 /* Workings */
#define TYPE_OF_LED_START_UP_STATE LED_START_UP_STATE
#define FIELDS_MASKS_SHIFTED_LED_START_UP_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_START_UP_STATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_START_UP_STATE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_START_UP_STATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_LED_START_UP_STATE LED_START_UP_STATE

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_LED_CONFIGURE_LED_CONFIGURE
#define CHECK_FIELD_TYPE_LED_CONFIGURE_END
#define CHECK_FIELD_TYPE_LED_COUNTHOLD_VALUE_LED_COUNTHOLD_VALUE
#define CHECK_FIELD_TYPE_LED_COUNTHOLD_VALUE_END
#define CHECK_FIELD_TYPE_LED_CTRL_CLK_ENABLE_LED_CTRL_CLK_ENABLE
#define CHECK_FIELD_TYPE_LED_CTRL_CLK_ENABLE_END
#define CHECK_FIELD_TYPE_LED_CTRL_SOFT_RESET_LED_CTRL_SOFT_RESET
#define CHECK_FIELD_TYPE_LED_CTRL_SOFT_RESET_END
#define CHECK_FIELD_TYPE_LED_DEBUG_SELECT_LED_DEBUG_SELECT
#define CHECK_FIELD_TYPE_LED_DEBUG_SELECT_END
#define CHECK_FIELD_TYPE_LED_EN_LED_INSTANCE
#define CHECK_FIELD_TYPE_LED_EN_END
#define CHECK_FIELD_TYPE_LED_HOLD_HIGH_CONFIG_LED_HOLD_HIGH_CONFIG
#define CHECK_FIELD_TYPE_LED_HOLD_HIGH_CONFIG_END
#define CHECK_FIELD_TYPE_LED_HOLD_HIGH_CONFIG_STATUS_LED_HOLD_HIGH_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_HOLD_HIGH_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_HOLD_LOW_CONFIG_LED_HOLD_LOW_CONFIG
#define CHECK_FIELD_TYPE_LED_HOLD_LOW_CONFIG_END
#define CHECK_FIELD_TYPE_LED_HOLD_LOW_CONFIG_STATUS_LED_HOLD_LOW_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_HOLD_LOW_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_INDEX_LED_INDEX
#define CHECK_FIELD_TYPE_LED_INDEX_END
#define CHECK_FIELD_TYPE_LED_INSTANCE_LED_INSTANCE
#define CHECK_FIELD_TYPE_LED_INSTANCE_END
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_EN_LED_LOGARITHMIC_EN
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_EN_END
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_OFFSET_HIGH_LED_LOGARITHMIC_OFFSET_HIGH
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_OFFSET_HIGH_END
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_OFFSET_LOW_LED_LOGARITHMIC_OFFSET_LOW
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_OFFSET_LOW_END
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_STATUS_LED_LOGARITHMIC_STATUS
#define CHECK_FIELD_TYPE_LED_LOGARITHMIC_STATUS_END
#define CHECK_FIELD_TYPE_LED_MAX_HIGH_CONFIG_LED_MAX_HIGH_CONFIG
#define CHECK_FIELD_TYPE_LED_MAX_HIGH_CONFIG_END
#define CHECK_FIELD_TYPE_LED_MAX_HIGH_CONFIG_STATUS_LED_MAX_HIGH_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_MAX_HIGH_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_MAX_LOW_CONFIG_LED_MAX_LOW_CONFIG
#define CHECK_FIELD_TYPE_LED_MAX_LOW_CONFIG_END
#define CHECK_FIELD_TYPE_LED_MAX_LOW_CONFIG_STATUS_LED_MAX_LOW_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_MAX_LOW_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_MIN_HIGH_CONFIG_LED_MIN_HIGH_CONFIG
#define CHECK_FIELD_TYPE_LED_MIN_HIGH_CONFIG_END
#define CHECK_FIELD_TYPE_LED_MIN_HIGH_CONFIG_STATUS_LED_MIN_HIGH_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_MIN_HIGH_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_MIN_LOW_CONFIG_LED_MIN_LOW_CONFIG
#define CHECK_FIELD_TYPE_LED_MIN_LOW_CONFIG_END
#define CHECK_FIELD_TYPE_LED_MIN_LOW_CONFIG_STATUS_LED_MIN_LOW_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_MIN_LOW_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_PIN_CONFIG_LED_PIN_CONFIG
#define CHECK_FIELD_TYPE_LED_PIN_CONFIG_END
#define CHECK_FIELD_TYPE_LED_PIN_CONFIG_STATUS_LED_PIN_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_PIN_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_RAMP_CONFIG_LED_RAMP_CONFIG
#define CHECK_FIELD_TYPE_LED_RAMP_CONFIG_END
#define CHECK_FIELD_TYPE_LED_RAMP_CONFIG_STATUS_LED_RAMP_CONFIG_STATUS
#define CHECK_FIELD_TYPE_LED_RAMP_CONFIG_STATUS_END
#define CHECK_FIELD_TYPE_LED_RAMP_CURRENT_HIGH_CONFIG_LED_RAMP_CURRENT_HIGH_CONFIG
#define CHECK_FIELD_TYPE_LED_RAMP_CURRENT_HIGH_CONFIG_END
#define CHECK_FIELD_TYPE_LED_RAMP_CURRENT_LOW_CONFIG_LED_RAMP_CURRENT_LOW_CONFIG
#define CHECK_FIELD_TYPE_LED_RAMP_CURRENT_LOW_CONFIG_END
#define CHECK_FIELD_TYPE_LED_RAMP_SHIFT_LED_RAMP_SHIFT
#define CHECK_FIELD_TYPE_LED_RAMP_SHIFT_END
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_HIGH_CONFIG_LED_SINGLE_SHOT_HIGH_CONFIG
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_HIGH_CONFIG_END
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_LOW_CONFIG_LED_SINGLE_SHOT_LOW_CONFIG
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_LOW_CONFIG_END
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_MODE_LED_INSTANCE
#define CHECK_FIELD_TYPE_LED_SINGLE_SHOT_MODE_END
#define CHECK_FIELD_TYPE_LED_START_UP_STATE_LED_START_UP_STATE
#define CHECK_FIELD_TYPE_LED_START_UP_STATE_END
#define CHECK_FIELD_TYPE_LED_UPDATE_LED_INSTANCE
#define CHECK_FIELD_TYPE_LED_UPDATE_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_LED_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_LED_INSTANCE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_INSTANCE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_INSTANCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_LED_SINGLE_SHOT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_SINGLE_SHOT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_SINGLE_SHOT_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_LED_UPDATE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_UPDATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_LED_UPDATE(next, val, rest) \
   (CHECK_FIELD_TYPE(LED_UPDATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define LED_CONFIGURE_REG_BITS (1u)
#define hal_set_reg_led_configure(x) hal_set_register(LED_CONFIGURE, x, 1)
#define hal_get_reg_led_configure() hal_get_register(LED_CONFIGURE, 1)
#define LED_COUNTHOLD_VALUE_REG_BITS (16u)
#define hal_set_reg_led_counthold_value(x) hal_set_register(LED_COUNTHOLD_VALUE, x, 1)
#define hal_get_reg_led_counthold_value() hal_get_register(LED_COUNTHOLD_VALUE, 1)
#define LED_CTRL_CLK_ENABLE_REG_BITS (1u)
#define hal_set_reg_led_ctrl_clk_enable(x) hal_set_register(LED_CTRL_CLK_ENABLE, x, 1)
#define LED_CTRL_SOFT_RESET_REG_BITS (1u)
#define hal_set_reg_led_ctrl_soft_reset(x) hal_set_register(LED_CTRL_SOFT_RESET, x, 1)
#define LED_DEBUG_SELECT_REG_BITS (4u)
#define hal_set_reg_led_debug_select(x) hal_set_register(LED_DEBUG_SELECT, x, 1)
#define hal_get_reg_led_debug_select() hal_get_register(LED_DEBUG_SELECT, 1)
#define LED_EN_REG_BITS (6u)
#define hal_set_reg_led_en(x) hal_set_register(LED_EN, x, 1)
#define hal_get_reg_led_en() hal_get_register(LED_EN, 1)
#define LED_HOLD_HIGH_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_hold_high_config(x) hal_set_register(LED_HOLD_HIGH_CONFIG, x, 1)
#define hal_get_reg_led_hold_high_config() hal_get_register(LED_HOLD_HIGH_CONFIG, 1)
#define LED_HOLD_HIGH_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_hold_high_config_status() hal_get_register(LED_HOLD_HIGH_CONFIG_STATUS, 1)
#define LED_HOLD_LOW_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_hold_low_config(x) hal_set_register(LED_HOLD_LOW_CONFIG, x, 1)
#define hal_get_reg_led_hold_low_config() hal_get_register(LED_HOLD_LOW_CONFIG, 1)
#define LED_HOLD_LOW_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_hold_low_config_status() hal_get_register(LED_HOLD_LOW_CONFIG_STATUS, 1)
#define LED_INDEX_REG_BITS (4u)
#define hal_set_reg_led_index(x) hal_set_register(LED_INDEX, x, 1)
#define hal_get_reg_led_index() hal_get_register(LED_INDEX, 1)
#define LED_LOGARITHMIC_EN_REG_BITS (1u)
#define hal_set_reg_led_logarithmic_en(x) hal_set_register(LED_LOGARITHMIC_EN, x, 1)
#define hal_get_reg_led_logarithmic_en() hal_get_register(LED_LOGARITHMIC_EN, 1)
#define LED_LOGARITHMIC_OFFSET_HIGH_REG_BITS (4u)
#define hal_set_reg_led_logarithmic_offset_high(x) hal_set_register(LED_LOGARITHMIC_OFFSET_HIGH, x, 1)
#define hal_get_reg_led_logarithmic_offset_high() hal_get_register(LED_LOGARITHMIC_OFFSET_HIGH, 1)
#define LED_LOGARITHMIC_OFFSET_LOW_REG_BITS (4u)
#define hal_set_reg_led_logarithmic_offset_low(x) hal_set_register(LED_LOGARITHMIC_OFFSET_LOW, x, 1)
#define hal_get_reg_led_logarithmic_offset_low() hal_get_register(LED_LOGARITHMIC_OFFSET_LOW, 1)
#define LED_LOGARITHMIC_STATUS_REG_BITS (12u)
#define hal_get_reg_led_logarithmic_status() hal_get_register(LED_LOGARITHMIC_STATUS, 1)
#define LED_MAX_HIGH_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_max_high_config(x) hal_set_register(LED_MAX_HIGH_CONFIG, x, 1)
#define hal_get_reg_led_max_high_config() hal_get_register(LED_MAX_HIGH_CONFIG, 1)
#define LED_MAX_HIGH_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_max_high_config_status() hal_get_register(LED_MAX_HIGH_CONFIG_STATUS, 1)
#define LED_MAX_LOW_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_max_low_config(x) hal_set_register(LED_MAX_LOW_CONFIG, x, 1)
#define hal_get_reg_led_max_low_config() hal_get_register(LED_MAX_LOW_CONFIG, 1)
#define LED_MAX_LOW_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_max_low_config_status() hal_get_register(LED_MAX_LOW_CONFIG_STATUS, 1)
#define LED_MIN_HIGH_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_min_high_config(x) hal_set_register(LED_MIN_HIGH_CONFIG, x, 1)
#define hal_get_reg_led_min_high_config() hal_get_register(LED_MIN_HIGH_CONFIG, 1)
#define LED_MIN_HIGH_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_min_high_config_status() hal_get_register(LED_MIN_HIGH_CONFIG_STATUS, 1)
#define LED_MIN_LOW_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_min_low_config(x) hal_set_register(LED_MIN_LOW_CONFIG, x, 1)
#define hal_get_reg_led_min_low_config() hal_get_register(LED_MIN_LOW_CONFIG, 1)
#define LED_MIN_LOW_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_min_low_config_status() hal_get_register(LED_MIN_LOW_CONFIG_STATUS, 1)
#define LED_PIN_CONFIG_REG_BITS (2u)
#define hal_set_reg_led_pin_config(x) hal_set_register(LED_PIN_CONFIG, x, 1)
#define hal_get_reg_led_pin_config() hal_get_register(LED_PIN_CONFIG, 1)
#define LED_PIN_CONFIG_STATUS_REG_BITS (2u)
#define hal_get_reg_led_pin_config_status() hal_get_register(LED_PIN_CONFIG_STATUS, 1)
#define LED_RAMP_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_ramp_config(x) hal_set_register(LED_RAMP_CONFIG, x, 1)
#define hal_get_reg_led_ramp_config() hal_get_register(LED_RAMP_CONFIG, 1)
#define LED_RAMP_CONFIG_STATUS_REG_BITS (16u)
#define hal_get_reg_led_ramp_config_status() hal_get_register(LED_RAMP_CONFIG_STATUS, 1)
#define LED_RAMP_CURRENT_HIGH_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_ramp_current_high_config(x) hal_set_register(LED_RAMP_CURRENT_HIGH_CONFIG, x, 1)
#define hal_get_reg_led_ramp_current_high_config() hal_get_register(LED_RAMP_CURRENT_HIGH_CONFIG, 1)
#define LED_RAMP_CURRENT_LOW_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_ramp_current_low_config(x) hal_set_register(LED_RAMP_CURRENT_LOW_CONFIG, x, 1)
#define hal_get_reg_led_ramp_current_low_config() hal_get_register(LED_RAMP_CURRENT_LOW_CONFIG, 1)
#define LED_RAMP_SHIFT_REG_BITS (3u)
#define hal_set_reg_led_ramp_shift(x) hal_set_register(LED_RAMP_SHIFT, x, 1)
#define hal_get_reg_led_ramp_shift() hal_get_register(LED_RAMP_SHIFT, 1)
#define LED_SINGLE_SHOT_HIGH_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_single_shot_high_config(x) hal_set_register(LED_SINGLE_SHOT_HIGH_CONFIG, x, 1)
#define hal_get_reg_led_single_shot_high_config() hal_get_register(LED_SINGLE_SHOT_HIGH_CONFIG, 1)
#define LED_SINGLE_SHOT_LOW_CONFIG_REG_BITS (16u)
#define hal_set_reg_led_single_shot_low_config(x) hal_set_register(LED_SINGLE_SHOT_LOW_CONFIG, x, 1)
#define hal_get_reg_led_single_shot_low_config() hal_get_register(LED_SINGLE_SHOT_LOW_CONFIG, 1)
#define LED_SINGLE_SHOT_MODE_REG_BITS (6u)
#define hal_set_reg_led_single_shot_mode(x) hal_set_register(LED_SINGLE_SHOT_MODE, x, 1)
#define hal_get_reg_led_single_shot_mode() hal_get_register(LED_SINGLE_SHOT_MODE, 1)
#define LED_START_UP_STATE_REG_BITS (3u)
#define hal_set_reg_led_start_up_state(x) hal_set_register(LED_START_UP_STATE, x, 1)
#define hal_get_reg_led_start_up_state() hal_get_register(LED_START_UP_STATE, 1)
#define LED_UPDATE_REG_BITS (6u)
#define hal_set_reg_led_update(x) hal_set_register(LED_UPDATE, x, 1)
#define hal_get_reg_led_update() hal_get_register(LED_UPDATE, 1)

 /* Workings */
#define SETTER_FOR_LED_CONFIGURE hal_set_reg_led_configure
#define GETTER_FOR_LED_CONFIGURE hal_get_reg_led_configure
#define SETTER_FOR_LED_COUNTHOLD_VALUE hal_set_reg_led_counthold_value
#define GETTER_FOR_LED_COUNTHOLD_VALUE hal_get_reg_led_counthold_value
#define SETTER_FOR_LED_CTRL_CLK_ENABLE hal_set_reg_led_ctrl_clk_enable
#define SETTER_FOR_LED_CTRL_SOFT_RESET hal_set_reg_led_ctrl_soft_reset
#define SETTER_FOR_LED_DEBUG_SELECT hal_set_reg_led_debug_select
#define GETTER_FOR_LED_DEBUG_SELECT hal_get_reg_led_debug_select
#define SETTER_FOR_LED_EN hal_set_reg_led_en
#define GETTER_FOR_LED_EN hal_get_reg_led_en
#define SETTER_FOR_LED_HOLD_HIGH_CONFIG hal_set_reg_led_hold_high_config
#define GETTER_FOR_LED_HOLD_HIGH_CONFIG hal_get_reg_led_hold_high_config
#define GETTER_FOR_LED_HOLD_HIGH_CONFIG_STATUS hal_get_reg_led_hold_high_config_status
#define SETTER_FOR_LED_HOLD_LOW_CONFIG hal_set_reg_led_hold_low_config
#define GETTER_FOR_LED_HOLD_LOW_CONFIG hal_get_reg_led_hold_low_config
#define GETTER_FOR_LED_HOLD_LOW_CONFIG_STATUS hal_get_reg_led_hold_low_config_status
#define SETTER_FOR_LED_INDEX hal_set_reg_led_index
#define GETTER_FOR_LED_INDEX hal_get_reg_led_index
#define SETTER_FOR_LED_LOGARITHMIC_EN hal_set_reg_led_logarithmic_en
#define GETTER_FOR_LED_LOGARITHMIC_EN hal_get_reg_led_logarithmic_en
#define SETTER_FOR_LED_LOGARITHMIC_OFFSET_HIGH hal_set_reg_led_logarithmic_offset_high
#define GETTER_FOR_LED_LOGARITHMIC_OFFSET_HIGH hal_get_reg_led_logarithmic_offset_high
#define SETTER_FOR_LED_LOGARITHMIC_OFFSET_LOW hal_set_reg_led_logarithmic_offset_low
#define GETTER_FOR_LED_LOGARITHMIC_OFFSET_LOW hal_get_reg_led_logarithmic_offset_low
#define GETTER_FOR_LED_LOGARITHMIC_STATUS hal_get_reg_led_logarithmic_status
#define SETTER_FOR_LED_MAX_HIGH_CONFIG hal_set_reg_led_max_high_config
#define GETTER_FOR_LED_MAX_HIGH_CONFIG hal_get_reg_led_max_high_config
#define GETTER_FOR_LED_MAX_HIGH_CONFIG_STATUS hal_get_reg_led_max_high_config_status
#define SETTER_FOR_LED_MAX_LOW_CONFIG hal_set_reg_led_max_low_config
#define GETTER_FOR_LED_MAX_LOW_CONFIG hal_get_reg_led_max_low_config
#define GETTER_FOR_LED_MAX_LOW_CONFIG_STATUS hal_get_reg_led_max_low_config_status
#define SETTER_FOR_LED_MIN_HIGH_CONFIG hal_set_reg_led_min_high_config
#define GETTER_FOR_LED_MIN_HIGH_CONFIG hal_get_reg_led_min_high_config
#define GETTER_FOR_LED_MIN_HIGH_CONFIG_STATUS hal_get_reg_led_min_high_config_status
#define SETTER_FOR_LED_MIN_LOW_CONFIG hal_set_reg_led_min_low_config
#define GETTER_FOR_LED_MIN_LOW_CONFIG hal_get_reg_led_min_low_config
#define GETTER_FOR_LED_MIN_LOW_CONFIG_STATUS hal_get_reg_led_min_low_config_status
#define SETTER_FOR_LED_PIN_CONFIG hal_set_reg_led_pin_config
#define GETTER_FOR_LED_PIN_CONFIG hal_get_reg_led_pin_config
#define GETTER_FOR_LED_PIN_CONFIG_STATUS hal_get_reg_led_pin_config_status
#define SETTER_FOR_LED_RAMP_CONFIG hal_set_reg_led_ramp_config
#define GETTER_FOR_LED_RAMP_CONFIG hal_get_reg_led_ramp_config
#define GETTER_FOR_LED_RAMP_CONFIG_STATUS hal_get_reg_led_ramp_config_status
#define SETTER_FOR_LED_RAMP_CURRENT_HIGH_CONFIG hal_set_reg_led_ramp_current_high_config
#define GETTER_FOR_LED_RAMP_CURRENT_HIGH_CONFIG hal_get_reg_led_ramp_current_high_config
#define SETTER_FOR_LED_RAMP_CURRENT_LOW_CONFIG hal_set_reg_led_ramp_current_low_config
#define GETTER_FOR_LED_RAMP_CURRENT_LOW_CONFIG hal_get_reg_led_ramp_current_low_config
#define SETTER_FOR_LED_RAMP_SHIFT hal_set_reg_led_ramp_shift
#define GETTER_FOR_LED_RAMP_SHIFT hal_get_reg_led_ramp_shift
#define SETTER_FOR_LED_SINGLE_SHOT_HIGH_CONFIG hal_set_reg_led_single_shot_high_config
#define GETTER_FOR_LED_SINGLE_SHOT_HIGH_CONFIG hal_get_reg_led_single_shot_high_config
#define SETTER_FOR_LED_SINGLE_SHOT_LOW_CONFIG hal_set_reg_led_single_shot_low_config
#define GETTER_FOR_LED_SINGLE_SHOT_LOW_CONFIG hal_get_reg_led_single_shot_low_config
#define SETTER_FOR_LED_SINGLE_SHOT_MODE hal_set_reg_led_single_shot_mode
#define GETTER_FOR_LED_SINGLE_SHOT_MODE hal_get_reg_led_single_shot_mode
#define SETTER_FOR_LED_START_UP_STATE hal_set_reg_led_start_up_state
#define GETTER_FOR_LED_START_UP_STATE hal_get_reg_led_start_up_state
#define SETTER_FOR_LED_UPDATE hal_set_reg_led_update
#define GETTER_FOR_LED_UPDATE hal_get_reg_led_update

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_LED_CTRL) */
#endif /* __HAL_MACROS_H__MODULE_LED_CTRL */



#if defined(IO_DEFS_MODULE_BITSERIAL1) 

#ifndef __HAL_MACROS_H__MODULE_BITSERIAL1
#define __HAL_MACROS_H__MODULE_BITSERIAL1

/* -- Bitserializer regs -- */

 /* Field BITSERIAL1_BUFF_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_buff_handle_rx_buffer() hal_get_register_field8(BITSERIAL1_RX_BUFFER,BITSERIAL1_BUFF_HANDLE)
#define hal_set_bitserial1_buff_handle_rx_buffer(x) hal_set_register_field(BITSERIAL1_RX_BUFFER,BITSERIAL1_BUFF_HANDLE,(x))
#define hal_get_bitserial1_buff_handle_rx_buffer2() hal_get_register_field8(BITSERIAL1_RX_BUFFER2,BITSERIAL1_BUFF_HANDLE)
#define hal_set_bitserial1_buff_handle_rx_buffer2(x) hal_set_register_field(BITSERIAL1_RX_BUFFER2,BITSERIAL1_BUFF_HANDLE,(x))
#define hal_get_bitserial1_buff_handle_tx_buffer() hal_get_register_field8(BITSERIAL1_TX_BUFFER,BITSERIAL1_BUFF_HANDLE)
#define hal_set_bitserial1_buff_handle_tx_buffer(x) hal_set_register_field(BITSERIAL1_TX_BUFFER,BITSERIAL1_BUFF_HANDLE,(x))
#define hal_get_bitserial1_buff_handle_tx_buffer2() hal_get_register_field8(BITSERIAL1_TX_BUFFER2,BITSERIAL1_BUFF_HANDLE)
#define hal_set_bitserial1_buff_handle_tx_buffer2(x) hal_set_register_field(BITSERIAL1_TX_BUFFER2,BITSERIAL1_BUFF_HANDLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_BUFF_HANDLE BITSERIAL1_BUFFER_ENUM
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_BUFF_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_BUFF_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_BUFF_HANDLE BITSERIAL1_BUFFER_ENUM

 /* Field BITSERIAL1_BUSY */
 /* Accessor macros */
#define hal_get_bitserial1_busy() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL1_BUSY BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_BUSY BITSERIAL1_STATUS

 /* Field BITSERIAL1_CLK_DIVIDE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_clk_divide() hal_get_register_field8(BITSERIAL1_CLK_CONTROL,BITSERIAL1_CLK_DIVIDE)
#define hal_set_bitserial1_clk_divide(x) hal_set_register_field(BITSERIAL1_CLK_CONTROL,BITSERIAL1_CLK_DIVIDE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLK_DIVIDE BITSERIAL1_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLK_DIVIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLK_DIVIDE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLK_DIVIDE BITSERIAL1_CLK_CONTROL

 /* Field BITSERIAL1_CLK_RATE_HI_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_clk_rate_hi() hal_get_register_field16(BITSERIAL1_CLK_RATE_HI,BITSERIAL1_CLK_RATE_HI)
#define hal_set_bitserial1_clk_rate_hi(x) hal_set_register_field(BITSERIAL1_CLK_RATE_HI,BITSERIAL1_CLK_RATE_HI,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLK_RATE_HI BITSERIAL1_CLK_RATE_HI
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLK_RATE_HI(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_RATE_HI, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLK_RATE_HI(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_RATE_HI, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLK_RATE_HI BITSERIAL1_CLK_RATE_HI

 /* Field BITSERIAL1_CLK_RATE_LO_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_clk_rate_lo() hal_get_register_field16(BITSERIAL1_CLK_RATE_LO,BITSERIAL1_CLK_RATE_LO)
#define hal_set_bitserial1_clk_rate_lo(x) hal_set_register_field(BITSERIAL1_CLK_RATE_LO,BITSERIAL1_CLK_RATE_LO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLK_RATE_LO BITSERIAL1_CLK_RATE_LO
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLK_RATE_LO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_RATE_LO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLK_RATE_LO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_RATE_LO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLK_RATE_LO BITSERIAL1_CLK_RATE_LO

 /* Field BITSERIAL1_CLK_SAMP_OFFSET_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_clk_samp_offset() hal_get_register_field16(BITSERIAL1_CLK_SAMP_OFFSET,BITSERIAL1_CLK_SAMP_OFFSET)
#define hal_set_bitserial1_clk_samp_offset(x) hal_set_register_field(BITSERIAL1_CLK_SAMP_OFFSET,BITSERIAL1_CLK_SAMP_OFFSET,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLK_SAMP_OFFSET BITSERIAL1_CLK_SAMP_OFFSET
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLK_SAMP_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_SAMP_OFFSET, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLK_SAMP_OFFSET(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_SAMP_OFFSET, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLK_SAMP_OFFSET BITSERIAL1_CLK_SAMP_OFFSET

 /* Field BITSERIAL1_CLR_SLAVE_READ_FIFO */
 /* Accessor macros */
#define hal_get_bitserial1_clr_slave_read_fifo() hal_get_register_field8(BITSERIAL1_CONFIG3,BITSERIAL1_CLR_SLAVE_READ_FIFO)
#define hal_set_bitserial1_clr_slave_read_fifo(x) hal_set_register_field(BITSERIAL1_CONFIG3,BITSERIAL1_CLR_SLAVE_READ_FIFO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLR_SLAVE_READ_FIFO BITSERIAL1_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLR_SLAVE_READ_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLR_SLAVE_READ_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLR_SLAVE_READ_FIFO BITSERIAL1_CONFIG3

 /* Field BITSERIAL1_CLR_SLAVE_WRITE_FIFO */
 /* Accessor macros */
#define hal_get_bitserial1_clr_slave_write_fifo() hal_get_register_field8(BITSERIAL1_CONFIG3,BITSERIAL1_CLR_SLAVE_WRITE_FIFO)
#define hal_set_bitserial1_clr_slave_write_fifo(x) hal_set_register_field(BITSERIAL1_CONFIG3,BITSERIAL1_CLR_SLAVE_WRITE_FIFO,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CLR_SLAVE_WRITE_FIFO BITSERIAL1_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLR_SLAVE_WRITE_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLR_SLAVE_WRITE_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CLR_SLAVE_WRITE_FIFO BITSERIAL1_CONFIG3

 /* Field BITSERIAL1_CONFIG2_COMBO_MODE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_combo_mode() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_COMBO_MODE)
#define hal_set_bitserial1_config2_combo_mode(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_COMBO_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_COMBO_MODE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_COMBO_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_COMBO_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_COMBO_MODE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_data_ready_word_disable() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE)
#define hal_set_bitserial1_config2_data_ready_word_disable(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_DATA_READY_WORD_DISABLE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_config2_debug_sel() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DEBUG_SEL)
#define hal_set_bitserial1_config2_debug_sel(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_DEBUG_SEL BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_DEBUG_SEL BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT */
 /* Accessor macros */
#define hal_get_bitserial1_config2_disable_underflow_int() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT)
#define hal_set_bitserial1_config2_disable_underflow_int(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_DISABLE_UNDERFLOW_INT BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_DOUT_IDLE_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_config2_dout_idle_sel() ((bitserial1_config2_dout_idle_sel) hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DOUT_IDLE_SEL))
#define hal_set_bitserial1_config2_dout_idle_sel(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_DOUT_IDLE_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_DOUT_IDLE_SEL BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_DOUT_IDLE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_DOUT_IDLE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_DOUT_IDLE_SEL BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_force_sel_active() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE)
#define hal_set_bitserial1_config2_force_sel_active(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_FORCE_SEL_ACTIVE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_i2c_sl_clk_stretch_disable() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE)
#define hal_set_bitserial1_config2_i2c_sl_clk_stretch_disable(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_I2C_SL_CLK_STRETCH_DISABLE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_SEL_EN2 */
 /* Accessor macros */
#define hal_get_bitserial1_config2_sel_en2() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SEL_EN2)
#define hal_set_bitserial1_config2_sel_en2(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SEL_EN2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_SEL_EN2 BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_SEL_EN2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_SEL_EN2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_SEL_EN2 BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_slave_10bit_addr_mode() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE)
#define hal_set_bitserial1_config2_slave_10bit_addr_mode(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_SLAVE_10BIT_ADDR_MODE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config2_slave_any_cmd_byte_en() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN)
#define hal_set_bitserial1_config2_slave_any_cmd_byte_en(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_SLAVE_ANY_CMD_BYTE_EN BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_SLAVE_MODE */
 /* Accessor macros */
#define hal_get_bitserial1_config2_slave_mode() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_MODE)
#define hal_set_bitserial1_config2_slave_mode(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_MODE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_SLAVE_MODE BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_SLAVE_MODE BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH */
 /* Accessor macros */
#define hal_get_bitserial1_config2_slave_read_mode_switch() ((bitserial1_config2_slave_read_mode_switch) hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH))
#define hal_set_bitserial1_config2_slave_read_mode_switch(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_SLAVE_READ_MODE_SWITCH BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2 */
 /* Accessor macros */
#define hal_get_bitserial1_config2_stop_token_disable2() hal_get_register_field8(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2)
#define hal_set_bitserial1_config2_stop_token_disable2(x) hal_set_register_field(BITSERIAL1_CONFIG2,BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2 BITSERIAL1_CONFIG2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG2_STOP_TOKEN_DISABLE2 BITSERIAL1_CONFIG2

 /* Field BITSERIAL1_CONFIG3_ACT_ON_NAK_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_config3_act_on_nak() hal_get_register_field8(BITSERIAL1_CONFIG3,BITSERIAL1_CONFIG3_ACT_ON_NAK)
#define hal_set_bitserial1_config3_act_on_nak(x) hal_set_register_field(BITSERIAL1_CONFIG3,BITSERIAL1_CONFIG3_ACT_ON_NAK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG3_ACT_ON_NAK BITSERIAL1_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG3_ACT_ON_NAK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG3_ACT_ON_NAK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG3_ACT_ON_NAK BITSERIAL1_CONFIG3

 /* Field BITSERIAL1_CONFIG_BITREVERSE_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_bitreverse_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_BITREVERSE_EN)
#define hal_set_bitserial1_config_bitreverse_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_BITREVERSE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_BITREVERSE_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_BITREVERSE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_BITREVERSE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_BITREVERSE_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_BYTESWAP_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_byteswap_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_BYTESWAP_EN)
#define hal_set_bitserial1_config_byteswap_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_BYTESWAP_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_BYTESWAP_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_BYTESWAP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_BYTESWAP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_BYTESWAP_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_CLEAR_STICKY_ACK */
 /* Accessor macros */
#define hal_get_bitserial1_config_clear_sticky_ack() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLEAR_STICKY_ACK)
#define hal_set_bitserial1_config_clear_sticky_ack(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLEAR_STICKY_ACK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_CLEAR_STICKY_ACK BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_CLEAR_STICKY_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_CLEAR_STICKY_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_CLEAR_STICKY_ACK BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_CLK_INVERT */
 /* Accessor macros */
#define hal_get_bitserial1_config_clk_invert() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLK_INVERT)
#define hal_set_bitserial1_config_clk_invert(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLK_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_CLK_INVERT BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_CLK_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_CLK_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_CLK_INVERT BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_CLK_OFFSET_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_clk_offset_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLK_OFFSET_EN)
#define hal_set_bitserial1_config_clk_offset_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_CLK_OFFSET_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_CLK_OFFSET_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_CLK_OFFSET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_CLK_OFFSET_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_CLK_OFFSET_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_DIN_INVERT */
 /* Accessor macros */
#define hal_get_bitserial1_config_din_invert() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_DIN_INVERT)
#define hal_set_bitserial1_config_din_invert(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_DIN_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_DIN_INVERT BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_DIN_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_DIN_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_DIN_INVERT BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_DOUT_INVERT */
 /* Accessor macros */
#define hal_get_bitserial1_config_dout_invert() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_DOUT_INVERT)
#define hal_set_bitserial1_config_dout_invert(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_DOUT_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_DOUT_INVERT BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_DOUT_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_DOUT_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_DOUT_INVERT BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_I2C_MODE_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_i2c_mode_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_I2C_MODE_EN)
#define hal_set_bitserial1_config_i2c_mode_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_I2C_MODE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_I2C_MODE_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_I2C_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_I2C_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_I2C_MODE_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_int_event_curator_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN)
#define hal_set_bitserial1_config_int_event_curator_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_INT_EVENT_CURATOR_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_int_event_subsystem_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN)
#define hal_set_bitserial1_config_int_event_subsystem_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_INT_EVENT_SUBSYSTEM_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_neg_edge_samp_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN)
#define hal_set_bitserial1_config_neg_edge_samp_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_NEG_EDGE_SAMP_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_posedge_launch_mode_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN)
#define hal_set_bitserial1_config_posedge_launch_mode_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_POSEDGE_LAUNCH_MODE_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_SEL_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_sel_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_EN)
#define hal_set_bitserial1_config_sel_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_SEL_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_SEL_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_SEL_INVERT */
 /* Accessor macros */
#define hal_get_bitserial1_config_sel_invert() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_INVERT)
#define hal_set_bitserial1_config_sel_invert(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_INVERT,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_SEL_INVERT BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_SEL_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_SEL_INVERT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_SEL_INVERT BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_SEL_TIME2_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_config_sel_time2() hal_get_register_field8(BITSERIAL1_CONFIG_SEL_TIME2,BITSERIAL1_CONFIG_SEL_TIME2)
#define hal_set_bitserial1_config_sel_time2(x) hal_set_register_field(BITSERIAL1_CONFIG_SEL_TIME2,BITSERIAL1_CONFIG_SEL_TIME2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_SEL_TIME2 BITSERIAL1_CONFIG_SEL_TIME2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG_SEL_TIME2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG_SEL_TIME2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_SEL_TIME2 BITSERIAL1_CONFIG_SEL_TIME2

 /* Field BITSERIAL1_CONFIG_SEL_TIME_EN */
 /* Accessor macros */
#define hal_get_bitserial1_config_sel_time_en() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_TIME_EN)
#define hal_set_bitserial1_config_sel_time_en(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_SEL_TIME_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_SEL_TIME_EN BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_SEL_TIME_EN BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CONFIG_SEL_TIME_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_config_sel_time() hal_get_register_field16(BITSERIAL1_CONFIG_SEL_TIME,BITSERIAL1_CONFIG_SEL_TIME)
#define hal_set_bitserial1_config_sel_time(x) hal_set_register_field(BITSERIAL1_CONFIG_SEL_TIME,BITSERIAL1_CONFIG_SEL_TIME,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_SEL_TIME BITSERIAL1_CONFIG_SEL_TIME
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG_SEL_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_SEL_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG_SEL_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_SEL_TIME BITSERIAL1_CONFIG_SEL_TIME

 /* Field BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE */
 /* Accessor macros */
#define hal_get_bitserial1_config_stop_token_disable() hal_get_register_field8(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE)
#define hal_set_bitserial1_config_stop_token_disable(x) hal_set_register_field(BITSERIAL1_CONFIG,BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE BITSERIAL1_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CONFIG_STOP_TOKEN_DISABLE BITSERIAL1_CONFIG

 /* Field BITSERIAL1_CURATOR_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_curator_ssid() hal_get_register_field8(BITSERIAL1_CURATOR_SSID,BITSERIAL1_CURATOR_SSID)
#define hal_set_bitserial1_curator_ssid(x) hal_set_register_field(BITSERIAL1_CURATOR_SSID,BITSERIAL1_CURATOR_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_CURATOR_SSID BITSERIAL1_CURATOR_SSID
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CURATOR_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CURATOR_SSID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CURATOR_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CURATOR_SSID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_CURATOR_SSID BITSERIAL1_CURATOR_SSID

 /* Field BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_debug_sel_slave_core_sel() hal_get_register_field8(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL)
#define hal_set_bitserial1_debug_sel_slave_core_sel(x) hal_set_register_field(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL BITSERIAL1_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEBUG_SEL_SLAVE_CORE_SEL BITSERIAL1_DEBUG_SEL

 /* Field BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE */
 /* Accessor macros */
#define hal_get_bitserial1_debug_sel_slave_mem_core() hal_get_register_field8(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE)
#define hal_set_bitserial1_debug_sel_slave_mem_core(x) hal_set_register_field(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE BITSERIAL1_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_CORE BITSERIAL1_DEBUG_SEL

 /* Field BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_debug_sel_slave_mem_sel() hal_get_register_field8(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL)
#define hal_set_bitserial1_debug_sel_slave_mem_sel(x) hal_set_register_field(BITSERIAL1_DEBUG_SEL,BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL BITSERIAL1_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEBUG_SEL_SLAVE_MEM_SEL BITSERIAL1_DEBUG_SEL

 /* Field BITSERIAL1_DEEP_SLEEP_ACTIVE */
 /* Accessor macros */
#define hal_get_bitserial1_deep_sleep_active() hal_get_register_field8(BITSERIAL1_DEEP_SLEEP_ACTIVE,BITSERIAL1_DEEP_SLEEP_ACTIVE)
#define hal_set_bitserial1_deep_sleep_active(x) hal_set_register_field(BITSERIAL1_DEEP_SLEEP_ACTIVE,BITSERIAL1_DEEP_SLEEP_ACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEEP_SLEEP_ACTIVE BITSERIAL1_DEEP_SLEEP_ACTIVE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEEP_SLEEP_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEEP_SLEEP_ACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEEP_SLEEP_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEEP_SLEEP_ACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEEP_SLEEP_ACTIVE BITSERIAL1_DEEP_SLEEP_ACTIVE

 /* Field BITSERIAL1_DEEP_SLEEP_CDC_BUSY */
 /* Accessor macros */
#define hal_get_bitserial1_deep_sleep_cdc_busy() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_DEEP_SLEEP_CDC_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEEP_SLEEP_CDC_BUSY BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEEP_SLEEP_CDC_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEEP_SLEEP_CDC_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEEP_SLEEP_CDC_BUSY BITSERIAL1_STATUS

 /* Field BITSERIAL1_DEGLITCH_EN_CLOCK */
 /* Accessor macros */
#define hal_get_bitserial1_deglitch_en_clock() hal_get_register_field8(BITSERIAL1_DEGLITCH_EN,BITSERIAL1_DEGLITCH_EN_CLOCK)
#define hal_set_bitserial1_deglitch_en_clock(x) hal_set_register_field(BITSERIAL1_DEGLITCH_EN,BITSERIAL1_DEGLITCH_EN_CLOCK,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEGLITCH_EN_CLOCK BITSERIAL1_DEGLITCH_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEGLITCH_EN_CLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEGLITCH_EN_CLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEGLITCH_EN_CLOCK BITSERIAL1_DEGLITCH_EN

 /* Field BITSERIAL1_DEGLITCH_EN_DATA */
 /* Accessor macros */
#define hal_get_bitserial1_deglitch_en_data() hal_get_register_field8(BITSERIAL1_DEGLITCH_EN,BITSERIAL1_DEGLITCH_EN_DATA)
#define hal_set_bitserial1_deglitch_en_data(x) hal_set_register_field(BITSERIAL1_DEGLITCH_EN,BITSERIAL1_DEGLITCH_EN_DATA,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_DEGLITCH_EN_DATA BITSERIAL1_DEGLITCH_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEGLITCH_EN_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEGLITCH_EN_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_DEGLITCH_EN_DATA BITSERIAL1_DEGLITCH_EN

 /* Field BITSERIAL1_EVENT */
 /* Accessor macros */
#define hal_get_bitserial1_event() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_EVENT)
 /* Workings */
#define TYPE_OF_BITSERIAL1_EVENT BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_EVENT BITSERIAL1_STATUS

 /* Field BITSERIAL1_FAILED */
 /* Accessor macros */
#define hal_get_bitserial1_failed() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_FAILED)
 /* Workings */
#define TYPE_OF_BITSERIAL1_FAILED BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_FAILED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_FAILED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_FAILED BITSERIAL1_STATUS

 /* Field BITSERIAL1_FIFO_OVERFLOW */
 /* Accessor macros */
#define hal_get_bitserial1_fifo_overflow() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_FIFO_OVERFLOW)
 /* Workings */
#define TYPE_OF_BITSERIAL1_FIFO_OVERFLOW BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_FIFO_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_FIFO_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_FIFO_OVERFLOW BITSERIAL1_STATUS

 /* Field BITSERIAL1_FIFO_UNDERFLOW */
 /* Accessor macros */
#define hal_get_bitserial1_fifo_underflow() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_FIFO_UNDERFLOW)
 /* Workings */
#define TYPE_OF_BITSERIAL1_FIFO_UNDERFLOW BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_FIFO_UNDERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_FIFO_UNDERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_FIFO_UNDERFLOW BITSERIAL1_STATUS

 /* Field BITSERIAL1_I2C_ACKS_HISTORY_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_acks_history() hal_get_register_field16(BITSERIAL1_I2C_ACKS,BITSERIAL1_I2C_ACKS_HISTORY)
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_ACKS_HISTORY BITSERIAL1_I2C_ACKS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_ACKS_HISTORY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_ACKS_HISTORY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_ACKS_HISTORY BITSERIAL1_I2C_ACKS

 /* Field BITSERIAL1_I2C_ACKS_STICKY */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_acks_sticky() hal_get_register_field8(BITSERIAL1_I2C_ACKS,BITSERIAL1_I2C_ACKS_STICKY)
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_ACKS_STICKY BITSERIAL1_I2C_ACKS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_ACKS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_ACKS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_ACKS_STICKY BITSERIAL1_I2C_ACKS

 /* Field BITSERIAL1_I2C_ADDRESS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_address() hal_get_register_field16(BITSERIAL1_I2C_ADDRESS,BITSERIAL1_I2C_ADDRESS)
#define hal_set_bitserial1_i2c_address(x) hal_set_register_field(BITSERIAL1_I2C_ADDRESS,BITSERIAL1_I2C_ADDRESS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_ADDRESS BITSERIAL1_I2C_ADDRESS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_ADDRESS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ADDRESS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_ADDRESS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ADDRESS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_ADDRESS BITSERIAL1_I2C_ADDRESS

 /* Field BITSERIAL1_I2C_BUS_BUSY */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_bus_busy() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_I2C_BUS_BUSY)
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_BUS_BUSY BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_BUS_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_BUS_BUSY(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_BUS_BUSY BITSERIAL1_STATUS

 /* Field BITSERIAL1_I2C_LOST_ARBITRATION */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_lost_arbitration() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_I2C_LOST_ARBITRATION)
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_LOST_ARBITRATION BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_LOST_ARBITRATION(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_LOST_ARBITRATION(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_LOST_ARBITRATION BITSERIAL1_STATUS

 /* Field BITSERIAL1_I2C_NACK */
 /* Accessor macros */
#define hal_get_bitserial1_i2c_nack() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_I2C_NACK)
 /* Workings */
#define TYPE_OF_BITSERIAL1_I2C_NACK BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_NACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_NACK(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_I2C_NACK BITSERIAL1_STATUS

 /* Field BITSERIAL1_INTERBYTE_SPACING_CYCLES_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interbyte_spacing_cycles() hal_get_register_field16(BITSERIAL1_INTERBYTE_SPACING,BITSERIAL1_INTERBYTE_SPACING_CYCLES)
#define hal_set_bitserial1_interbyte_spacing_cycles(x) hal_set_register_field(BITSERIAL1_INTERBYTE_SPACING,BITSERIAL1_INTERBYTE_SPACING_CYCLES,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERBYTE_SPACING_CYCLES BITSERIAL1_INTERBYTE_SPACING
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERBYTE_SPACING_CYCLES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERBYTE_SPACING_CYCLES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERBYTE_SPACING_CYCLES BITSERIAL1_INTERBYTE_SPACING

 /* Field BITSERIAL1_INTERBYTE_SPACING_EN */
 /* Accessor macros */
#define hal_get_bitserial1_interbyte_spacing_en() hal_get_register_field8(BITSERIAL1_INTERBYTE_SPACING,BITSERIAL1_INTERBYTE_SPACING_EN)
#define hal_set_bitserial1_interbyte_spacing_en(x) hal_set_register_field(BITSERIAL1_INTERBYTE_SPACING,BITSERIAL1_INTERBYTE_SPACING_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERBYTE_SPACING_EN BITSERIAL1_INTERBYTE_SPACING
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERBYTE_SPACING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERBYTE_SPACING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERBYTE_SPACING_EN BITSERIAL1_INTERBYTE_SPACING

 /* Field BITSERIAL1_INTERRUPT_CLEAR_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interrupt_clear() hal_get_register_field16(BITSERIAL1_INTERRUPT_CLEAR,BITSERIAL1_INTERRUPT_CLEAR)
#define hal_set_bitserial1_interrupt_clear(x) hal_set_register_field(BITSERIAL1_INTERRUPT_CLEAR,BITSERIAL1_INTERRUPT_CLEAR,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERRUPT_CLEAR BITSERIAL1_INTERRUPT_CLEAR
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERRUPT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERRUPT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERRUPT_CLEAR BITSERIAL1_INTERRUPT_CLEAR

 /* Field BITSERIAL1_INTERRUPT_EN_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interrupt_en() hal_get_register_field16(BITSERIAL1_INTERRUPT_EN,BITSERIAL1_INTERRUPT_EN)
#define hal_set_bitserial1_interrupt_en(x) hal_set_register_field(BITSERIAL1_INTERRUPT_EN,BITSERIAL1_INTERRUPT_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERRUPT_EN BITSERIAL1_INTERRUPT_EN
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERRUPT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERRUPT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERRUPT_EN BITSERIAL1_INTERRUPT_EN

 /* Field BITSERIAL1_INTERRUPT_SOURCE_CLEAR_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interrupt_source_clear() hal_get_register_field16(BITSERIAL1_INTERRUPT_SOURCE_CLEAR,BITSERIAL1_INTERRUPT_SOURCE_CLEAR)
#define hal_set_bitserial1_interrupt_source_clear(x) hal_set_register_field(BITSERIAL1_INTERRUPT_SOURCE_CLEAR,BITSERIAL1_INTERRUPT_SOURCE_CLEAR,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERRUPT_SOURCE_CLEAR BITSERIAL1_INTERRUPT_SOURCE_CLEAR
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERRUPT_SOURCE_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_SOURCE_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERRUPT_SOURCE_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_SOURCE_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERRUPT_SOURCE_CLEAR BITSERIAL1_INTERRUPT_SOURCE_CLEAR

 /* Field BITSERIAL1_INTERRUPT_SOURCE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interrupt_source() hal_get_register_field16(BITSERIAL1_INTERRUPT_SOURCE,BITSERIAL1_INTERRUPT_SOURCE)
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERRUPT_SOURCE BITSERIAL1_INTERRUPT_SOURCE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERRUPT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_SOURCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERRUPT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_SOURCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERRUPT_SOURCE BITSERIAL1_INTERRUPT_SOURCE

 /* Field BITSERIAL1_INTERRUPT_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_interrupt_status() hal_get_register_field16(BITSERIAL1_INTERRUPT_STATUS,BITSERIAL1_INTERRUPT_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL1_INTERRUPT_STATUS BITSERIAL1_INTERRUPT_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERRUPT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERRUPT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERRUPT_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_INTERRUPT_STATUS BITSERIAL1_INTERRUPT_STATUS

 /* Field BITSERIAL1_MAIN_CLK_REQ_EN */
 /* Accessor macros */
#define hal_get_bitserial1_main_clk_req_en() hal_get_register_field8(BITSERIAL1_CLK_CONTROL,BITSERIAL1_MAIN_CLK_REQ_EN)
#define hal_set_bitserial1_main_clk_req_en(x) hal_set_register_field(BITSERIAL1_CLK_CONTROL,BITSERIAL1_MAIN_CLK_REQ_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_MAIN_CLK_REQ_EN BITSERIAL1_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_MAIN_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_MAIN_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_MAIN_CLK_REQ_EN BITSERIAL1_CLK_CONTROL

 /* Field BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN */
 /* Accessor macros */
#define hal_get_bitserial1_master_slave_clk_req_en() hal_get_register_field8(BITSERIAL1_CLK_CONTROL,BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN)
#define hal_set_bitserial1_master_slave_clk_req_en(x) hal_set_register_field(BITSERIAL1_CLK_CONTROL,BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN BITSERIAL1_CLK_CONTROL
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_MASTER_SLAVE_CLK_REQ_EN BITSERIAL1_CLK_CONTROL

 /* Field BITSERIAL1_PART_2 */
 /* Accessor macros */
#define hal_get_bitserial1_part_2() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_PART_2)
 /* Workings */
#define TYPE_OF_BITSERIAL1_PART_2 BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_PART_2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_PART_2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_PART_2 BITSERIAL1_STATUS

 /* Field BITSERIAL1_READ_RESP_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_read_resp_status() hal_get_register_field8(BITSERIAL1_ERROR_STATUS,BITSERIAL1_READ_RESP_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL1_READ_RESP_STATUS BITSERIAL1_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_READ_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_READ_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_READ_RESP_STATUS BITSERIAL1_ERROR_STATUS

 /* Field BITSERIAL1_REMOTE_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_remote_ssid_rx_buffer() hal_get_register_field8(BITSERIAL1_RX_BUFFER,BITSERIAL1_REMOTE_SSID)
#define hal_set_bitserial1_remote_ssid_rx_buffer(x) hal_set_register_field(BITSERIAL1_RX_BUFFER,BITSERIAL1_REMOTE_SSID,(x))
#define hal_get_bitserial1_remote_ssid_rx_buffer2() hal_get_register_field8(BITSERIAL1_RX_BUFFER2,BITSERIAL1_REMOTE_SSID)
#define hal_set_bitserial1_remote_ssid_rx_buffer2(x) hal_set_register_field(BITSERIAL1_RX_BUFFER2,BITSERIAL1_REMOTE_SSID,(x))
#define hal_get_bitserial1_remote_ssid_tx_buffer() hal_get_register_field8(BITSERIAL1_TX_BUFFER,BITSERIAL1_REMOTE_SSID)
#define hal_set_bitserial1_remote_ssid_tx_buffer(x) hal_set_register_field(BITSERIAL1_TX_BUFFER,BITSERIAL1_REMOTE_SSID,(x))
#define hal_get_bitserial1_remote_ssid_tx_buffer2() hal_get_register_field8(BITSERIAL1_TX_BUFFER2,BITSERIAL1_REMOTE_SSID)
#define hal_set_bitserial1_remote_ssid_tx_buffer2(x) hal_set_register_field(BITSERIAL1_TX_BUFFER2,BITSERIAL1_REMOTE_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_REMOTE_SSID BITSERIAL1_BUFFER_ENUM
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_REMOTE_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_REMOTE_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_REMOTE_SSID BITSERIAL1_BUFFER_ENUM

 /* Field BITSERIAL1_REMOTE_SUBSYSTEM_SSID_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_remote_subsystem_ssid() hal_get_register_field8(BITSERIAL1_REMOTE_SUBSYSTEM_SSID,BITSERIAL1_REMOTE_SUBSYSTEM_SSID)
#define hal_set_bitserial1_remote_subsystem_ssid(x) hal_set_register_field(BITSERIAL1_REMOTE_SUBSYSTEM_SSID,BITSERIAL1_REMOTE_SUBSYSTEM_SSID,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_REMOTE_SUBSYSTEM_SSID BITSERIAL1_REMOTE_SUBSYSTEM_SSID
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_REMOTE_SUBSYSTEM_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_REMOTE_SUBSYSTEM_SSID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_REMOTE_SUBSYSTEM_SSID(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_REMOTE_SUBSYSTEM_SSID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_REMOTE_SUBSYSTEM_SSID BITSERIAL1_REMOTE_SUBSYSTEM_SSID

 /* Field BITSERIAL1_RWB */
 /* Accessor macros */
#define hal_get_bitserial1_rwb() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_RWB)
 /* Workings */
#define TYPE_OF_BITSERIAL1_RWB BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_RWB(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_RWB(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_RWB BITSERIAL1_STATUS

 /* Field BITSERIAL1_SET_SEL_INACTIVE */
 /* Accessor macros */
#define hal_get_bitserial1_set_sel_inactive() hal_get_register_field8(BITSERIAL1_SET_SEL_INACTIVE,BITSERIAL1_SET_SEL_INACTIVE)
#define hal_set_bitserial1_set_sel_inactive(x) hal_set_register_field(BITSERIAL1_SET_SEL_INACTIVE,BITSERIAL1_SET_SEL_INACTIVE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_SET_SEL_INACTIVE BITSERIAL1_SET_SEL_INACTIVE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SET_SEL_INACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SET_SEL_INACTIVE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SET_SEL_INACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SET_SEL_INACTIVE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SET_SEL_INACTIVE BITSERIAL1_SET_SEL_INACTIVE

 /* Field BITSERIAL1_SLAVE_DATA_READY_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_data_ready_byte() hal_get_register_field8(BITSERIAL1_SLAVE_DATA_READY_BYTE,BITSERIAL1_SLAVE_DATA_READY_BYTE)
#define hal_set_bitserial1_slave_data_ready_byte(x) hal_set_register_field(BITSERIAL1_SLAVE_DATA_READY_BYTE,BITSERIAL1_SLAVE_DATA_READY_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_DATA_READY_BYTE BITSERIAL1_SLAVE_DATA_READY_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_DATA_READY_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_DATA_READY_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_DATA_READY_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_DATA_READY_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_DATA_READY_BYTE BITSERIAL1_SLAVE_DATA_READY_BYTE

 /* Field BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_num_protocol_words() hal_get_register_field16(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS,BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS)
#define hal_set_bitserial1_slave_num_protocol_words(x) hal_set_register_field(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS,BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS

 /* Field BITSERIAL1_SLAVE_READ_COMMAND_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_read_command_byte() hal_get_register_field8(BITSERIAL1_SLAVE_READ_COMMAND_BYTE,BITSERIAL1_SLAVE_READ_COMMAND_BYTE)
#define hal_set_bitserial1_slave_read_command_byte(x) hal_set_register_field(BITSERIAL1_SLAVE_READ_COMMAND_BYTE,BITSERIAL1_SLAVE_READ_COMMAND_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_READ_COMMAND_BYTE BITSERIAL1_SLAVE_READ_COMMAND_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_READ_COMMAND_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_READ_COMMAND_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_READ_COMMAND_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_READ_COMMAND_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_READ_COMMAND_BYTE BITSERIAL1_SLAVE_READ_COMMAND_BYTE

 /* Field BITSERIAL1_SLAVE_READ_COUNT_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_read_count() hal_get_register_field16(BITSERIAL1_SLAVE_READ_COUNT,BITSERIAL1_SLAVE_READ_COUNT)
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_READ_COUNT BITSERIAL1_SLAVE_READ_COUNT
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_READ_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_READ_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_READ_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_READ_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_READ_COUNT BITSERIAL1_SLAVE_READ_COUNT

 /* Field BITSERIAL1_SLAVE_START_STOP_BITS_ERROR */
 /* Accessor macros */
#define hal_get_bitserial1_slave_start_stop_bits_error() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_SLAVE_START_STOP_BITS_ERROR)
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_START_STOP_BITS_ERROR BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_START_STOP_BITS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_START_STOP_BITS_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_START_STOP_BITS_ERROR BITSERIAL1_STATUS

 /* Field BITSERIAL1_SLAVE_UNDERFLOW_BYTE_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_underflow_byte() hal_get_register_field8(BITSERIAL1_SLAVE_UNDERFLOW_BYTE,BITSERIAL1_SLAVE_UNDERFLOW_BYTE)
#define hal_set_bitserial1_slave_underflow_byte(x) hal_set_register_field(BITSERIAL1_SLAVE_UNDERFLOW_BYTE,BITSERIAL1_SLAVE_UNDERFLOW_BYTE,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_UNDERFLOW_BYTE BITSERIAL1_SLAVE_UNDERFLOW_BYTE
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_UNDERFLOW_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_UNDERFLOW_BYTE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_UNDERFLOW_BYTE(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_UNDERFLOW_BYTE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_UNDERFLOW_BYTE BITSERIAL1_SLAVE_UNDERFLOW_BYTE

 /* Field BITSERIAL1_SLAVE_WRITE_COUNT_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_slave_write_count() hal_get_register_field16(BITSERIAL1_SLAVE_WRITE_COUNT,BITSERIAL1_SLAVE_WRITE_COUNT)
 /* Workings */
#define TYPE_OF_BITSERIAL1_SLAVE_WRITE_COUNT BITSERIAL1_SLAVE_WRITE_COUNT
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_SLAVE_WRITE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_WRITE_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_SLAVE_WRITE_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_SLAVE_WRITE_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_SLAVE_WRITE_COUNT BITSERIAL1_SLAVE_WRITE_COUNT

 /* Field BITSERIAL1_STREAMING_EN */
 /* Accessor macros */
#define hal_get_bitserial1_streaming_en() hal_get_register_field8(BITSERIAL1_CONFIG3,BITSERIAL1_STREAMING_EN)
#define hal_set_bitserial1_streaming_en(x) hal_set_register_field(BITSERIAL1_CONFIG3,BITSERIAL1_STREAMING_EN,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_STREAMING_EN BITSERIAL1_CONFIG3
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_STREAMING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_STREAMING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_STREAMING_EN BITSERIAL1_CONFIG3

 /* Field BITSERIAL1_STREAMING_THRESHOLD_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_streaming_threshold() hal_get_register_field16(BITSERIAL1_STREAMING_THRESHOLD,BITSERIAL1_STREAMING_THRESHOLD)
#define hal_set_bitserial1_streaming_threshold(x) hal_set_register_field(BITSERIAL1_STREAMING_THRESHOLD,BITSERIAL1_STREAMING_THRESHOLD,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_STREAMING_THRESHOLD BITSERIAL1_STREAMING_THRESHOLD
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_STREAMING_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STREAMING_THRESHOLD, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_STREAMING_THRESHOLD(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STREAMING_THRESHOLD, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_STREAMING_THRESHOLD BITSERIAL1_STREAMING_THRESHOLD

 /* Field BITSERIAL1_TRANSACTION_PART2 */
 /* Accessor macros */
#define hal_get_bitserial1_transaction_part2() hal_get_register_field8(BITSERIAL1_ERROR_STATUS,BITSERIAL1_TRANSACTION_PART2)
 /* Workings */
#define TYPE_OF_BITSERIAL1_TRANSACTION_PART2 BITSERIAL1_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TRANSACTION_PART2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TRANSACTION_PART2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_TRANSACTION_PART2 BITSERIAL1_ERROR_STATUS

 /* Field BITSERIAL1_TXRX_LENGTH2_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_txrx_length2() hal_get_register_field16(BITSERIAL1_TXRX_LENGTH2,BITSERIAL1_TXRX_LENGTH2)
#define hal_set_bitserial1_txrx_length2(x) hal_set_register_field(BITSERIAL1_TXRX_LENGTH2,BITSERIAL1_TXRX_LENGTH2,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_TXRX_LENGTH2 BITSERIAL1_TXRX_LENGTH2
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TXRX_LENGTH2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TXRX_LENGTH2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TXRX_LENGTH2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TXRX_LENGTH2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_TXRX_LENGTH2 BITSERIAL1_TXRX_LENGTH2

 /* Field BITSERIAL1_TXRX_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_txrx_length() hal_get_register_field16(BITSERIAL1_TXRX_LENGTH,BITSERIAL1_TXRX_LENGTH)
#define hal_set_bitserial1_txrx_length(x) hal_set_register_field(BITSERIAL1_TXRX_LENGTH,BITSERIAL1_TXRX_LENGTH,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_TXRX_LENGTH BITSERIAL1_TXRX_LENGTH
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TXRX_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TXRX_LENGTH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TXRX_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TXRX_LENGTH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_TXRX_LENGTH BITSERIAL1_TXRX_LENGTH

 /* Field BITSERIAL1_TX_NOT_CONFIGURED */
 /* Accessor macros */
#define hal_get_bitserial1_tx_not_configured() hal_get_register_field8(BITSERIAL1_STATUS,BITSERIAL1_TX_NOT_CONFIGURED)
 /* Workings */
#define TYPE_OF_BITSERIAL1_TX_NOT_CONFIGURED BITSERIAL1_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TX_NOT_CONFIGURED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TX_NOT_CONFIGURED(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_TX_NOT_CONFIGURED BITSERIAL1_STATUS

 /* Field BITSERIAL1_VML_RESP_STATUS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_vml_resp_status() hal_get_register_field8(BITSERIAL1_ERROR_STATUS,BITSERIAL1_VML_RESP_STATUS)
 /* Workings */
#define TYPE_OF_BITSERIAL1_VML_RESP_STATUS BITSERIAL1_ERROR_STATUS
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_VML_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_VML_RESP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_VML_RESP_STATUS BITSERIAL1_ERROR_STATUS

 /* Field BITSERIAL1_WORDS_SENT_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_words_sent() hal_get_register_field16(BITSERIAL1_WORDS_SENT,BITSERIAL1_WORDS_SENT)
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORDS_SENT BITSERIAL1_WORDS_SENT
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORDS_SENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORDS_SENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORDS_SENT(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORDS_SENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORDS_SENT BITSERIAL1_WORDS_SENT

 /* Field BITSERIAL1_WORD_CONFIG_NUM_BYTES_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_word_config_num_bytes() hal_get_register_field8(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_BYTES)
#define hal_set_bitserial1_word_config_num_bytes(x) hal_set_register_field(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_BYTES,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORD_CONFIG_NUM_BYTES BITSERIAL1_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_BYTES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_BYTES(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORD_CONFIG_NUM_BYTES BITSERIAL1_WORD_CONFIG

 /* Field BITSERIAL1_WORD_CONFIG_NUM_START_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_word_config_num_start() hal_get_register_field8(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_START)
#define hal_set_bitserial1_word_config_num_start(x) hal_set_register_field(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_START,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORD_CONFIG_NUM_START BITSERIAL1_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_START(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_START(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORD_CONFIG_NUM_START BITSERIAL1_WORD_CONFIG

 /* Field BITSERIAL1_WORD_CONFIG_NUM_STOP_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_word_config_num_stop() hal_get_register_field8(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_STOP)
#define hal_set_bitserial1_word_config_num_stop(x) hal_set_register_field(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_NUM_STOP,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORD_CONFIG_NUM_STOP BITSERIAL1_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_STOP(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG_NUM_STOP(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORD_CONFIG_NUM_STOP BITSERIAL1_WORD_CONFIG

 /* Field BITSERIAL1_WORD_CONFIG_START_BITS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_word_config_start_bits() hal_get_register_field8(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_START_BITS)
#define hal_set_bitserial1_word_config_start_bits(x) hal_set_register_field(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_START_BITS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORD_CONFIG_START_BITS BITSERIAL1_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG_START_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG_START_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORD_CONFIG_START_BITS BITSERIAL1_WORD_CONFIG

 /* Field BITSERIAL1_WORD_CONFIG_STOP_BITS_LSB */
 /* Accessor macros */
#define hal_get_bitserial1_word_config_stop_bits() hal_get_register_field8(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_STOP_BITS)
#define hal_set_bitserial1_word_config_stop_bits(x) hal_set_register_field(BITSERIAL1_WORD_CONFIG,BITSERIAL1_WORD_CONFIG_STOP_BITS,(x))
 /* Workings */
#define TYPE_OF_BITSERIAL1_WORD_CONFIG_STOP_BITS BITSERIAL1_WORD_CONFIG
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG_STOP_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG_STOP_BITS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITSERIAL1_WORD_CONFIG_STOP_BITS BITSERIAL1_WORD_CONFIG

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_BITSERIAL1_BUFFER_ENUM_BITSERIAL1_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL1_BUFFER_ENUM_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_CONTROL_BITSERIAL1_CLK_CONTROL
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_CONTROL_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_RATE_HI_BITSERIAL1_CLK_RATE_HI
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_RATE_HI_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_RATE_LO_BITSERIAL1_CLK_RATE_LO
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_RATE_LO_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_SAMP_OFFSET_BITSERIAL1_CLK_SAMP_OFFSET
#define CHECK_FIELD_TYPE_BITSERIAL1_CLK_SAMP_OFFSET_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_BITSERIAL1_CONFIG
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG2_BITSERIAL1_CONFIG2
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG2_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG3_BITSERIAL1_CONFIG3
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG3_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_SEL_TIME_BITSERIAL1_CONFIG_SEL_TIME
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_SEL_TIME_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_SEL_TIME2_BITSERIAL1_CONFIG_SEL_TIME2
#define CHECK_FIELD_TYPE_BITSERIAL1_CONFIG_SEL_TIME2_END
#define CHECK_FIELD_TYPE_BITSERIAL1_CURATOR_SSID_BITSERIAL1_CURATOR_SSID
#define CHECK_FIELD_TYPE_BITSERIAL1_CURATOR_SSID_END
#define CHECK_FIELD_TYPE_BITSERIAL1_DEBUG_SEL_BITSERIAL1_DEBUG_SEL
#define CHECK_FIELD_TYPE_BITSERIAL1_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_BITSERIAL1_DEEP_SLEEP_ACTIVE_BITSERIAL1_DEEP_SLEEP_ACTIVE
#define CHECK_FIELD_TYPE_BITSERIAL1_DEEP_SLEEP_ACTIVE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_DEGLITCH_EN_BITSERIAL1_DEGLITCH_EN
#define CHECK_FIELD_TYPE_BITSERIAL1_DEGLITCH_EN_END
#define CHECK_FIELD_TYPE_BITSERIAL1_ERROR_STATUS_BITSERIAL1_ERROR_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL1_ERROR_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_I2C_ACKS_BITSERIAL1_I2C_ACKS
#define CHECK_FIELD_TYPE_BITSERIAL1_I2C_ACKS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_I2C_ADDRESS_BITSERIAL1_I2C_ADDRESS
#define CHECK_FIELD_TYPE_BITSERIAL1_I2C_ADDRESS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERBYTE_SPACING_BITSERIAL1_INTERBYTE_SPACING
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERBYTE_SPACING_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_CLEAR_BITSERIAL1_INTERRUPT_CLEAR
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_CLEAR_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_EN_BITSERIAL1_INTERRUPT_EN
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_EN_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_SOURCE_BITSERIAL1_INTERRUPT_SOURCE
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_SOURCE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_SOURCE_CLEAR_BITSERIAL1_INTERRUPT_SOURCE_CLEAR
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_SOURCE_CLEAR_END
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_STATUS_BITSERIAL1_INTERRUPT_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL1_INTERRUPT_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_REMOTE_SUBSYSTEM_SSID_BITSERIAL1_REMOTE_SUBSYSTEM_SSID
#define CHECK_FIELD_TYPE_BITSERIAL1_REMOTE_SUBSYSTEM_SSID_END
#define CHECK_FIELD_TYPE_BITSERIAL1_RX_BUFFER_BITSERIAL1_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL1_RX_BUFFER_END
#define CHECK_FIELD_TYPE_BITSERIAL1_RX_BUFFER2_BITSERIAL1_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL1_RX_BUFFER2_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SET_SEL_INACTIVE_BITSERIAL1_SET_SEL_INACTIVE
#define CHECK_FIELD_TYPE_BITSERIAL1_SET_SEL_INACTIVE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_DATA_READY_BYTE_BITSERIAL1_SLAVE_DATA_READY_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_DATA_READY_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_READ_COMMAND_BYTE_BITSERIAL1_SLAVE_READ_COMMAND_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_READ_COMMAND_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_READ_COUNT_BITSERIAL1_SLAVE_READ_COUNT
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_READ_COUNT_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_UNDERFLOW_BYTE_BITSERIAL1_SLAVE_UNDERFLOW_BYTE
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_UNDERFLOW_BYTE_END
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_WRITE_COUNT_BITSERIAL1_SLAVE_WRITE_COUNT
#define CHECK_FIELD_TYPE_BITSERIAL1_SLAVE_WRITE_COUNT_END
#define CHECK_FIELD_TYPE_BITSERIAL1_STATUS_BITSERIAL1_STATUS
#define CHECK_FIELD_TYPE_BITSERIAL1_STATUS_END
#define CHECK_FIELD_TYPE_BITSERIAL1_STREAMING_THRESHOLD_BITSERIAL1_STREAMING_THRESHOLD
#define CHECK_FIELD_TYPE_BITSERIAL1_STREAMING_THRESHOLD_END
#define CHECK_FIELD_TYPE_BITSERIAL1_TXRX_LENGTH_BITSERIAL1_TXRX_LENGTH
#define CHECK_FIELD_TYPE_BITSERIAL1_TXRX_LENGTH_END
#define CHECK_FIELD_TYPE_BITSERIAL1_TXRX_LENGTH2_BITSERIAL1_TXRX_LENGTH2
#define CHECK_FIELD_TYPE_BITSERIAL1_TXRX_LENGTH2_END
#define CHECK_FIELD_TYPE_BITSERIAL1_TX_BUFFER_BITSERIAL1_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL1_TX_BUFFER_END
#define CHECK_FIELD_TYPE_BITSERIAL1_TX_BUFFER2_BITSERIAL1_BUFFER_ENUM
#define CHECK_FIELD_TYPE_BITSERIAL1_TX_BUFFER2_END
#define CHECK_FIELD_TYPE_BITSERIAL1_WORDS_SENT_BITSERIAL1_WORDS_SENT
#define CHECK_FIELD_TYPE_BITSERIAL1_WORDS_SENT_END
#define CHECK_FIELD_TYPE_BITSERIAL1_WORD_CONFIG_BITSERIAL1_WORD_CONFIG
#define CHECK_FIELD_TYPE_BITSERIAL1_WORD_CONFIG_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_BUFFER_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_BUFFER_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_BUFFER_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CLK_CONTROL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CLK_CONTROL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_CONFIG3(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_CONFIG3(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_CONFIG3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_DEGLITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_DEGLITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_DEGLITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_ERROR_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_ERROR_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_ERROR_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_I2C_ACKS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_I2C_ACKS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_I2C_ACKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_INTERBYTE_SPACING(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_INTERBYTE_SPACING(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_INTERBYTE_SPACING, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_RX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_RX_BUFFER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_RX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_RX_BUFFER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_RX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_RX_BUFFER2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_RX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_RX_BUFFER2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TX_BUFFER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TX_BUFFER(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TX_BUFFER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_TX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TX_BUFFER2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_TX_BUFFER2(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_TX_BUFFER2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BITSERIAL1_WORD_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITSERIAL1_WORD_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BITSERIAL1_WORD_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define BITSERIAL1_CLK_CONTROL_REG_BITS (10u)
#define hal_set_reg_bitserial1_clk_control(x) hal_set_register(BITSERIAL1_CLK_CONTROL, x, 1)
#define hal_get_reg_bitserial1_clk_control() hal_get_register(BITSERIAL1_CLK_CONTROL, 1)
#define BITSERIAL1_CLK_RATE_HI_REG_BITS (16u)
#define hal_set_reg_bitserial1_clk_rate_hi(x) hal_set_register(BITSERIAL1_CLK_RATE_HI, x, 1)
#define hal_get_reg_bitserial1_clk_rate_hi() hal_get_register(BITSERIAL1_CLK_RATE_HI, 1)
#define BITSERIAL1_CLK_RATE_LO_REG_BITS (16u)
#define hal_set_reg_bitserial1_clk_rate_lo(x) hal_set_register(BITSERIAL1_CLK_RATE_LO, x, 1)
#define hal_get_reg_bitserial1_clk_rate_lo() hal_get_register(BITSERIAL1_CLK_RATE_LO, 1)
#define BITSERIAL1_CLK_SAMP_OFFSET_REG_BITS (16u)
#define hal_set_reg_bitserial1_clk_samp_offset(x) hal_set_register(BITSERIAL1_CLK_SAMP_OFFSET, x, 1)
#define hal_get_reg_bitserial1_clk_samp_offset() hal_get_register(BITSERIAL1_CLK_SAMP_OFFSET, 1)
#define BITSERIAL1_CONFIG_REG_BITS (16u)
#define hal_set_reg_bitserial1_config(x) hal_set_register(BITSERIAL1_CONFIG, x, 1)
#define hal_get_reg_bitserial1_config() hal_get_register(BITSERIAL1_CONFIG, 1)
#define BITSERIAL1_CONFIG2_REG_BITS (15u)
#define hal_set_reg_bitserial1_config2(x) hal_set_register(BITSERIAL1_CONFIG2, x, 1)
#define hal_get_reg_bitserial1_config2() hal_get_register(BITSERIAL1_CONFIG2, 1)
#define BITSERIAL1_CONFIG3_REG_BITS (5u)
#define hal_set_reg_bitserial1_config3(x) hal_set_register(BITSERIAL1_CONFIG3, x, 1)
#define hal_get_reg_bitserial1_config3() hal_get_register(BITSERIAL1_CONFIG3, 1)
#define BITSERIAL1_CONFIG_SEL_TIME_REG_BITS (16u)
#define hal_set_reg_bitserial1_config_sel_time(x) hal_set_register(BITSERIAL1_CONFIG_SEL_TIME, x, 1)
#define hal_get_reg_bitserial1_config_sel_time() hal_get_register(BITSERIAL1_CONFIG_SEL_TIME, 1)
#define BITSERIAL1_CONFIG_SEL_TIME2_REG_BITS (4u)
#define hal_set_reg_bitserial1_config_sel_time2(x) hal_set_register(BITSERIAL1_CONFIG_SEL_TIME2, x, 1)
#define hal_get_reg_bitserial1_config_sel_time2() hal_get_register(BITSERIAL1_CONFIG_SEL_TIME2, 1)
#define BITSERIAL1_CURATOR_SSID_REG_BITS (4u)
#define hal_set_reg_bitserial1_curator_ssid(x) hal_set_register(BITSERIAL1_CURATOR_SSID, x, 1)
#define hal_get_reg_bitserial1_curator_ssid() hal_get_register(BITSERIAL1_CURATOR_SSID, 1)
#define BITSERIAL1_DEBUG_SEL_REG_BITS (9u)
#define hal_set_reg_bitserial1_debug_sel(x) hal_set_register(BITSERIAL1_DEBUG_SEL, x, 1)
#define hal_get_reg_bitserial1_debug_sel() hal_get_register(BITSERIAL1_DEBUG_SEL, 1)
#define BITSERIAL1_DEEP_SLEEP_ACTIVE_REG_BITS (1u)
#define hal_set_reg_bitserial1_deep_sleep_active(x) hal_set_register(BITSERIAL1_DEEP_SLEEP_ACTIVE, x, 1)
#define hal_get_reg_bitserial1_deep_sleep_active() hal_get_register(BITSERIAL1_DEEP_SLEEP_ACTIVE, 1)
#define BITSERIAL1_DEGLITCH_EN_REG_BITS (2u)
#define hal_set_reg_bitserial1_deglitch_en(x) hal_set_register(BITSERIAL1_DEGLITCH_EN, x, 1)
#define hal_get_reg_bitserial1_deglitch_en() hal_get_register(BITSERIAL1_DEGLITCH_EN, 1)
#define BITSERIAL1_ERROR_STATUS_REG_BITS (9u)
#define hal_get_reg_bitserial1_error_status() hal_get_register(BITSERIAL1_ERROR_STATUS, 1)
#define BITSERIAL1_I2C_ACKS_REG_BITS (16u)
#define hal_get_reg_bitserial1_i2c_acks() hal_get_register(BITSERIAL1_I2C_ACKS, 1)
#define BITSERIAL1_I2C_ADDRESS_REG_BITS (10u)
#define hal_set_reg_bitserial1_i2c_address(x) hal_set_register(BITSERIAL1_I2C_ADDRESS, x, 1)
#define hal_get_reg_bitserial1_i2c_address() hal_get_register(BITSERIAL1_I2C_ADDRESS, 1)
#define BITSERIAL1_INTERBYTE_SPACING_REG_BITS (16u)
#define hal_set_reg_bitserial1_interbyte_spacing(x) hal_set_register(BITSERIAL1_INTERBYTE_SPACING, x, 1)
#define hal_get_reg_bitserial1_interbyte_spacing() hal_get_register(BITSERIAL1_INTERBYTE_SPACING, 1)
#define BITSERIAL1_INTERRUPT_CLEAR_REG_BITS (14u)
#define hal_set_reg_bitserial1_interrupt_clear(x) hal_set_register(BITSERIAL1_INTERRUPT_CLEAR, x, 1)
#define hal_get_reg_bitserial1_interrupt_clear() hal_get_register(BITSERIAL1_INTERRUPT_CLEAR, 1)
#define BITSERIAL1_INTERRUPT_EN_REG_BITS (14u)
#define hal_set_reg_bitserial1_interrupt_en(x) hal_set_register(BITSERIAL1_INTERRUPT_EN, x, 1)
#define hal_get_reg_bitserial1_interrupt_en() hal_get_register(BITSERIAL1_INTERRUPT_EN, 1)
#define BITSERIAL1_INTERRUPT_SOURCE_REG_BITS (14u)
#define hal_get_reg_bitserial1_interrupt_source() hal_get_register(BITSERIAL1_INTERRUPT_SOURCE, 1)
#define BITSERIAL1_INTERRUPT_SOURCE_CLEAR_REG_BITS (14u)
#define hal_set_reg_bitserial1_interrupt_source_clear(x) hal_set_register(BITSERIAL1_INTERRUPT_SOURCE_CLEAR, x, 1)
#define hal_get_reg_bitserial1_interrupt_source_clear() hal_get_register(BITSERIAL1_INTERRUPT_SOURCE_CLEAR, 1)
#define BITSERIAL1_INTERRUPT_STATUS_REG_BITS (14u)
#define hal_get_reg_bitserial1_interrupt_status() hal_get_register(BITSERIAL1_INTERRUPT_STATUS, 1)
#define BITSERIAL1_REMOTE_SUBSYSTEM_SSID_REG_BITS (4u)
#define hal_set_reg_bitserial1_remote_subsystem_ssid(x) hal_set_register(BITSERIAL1_REMOTE_SUBSYSTEM_SSID, x, 1)
#define hal_get_reg_bitserial1_remote_subsystem_ssid() hal_get_register(BITSERIAL1_REMOTE_SUBSYSTEM_SSID, 1)
#define BITSERIAL1_RWB_REG_BITS (2u)
#define hal_set_reg_bitserial1_rwb(x) hal_set_register(BITSERIAL1_RWB, x, 1)
#define hal_get_reg_bitserial1_rwb() hal_get_register(BITSERIAL1_RWB, 1)
#define BITSERIAL1_RX_BUFFER_REG_BITS (12u)
#define hal_set_reg_bitserial1_rx_buffer(x) hal_set_register(BITSERIAL1_RX_BUFFER, x, 1)
#define hal_get_reg_bitserial1_rx_buffer() hal_get_register(BITSERIAL1_RX_BUFFER, 1)
#define BITSERIAL1_RX_BUFFER2_REG_BITS (12u)
#define hal_set_reg_bitserial1_rx_buffer2(x) hal_set_register(BITSERIAL1_RX_BUFFER2, x, 1)
#define hal_get_reg_bitserial1_rx_buffer2() hal_get_register(BITSERIAL1_RX_BUFFER2, 1)
#define BITSERIAL1_SET_SEL_INACTIVE_REG_BITS (1u)
#define hal_set_reg_bitserial1_set_sel_inactive(x) hal_set_register(BITSERIAL1_SET_SEL_INACTIVE, x, 1)
#define hal_get_reg_bitserial1_set_sel_inactive() hal_get_register(BITSERIAL1_SET_SEL_INACTIVE, 1)
#define BITSERIAL1_SLAVE_DATA_READY_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial1_slave_data_ready_byte(x) hal_set_register(BITSERIAL1_SLAVE_DATA_READY_BYTE, x, 1)
#define hal_get_reg_bitserial1_slave_data_ready_byte() hal_get_register(BITSERIAL1_SLAVE_DATA_READY_BYTE, 1)
#define BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS_REG_BITS (16u)
#define hal_set_reg_bitserial1_slave_num_protocol_words(x) hal_set_register(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS, x, 1)
#define hal_get_reg_bitserial1_slave_num_protocol_words() hal_get_register(BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS, 1)
#define BITSERIAL1_SLAVE_READ_COMMAND_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial1_slave_read_command_byte(x) hal_set_register(BITSERIAL1_SLAVE_READ_COMMAND_BYTE, x, 1)
#define hal_get_reg_bitserial1_slave_read_command_byte() hal_get_register(BITSERIAL1_SLAVE_READ_COMMAND_BYTE, 1)
#define BITSERIAL1_SLAVE_READ_COUNT_REG_BITS (16u)
#define hal_get_reg_bitserial1_slave_read_count() hal_get_register(BITSERIAL1_SLAVE_READ_COUNT, 1)
#define BITSERIAL1_SLAVE_UNDERFLOW_BYTE_REG_BITS (8u)
#define hal_set_reg_bitserial1_slave_underflow_byte(x) hal_set_register(BITSERIAL1_SLAVE_UNDERFLOW_BYTE, x, 1)
#define hal_get_reg_bitserial1_slave_underflow_byte() hal_get_register(BITSERIAL1_SLAVE_UNDERFLOW_BYTE, 1)
#define BITSERIAL1_SLAVE_WRITE_COUNT_REG_BITS (16u)
#define hal_get_reg_bitserial1_slave_write_count() hal_get_register(BITSERIAL1_SLAVE_WRITE_COUNT, 1)
#define BITSERIAL1_STATUS_REG_BITS (13u)
#define hal_get_reg_bitserial1_status() hal_get_register(BITSERIAL1_STATUS, 1)
#define BITSERIAL1_STREAMING_THRESHOLD_REG_BITS (16u)
#define hal_set_reg_bitserial1_streaming_threshold(x) hal_set_register(BITSERIAL1_STREAMING_THRESHOLD, x, 1)
#define hal_get_reg_bitserial1_streaming_threshold() hal_get_register(BITSERIAL1_STREAMING_THRESHOLD, 1)
#define BITSERIAL1_TXRX_LENGTH_REG_BITS (16u)
#define hal_set_reg_bitserial1_txrx_length(x) hal_set_register(BITSERIAL1_TXRX_LENGTH, x, 1)
#define hal_get_reg_bitserial1_txrx_length() hal_get_register(BITSERIAL1_TXRX_LENGTH, 1)
#define BITSERIAL1_TXRX_LENGTH2_REG_BITS (16u)
#define hal_set_reg_bitserial1_txrx_length2(x) hal_set_register(BITSERIAL1_TXRX_LENGTH2, x, 1)
#define hal_get_reg_bitserial1_txrx_length2() hal_get_register(BITSERIAL1_TXRX_LENGTH2, 1)
#define BITSERIAL1_TX_BUFFER_REG_BITS (12u)
#define hal_set_reg_bitserial1_tx_buffer(x) hal_set_register(BITSERIAL1_TX_BUFFER, x, 1)
#define hal_get_reg_bitserial1_tx_buffer() hal_get_register(BITSERIAL1_TX_BUFFER, 1)
#define BITSERIAL1_TX_BUFFER2_REG_BITS (12u)
#define hal_set_reg_bitserial1_tx_buffer2(x) hal_set_register(BITSERIAL1_TX_BUFFER2, x, 1)
#define hal_get_reg_bitserial1_tx_buffer2() hal_get_register(BITSERIAL1_TX_BUFFER2, 1)
#define BITSERIAL1_WORDS_SENT_REG_BITS (16u)
#define hal_get_reg_bitserial1_words_sent() hal_get_register(BITSERIAL1_WORDS_SENT, 1)
#define BITSERIAL1_WORD_CONFIG_REG_BITS (12u)
#define hal_set_reg_bitserial1_word_config(x) hal_set_register(BITSERIAL1_WORD_CONFIG, x, 1)
#define hal_get_reg_bitserial1_word_config() hal_get_register(BITSERIAL1_WORD_CONFIG, 1)

 /* Workings */
#define SETTER_FOR_BITSERIAL1_CLK_CONTROL hal_set_reg_bitserial1_clk_control
#define GETTER_FOR_BITSERIAL1_CLK_CONTROL hal_get_reg_bitserial1_clk_control
#define SETTER_FOR_BITSERIAL1_CLK_RATE_HI hal_set_reg_bitserial1_clk_rate_hi
#define GETTER_FOR_BITSERIAL1_CLK_RATE_HI hal_get_reg_bitserial1_clk_rate_hi
#define SETTER_FOR_BITSERIAL1_CLK_RATE_LO hal_set_reg_bitserial1_clk_rate_lo
#define GETTER_FOR_BITSERIAL1_CLK_RATE_LO hal_get_reg_bitserial1_clk_rate_lo
#define SETTER_FOR_BITSERIAL1_CLK_SAMP_OFFSET hal_set_reg_bitserial1_clk_samp_offset
#define GETTER_FOR_BITSERIAL1_CLK_SAMP_OFFSET hal_get_reg_bitserial1_clk_samp_offset
#define SETTER_FOR_BITSERIAL1_CONFIG hal_set_reg_bitserial1_config
#define GETTER_FOR_BITSERIAL1_CONFIG hal_get_reg_bitserial1_config
#define SETTER_FOR_BITSERIAL1_CONFIG2 hal_set_reg_bitserial1_config2
#define GETTER_FOR_BITSERIAL1_CONFIG2 hal_get_reg_bitserial1_config2
#define SETTER_FOR_BITSERIAL1_CONFIG3 hal_set_reg_bitserial1_config3
#define GETTER_FOR_BITSERIAL1_CONFIG3 hal_get_reg_bitserial1_config3
#define SETTER_FOR_BITSERIAL1_CONFIG_SEL_TIME hal_set_reg_bitserial1_config_sel_time
#define GETTER_FOR_BITSERIAL1_CONFIG_SEL_TIME hal_get_reg_bitserial1_config_sel_time
#define SETTER_FOR_BITSERIAL1_CONFIG_SEL_TIME2 hal_set_reg_bitserial1_config_sel_time2
#define GETTER_FOR_BITSERIAL1_CONFIG_SEL_TIME2 hal_get_reg_bitserial1_config_sel_time2
#define SETTER_FOR_BITSERIAL1_CURATOR_SSID hal_set_reg_bitserial1_curator_ssid
#define GETTER_FOR_BITSERIAL1_CURATOR_SSID hal_get_reg_bitserial1_curator_ssid
#define SETTER_FOR_BITSERIAL1_DEBUG_SEL hal_set_reg_bitserial1_debug_sel
#define GETTER_FOR_BITSERIAL1_DEBUG_SEL hal_get_reg_bitserial1_debug_sel
#define SETTER_FOR_BITSERIAL1_DEEP_SLEEP_ACTIVE hal_set_reg_bitserial1_deep_sleep_active
#define GETTER_FOR_BITSERIAL1_DEEP_SLEEP_ACTIVE hal_get_reg_bitserial1_deep_sleep_active
#define SETTER_FOR_BITSERIAL1_DEGLITCH_EN hal_set_reg_bitserial1_deglitch_en
#define GETTER_FOR_BITSERIAL1_DEGLITCH_EN hal_get_reg_bitserial1_deglitch_en
#define GETTER_FOR_BITSERIAL1_ERROR_STATUS hal_get_reg_bitserial1_error_status
#define GETTER_FOR_BITSERIAL1_I2C_ACKS hal_get_reg_bitserial1_i2c_acks
#define SETTER_FOR_BITSERIAL1_I2C_ADDRESS hal_set_reg_bitserial1_i2c_address
#define GETTER_FOR_BITSERIAL1_I2C_ADDRESS hal_get_reg_bitserial1_i2c_address
#define SETTER_FOR_BITSERIAL1_INTERBYTE_SPACING hal_set_reg_bitserial1_interbyte_spacing
#define GETTER_FOR_BITSERIAL1_INTERBYTE_SPACING hal_get_reg_bitserial1_interbyte_spacing
#define SETTER_FOR_BITSERIAL1_INTERRUPT_CLEAR hal_set_reg_bitserial1_interrupt_clear
#define GETTER_FOR_BITSERIAL1_INTERRUPT_CLEAR hal_get_reg_bitserial1_interrupt_clear
#define SETTER_FOR_BITSERIAL1_INTERRUPT_EN hal_set_reg_bitserial1_interrupt_en
#define GETTER_FOR_BITSERIAL1_INTERRUPT_EN hal_get_reg_bitserial1_interrupt_en
#define GETTER_FOR_BITSERIAL1_INTERRUPT_SOURCE hal_get_reg_bitserial1_interrupt_source
#define SETTER_FOR_BITSERIAL1_INTERRUPT_SOURCE_CLEAR hal_set_reg_bitserial1_interrupt_source_clear
#define GETTER_FOR_BITSERIAL1_INTERRUPT_SOURCE_CLEAR hal_get_reg_bitserial1_interrupt_source_clear
#define GETTER_FOR_BITSERIAL1_INTERRUPT_STATUS hal_get_reg_bitserial1_interrupt_status
#define SETTER_FOR_BITSERIAL1_REMOTE_SUBSYSTEM_SSID hal_set_reg_bitserial1_remote_subsystem_ssid
#define GETTER_FOR_BITSERIAL1_REMOTE_SUBSYSTEM_SSID hal_get_reg_bitserial1_remote_subsystem_ssid
#define SETTER_FOR_BITSERIAL1_RWB hal_set_reg_bitserial1_rwb
#define GETTER_FOR_BITSERIAL1_RWB hal_get_reg_bitserial1_rwb
#define SETTER_FOR_BITSERIAL1_RX_BUFFER hal_set_reg_bitserial1_rx_buffer
#define GETTER_FOR_BITSERIAL1_RX_BUFFER hal_get_reg_bitserial1_rx_buffer
#define SETTER_FOR_BITSERIAL1_RX_BUFFER2 hal_set_reg_bitserial1_rx_buffer2
#define GETTER_FOR_BITSERIAL1_RX_BUFFER2 hal_get_reg_bitserial1_rx_buffer2
#define SETTER_FOR_BITSERIAL1_SET_SEL_INACTIVE hal_set_reg_bitserial1_set_sel_inactive
#define GETTER_FOR_BITSERIAL1_SET_SEL_INACTIVE hal_get_reg_bitserial1_set_sel_inactive
#define SETTER_FOR_BITSERIAL1_SLAVE_DATA_READY_BYTE hal_set_reg_bitserial1_slave_data_ready_byte
#define GETTER_FOR_BITSERIAL1_SLAVE_DATA_READY_BYTE hal_get_reg_bitserial1_slave_data_ready_byte
#define SETTER_FOR_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS hal_set_reg_bitserial1_slave_num_protocol_words
#define GETTER_FOR_BITSERIAL1_SLAVE_NUM_PROTOCOL_WORDS hal_get_reg_bitserial1_slave_num_protocol_words
#define SETTER_FOR_BITSERIAL1_SLAVE_READ_COMMAND_BYTE hal_set_reg_bitserial1_slave_read_command_byte
#define GETTER_FOR_BITSERIAL1_SLAVE_READ_COMMAND_BYTE hal_get_reg_bitserial1_slave_read_command_byte
#define GETTER_FOR_BITSERIAL1_SLAVE_READ_COUNT hal_get_reg_bitserial1_slave_read_count
#define SETTER_FOR_BITSERIAL1_SLAVE_UNDERFLOW_BYTE hal_set_reg_bitserial1_slave_underflow_byte
#define GETTER_FOR_BITSERIAL1_SLAVE_UNDERFLOW_BYTE hal_get_reg_bitserial1_slave_underflow_byte
#define GETTER_FOR_BITSERIAL1_SLAVE_WRITE_COUNT hal_get_reg_bitserial1_slave_write_count
#define GETTER_FOR_BITSERIAL1_STATUS hal_get_reg_bitserial1_status
#define SETTER_FOR_BITSERIAL1_STREAMING_THRESHOLD hal_set_reg_bitserial1_streaming_threshold
#define GETTER_FOR_BITSERIAL1_STREAMING_THRESHOLD hal_get_reg_bitserial1_streaming_threshold
#define SETTER_FOR_BITSERIAL1_TXRX_LENGTH hal_set_reg_bitserial1_txrx_length
#define GETTER_FOR_BITSERIAL1_TXRX_LENGTH hal_get_reg_bitserial1_txrx_length
#define SETTER_FOR_BITSERIAL1_TXRX_LENGTH2 hal_set_reg_bitserial1_txrx_length2
#define GETTER_FOR_BITSERIAL1_TXRX_LENGTH2 hal_get_reg_bitserial1_txrx_length2
#define SETTER_FOR_BITSERIAL1_TX_BUFFER hal_set_reg_bitserial1_tx_buffer
#define GETTER_FOR_BITSERIAL1_TX_BUFFER hal_get_reg_bitserial1_tx_buffer
#define SETTER_FOR_BITSERIAL1_TX_BUFFER2 hal_set_reg_bitserial1_tx_buffer2
#define GETTER_FOR_BITSERIAL1_TX_BUFFER2 hal_get_reg_bitserial1_tx_buffer2
#define GETTER_FOR_BITSERIAL1_WORDS_SENT hal_get_reg_bitserial1_words_sent
#define SETTER_FOR_BITSERIAL1_WORD_CONFIG hal_set_reg_bitserial1_word_config
#define GETTER_FOR_BITSERIAL1_WORD_CONFIG hal_get_reg_bitserial1_word_config

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_BITSERIAL1) */
#endif /* __HAL_MACROS_H__MODULE_BITSERIAL1 */




#if defined(IO_DEFS_MODULE_K32_MISC) 

#ifndef __HAL_MACROS_H__MODULE_K32_MISC
#define __HAL_MACROS_H__MODULE_K32_MISC

/* -- Kalimba 32-bit Misc Control registers -- */

 /* Field ALLOW_GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
#define hal_get_allow_goto_shallow_sleep() hal_get_register_field8(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP)
#define hal_set_allow_goto_shallow_sleep(x) hal_set_register_field(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP,(x))
 /* Workings */
#define TYPE_OF_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP

 /* Field CLOCK_CONT_SHALLOW_SLEEP_RATE_LSB */
 /* Accessor macros */
#define hal_get_clock_cont_shallow_sleep_rate() hal_get_register_field8(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE)
#define hal_set_clock_cont_shallow_sleep_rate(x) hal_set_register_field(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE,(x))
 /* Workings */
#define TYPE_OF_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE
#define FIELDS_MASKS_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE

 /* Field CLOCK_STOP_WIND_DOWN_SEQUENCE_EN */
 /* Accessor macros */
#define hal_get_clock_stop_wind_down_sequence_en() hal_get_register_field8(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN)
#define hal_set_clock_stop_wind_down_sequence_en(x) hal_set_register_field(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,(x))
 /* Workings */
#define TYPE_OF_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define FIELDS_MASKS_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN

 /* Field DISABLE_MUTEX_AND_ACCESS_IMMUNITY */
 /* Accessor macros */
#define hal_get_disable_mutex_and_access_immunity() hal_get_register_field8(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY)
#define hal_set_disable_mutex_and_access_immunity(x) hal_set_register_field(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY,(x))
 /* Workings */
#define TYPE_OF_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define FIELDS_MASKS_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY

 /* Field GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP

 /* Field PMWIN_ENABLE */
 /* Accessor macros */
#define hal_get_pmwin_enable() hal_get_register_field8(PMWIN_ENABLE,PMWIN_ENABLE)
#define hal_set_pmwin_enable(x) hal_set_register_field(PMWIN_ENABLE,PMWIN_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PMWIN_ENABLE PMWIN_ENABLE
#define FIELDS_MASKS_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PMWIN_ENABLE PMWIN_ENABLE

 /* Field PROCESSOR_ID */
 /* Accessor macros */
#define hal_get_processor_id() hal_get_register_field8(PROCESSOR_ID,PROCESSOR_ID)
 /* Workings */
#define TYPE_OF_PROCESSOR_ID PROCESSOR_ID
#define FIELDS_MASKS_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROCESSOR_ID PROCESSOR_ID

 /* Field PROC_DEEP_SLEEP_EN */
 /* Accessor macros */
#define hal_get_proc_deep_sleep_en() hal_get_register_field8(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN)
#define hal_set_proc_deep_sleep_en(x) hal_set_register_field(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN,(x))
 /* Workings */
#define TYPE_OF_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN
#define FIELDS_MASKS_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN

 /* Field SHALLOW_SLEEP_STATUS */
 /* Accessor macros */
#define hal_get_shallow_sleep_status() hal_get_register_field8(SHALLOW_SLEEP_STATUS,SHALLOW_SLEEP_STATUS)
 /* Workings */
#define TYPE_OF_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS
#define FIELDS_MASKS_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_ALLOW_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_CLOCK_CONT_SHALLOW_SLEEP_RATE
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_END
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_END
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_END
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_PMWIN_ENABLE
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_END
#define CHECK_FIELD_TYPE_PROCESSOR_ID_PROCESSOR_ID
#define CHECK_FIELD_TYPE_PROCESSOR_ID_END
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_PROC_DEEP_SLEEP_EN
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_END
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_SHALLOW_SLEEP_STATUS
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define ALLOW_GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_allow_goto_shallow_sleep(x) hal_set_register(ALLOW_GOTO_SHALLOW_SLEEP, x, 1)
#define hal_get_reg_allow_goto_shallow_sleep() hal_get_register(ALLOW_GOTO_SHALLOW_SLEEP, 1)
#define CLOCK_CONT_SHALLOW_SLEEP_RATE_REG_BITS (8u)
#define hal_set_reg_clock_cont_shallow_sleep_rate(x) hal_set_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, x, 1)
#define hal_get_reg_clock_cont_shallow_sleep_rate() hal_get_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, 1)
#define CLOCK_DIVIDE_RATE_REG_BITS (2u)
#define hal_set_reg_clock_divide_rate(x) hal_set_register(CLOCK_DIVIDE_RATE, x, 1)
#define hal_get_reg_clock_divide_rate() hal_get_register(CLOCK_DIVIDE_RATE, 1)
#define CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_REG_BITS (1u)
#define hal_set_reg_clock_stop_wind_down_sequence_en(x) hal_set_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, x, 1)
#define hal_get_reg_clock_stop_wind_down_sequence_en() hal_get_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, 1)
#define DISABLE_MUTEX_AND_ACCESS_IMMUNITY_REG_BITS (1u)
#define hal_set_reg_disable_mutex_and_access_immunity(x) hal_set_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, x, 1)
#define hal_get_reg_disable_mutex_and_access_immunity() hal_get_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, 1)
#define GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_goto_shallow_sleep(x) hal_set_register(GOTO_SHALLOW_SLEEP, x, 1)
#define PMWIN_ENABLE_REG_BITS (1u)
#define hal_set_reg_pmwin_enable(x) hal_set_register(PMWIN_ENABLE, x, 1)
#define hal_get_reg_pmwin_enable() hal_get_register(PMWIN_ENABLE, 1)
#define PROCESSOR_ID_REG_BITS (1u)
#define hal_get_reg_processor_id() hal_get_register(PROCESSOR_ID, 1)
#define PROC_DEEP_SLEEP_EN_REG_BITS (1u)
#define hal_set_reg_proc_deep_sleep_en(x) hal_set_register(PROC_DEEP_SLEEP_EN, x, 1)
#define hal_get_reg_proc_deep_sleep_en() hal_get_register(PROC_DEEP_SLEEP_EN, 1)
#define SHALLOW_SLEEP_STATUS_REG_BITS (1u)
#define hal_get_reg_shallow_sleep_status() hal_get_register(SHALLOW_SLEEP_STATUS, 1)

 /* Workings */
#define SETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_set_reg_allow_goto_shallow_sleep
#define GETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_get_reg_allow_goto_shallow_sleep
#define SETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_set_reg_clock_cont_shallow_sleep_rate
#define GETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_get_reg_clock_cont_shallow_sleep_rate
#define SETTER_FOR_CLOCK_DIVIDE_RATE hal_set_reg_clock_divide_rate
#define GETTER_FOR_CLOCK_DIVIDE_RATE hal_get_reg_clock_divide_rate
#define SETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_set_reg_clock_stop_wind_down_sequence_en
#define GETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_get_reg_clock_stop_wind_down_sequence_en
#define SETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_set_reg_disable_mutex_and_access_immunity
#define GETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_get_reg_disable_mutex_and_access_immunity
#define SETTER_FOR_GOTO_SHALLOW_SLEEP hal_set_reg_goto_shallow_sleep
#define SETTER_FOR_PMWIN_ENABLE hal_set_reg_pmwin_enable
#define GETTER_FOR_PMWIN_ENABLE hal_get_reg_pmwin_enable
#define GETTER_FOR_PROCESSOR_ID hal_get_reg_processor_id
#define SETTER_FOR_PROC_DEEP_SLEEP_EN hal_set_reg_proc_deep_sleep_en
#define GETTER_FOR_PROC_DEEP_SLEEP_EN hal_get_reg_proc_deep_sleep_en
#define GETTER_FOR_SHALLOW_SLEEP_STATUS hal_get_reg_shallow_sleep_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MISC) */
#endif /* __HAL_MACROS_H__MODULE_K32_MISC */



#if defined(IO_DEFS_MODULE_K32_TIMERS) 

#ifndef __HAL_MACROS_H__MODULE_K32_TIMERS
#define __HAL_MACROS_H__MODULE_K32_TIMERS

/* -- Kalimba 32-bit Timers Control registers -- */

 /* Field TIMER1_EN */
 /* Accessor macros */
#define hal_get_timer1_en() hal_get_register_field8(TIMER1_EN,TIMER1_EN)
#define hal_set_timer1_en(x) hal_set_register_field(TIMER1_EN,TIMER1_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER1_EN TIMER1_EN
#define FIELDS_MASKS_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_EN TIMER1_EN

 /* Field TIMER1_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer1_trigger() hal_get_register_field32(TIMER1_TRIGGER,TIMER1_TRIGGER)
#define hal_set_timer1_trigger(x) hal_set_register_field(TIMER1_TRIGGER,TIMER1_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER1_TRIGGER TIMER1_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_TRIGGER TIMER1_TRIGGER

 /* Field TIMER2_EN */
 /* Accessor macros */
#define hal_get_timer2_en() hal_get_register_field8(TIMER2_EN,TIMER2_EN)
#define hal_set_timer2_en(x) hal_set_register_field(TIMER2_EN,TIMER2_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER2_EN TIMER2_EN
#define FIELDS_MASKS_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_EN TIMER2_EN

 /* Field TIMER2_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer2_trigger() hal_get_register_field32(TIMER2_TRIGGER,TIMER2_TRIGGER)
#define hal_set_timer2_trigger(x) hal_set_register_field(TIMER2_TRIGGER,TIMER2_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER2_TRIGGER TIMER2_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_TRIGGER TIMER2_TRIGGER

 /* Field TIMER_TIME_LSB */
 /* Accessor macros */
#define hal_get_timer_time() hal_get_register_field32(TIMER_TIME,TIMER_TIME)
 /* Workings */
#define TYPE_OF_TIMER_TIME TIMER_TIME
#define FIELDS_MASKS_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER_TIME TIMER_TIME

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TIMER1_EN_TIMER1_EN
#define CHECK_FIELD_TYPE_TIMER1_EN_END
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_TIMER1_TRIGGER
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER2_EN_TIMER2_EN
#define CHECK_FIELD_TYPE_TIMER2_EN_END
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_TIMER2_TRIGGER
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER_TIME_TIMER_TIME
#define CHECK_FIELD_TYPE_TIMER_TIME_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define TIMER1_EN_REG_BITS (1u)
#define hal_set_reg_timer1_en(x) hal_set_register(TIMER1_EN, x, 1)
#define hal_get_reg_timer1_en() hal_get_register(TIMER1_EN, 1)
#define TIMER1_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer1_trigger(x) hal_set_register(TIMER1_TRIGGER, x, 1)
#define hal_get_reg_timer1_trigger() hal_get_register(TIMER1_TRIGGER, 1)
#define TIMER2_EN_REG_BITS (1u)
#define hal_set_reg_timer2_en(x) hal_set_register(TIMER2_EN, x, 1)
#define hal_get_reg_timer2_en() hal_get_register(TIMER2_EN, 1)
#define TIMER2_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer2_trigger(x) hal_set_register(TIMER2_TRIGGER, x, 1)
#define hal_get_reg_timer2_trigger() hal_get_register(TIMER2_TRIGGER, 1)
#define TIMER_TIME_REG_BITS (32u)
#define hal_get_reg_timer_time() hal_get_register(TIMER_TIME, 1)

 /* Workings */
#define SETTER_FOR_TIMER1_EN hal_set_reg_timer1_en
#define GETTER_FOR_TIMER1_EN hal_get_reg_timer1_en
#define SETTER_FOR_TIMER1_TRIGGER hal_set_reg_timer1_trigger
#define GETTER_FOR_TIMER1_TRIGGER hal_get_reg_timer1_trigger
#define SETTER_FOR_TIMER2_EN hal_set_reg_timer2_en
#define GETTER_FOR_TIMER2_EN hal_get_reg_timer2_en
#define SETTER_FOR_TIMER2_TRIGGER hal_set_reg_timer2_trigger
#define GETTER_FOR_TIMER2_TRIGGER hal_get_reg_timer2_trigger
#define GETTER_FOR_TIMER_TIME hal_get_reg_timer_time

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TIMERS) */
#endif /* __HAL_MACROS_H__MODULE_K32_TIMERS */

#if defined(IO_DEFS_MODULE_K32_PREFETCH) 

#ifndef __HAL_MACROS_H__MODULE_K32_PREFETCH
#define __HAL_MACROS_H__MODULE_K32_PREFETCH

/* -- Kalimba 32-bit Prefetch Control registers. -- */

 /* Field PREFETCH_CONFIG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_prefetch_config_counters_en() hal_get_register_field8(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN)
#define hal_set_prefetch_config_counters_en(x) hal_set_register_field(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG

 /* Field PREFETCH_DEBUG_ALOW_PREFETCHING_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_alow_prefetching() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_ALOW_PREFETCHING)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST_REG */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request_reg() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST_REG)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T1 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t1() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T1)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T2 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t2() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T2)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_NEXT_MEMREQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_next_memrequest() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_NEXT_MEMREQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PMADDRIN_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrin() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDRIN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMADDROUT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrout() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDROUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PMEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PM_WAIT_IN_PREV */
 /* Accessor macros */
#define hal_get_prefetch_debug_pm_wait_in_prev() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PM_WAIT_IN_PREV)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_HIT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_hit() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_HIT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALID */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valid() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALID)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALIDS_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valids() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALIDS)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_VALID_PREFETCH_DATA */
 /* Accessor macros */
#define hal_get_prefetch_debug_valid_prefetch_data() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_VALID_PREFETCH_DATA)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG

 /* Field PREFETCH_FLUSH */
 /* Accessor macros */
#define hal_get_prefetch_flush() hal_get_register_field8(PREFETCH_FLUSH,PREFETCH_FLUSH)
#define hal_set_prefetch_flush(x) hal_set_register_field(PREFETCH_FLUSH,PREFETCH_FLUSH,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_FLUSH PREFETCH_FLUSH
#define FIELDS_MASKS_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_FLUSH PREFETCH_FLUSH

 /* Field PREFETCH_PREFETCH_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_prefetch_count() hal_get_register_field32(PREFETCH_PREFETCH_COUNT,PREFETCH_PREFETCH_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT

 /* Field PREFETCH_REQUEST_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_request_count() hal_get_register_field32(PREFETCH_REQUEST_COUNT,PREFETCH_REQUEST_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT

 /* Field PREFETCH_WAIT_OUT_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_wait_out_count() hal_get_register_field32(PREFETCH_WAIT_OUT_COUNT,PREFETCH_WAIT_OUT_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_PREFETCH_CONFIG
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_PREFETCH_DEBUG
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_PREFETCH_DEBUG_ADDR
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_END
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_PREFETCH_FLUSH
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_END
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_PREFETCH_PREFETCH_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_PREFETCH_REQUEST_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_PREFETCH_WAIT_OUT_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define PREFETCH_CONFIG_REG_BITS (1u)
#define hal_set_reg_prefetch_config(x) hal_set_register(PREFETCH_CONFIG, x, 1)
#define hal_get_reg_prefetch_config() hal_get_register(PREFETCH_CONFIG, 1)
#define PREFETCH_DEBUG_REG_BITS (25u)
#define hal_get_reg_prefetch_debug() hal_get_register(PREFETCH_DEBUG, 1)
#define PREFETCH_DEBUG_ADDR_REG_BITS (32u)
#define hal_get_reg_prefetch_debug_addr() hal_get_register(PREFETCH_DEBUG_ADDR, 1)
#define PREFETCH_FLUSH_REG_BITS (1u)
#define hal_set_reg_prefetch_flush(x) hal_set_register(PREFETCH_FLUSH, x, 1)
#define hal_get_reg_prefetch_flush() hal_get_register(PREFETCH_FLUSH, 1)
#define PREFETCH_PREFETCH_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_prefetch_count() hal_get_register(PREFETCH_PREFETCH_COUNT, 1)
#define PREFETCH_REQUEST_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_request_count() hal_get_register(PREFETCH_REQUEST_COUNT, 1)
#define PREFETCH_WAIT_OUT_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_wait_out_count() hal_get_register(PREFETCH_WAIT_OUT_COUNT, 1)

 /* Workings */
#define SETTER_FOR_PREFETCH_CONFIG hal_set_reg_prefetch_config
#define GETTER_FOR_PREFETCH_CONFIG hal_get_reg_prefetch_config
#define GETTER_FOR_PREFETCH_DEBUG hal_get_reg_prefetch_debug
#define GETTER_FOR_PREFETCH_DEBUG_ADDR hal_get_reg_prefetch_debug_addr
#define SETTER_FOR_PREFETCH_FLUSH hal_set_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_FLUSH hal_get_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_PREFETCH_COUNT hal_get_reg_prefetch_prefetch_count
#define GETTER_FOR_PREFETCH_REQUEST_COUNT hal_get_reg_prefetch_request_count
#define GETTER_FOR_PREFETCH_WAIT_OUT_COUNT hal_get_reg_prefetch_wait_out_count

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_PREFETCH) */
#endif /* __HAL_MACROS_H__MODULE_K32_PREFETCH */

#if defined(IO_DEFS_MODULE_APPS_SYS_CPU0_VM) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_CPU0_VM
#define __HAL_MACROS_H__MODULE_APPS_SYS_CPU0_VM

/* -- Apps-specific virtual memory registers -- */

 /* Field APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu0_vm__p0_access_permission() ((apps_sys_cpu0_vm__p0_access_permission) hal_get_register_field8(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu0_vm__p0_access_permission(x) hal_set_register_field(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU0_VM__P0_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL

 /* Field APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu0_vm__p1_access_permission() ((apps_sys_cpu0_vm__p1_access_permission) hal_get_register_field8(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu0_vm__p1_access_permission(x) hal_set_register_field(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU0_VM__P1_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL

 /* Field APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu0_vm__p2_access_permission() ((apps_sys_cpu0_vm__p2_access_permission) hal_get_register_field8(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu0_vm__p2_access_permission(x) hal_set_register_field(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU0_VM__P2_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL

 /* Field APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_cpu0_vm__p3_access_permission() ((apps_sys_cpu0_vm__p3_access_permission) hal_get_register_field8(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION))
#define hal_set_apps_sys_cpu0_vm__p3_access_permission(x) hal_set_register_field(VM_CPU0_ACCESS_CTRL,APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CPU0_VM__P3_ACCESS_PERMISSION VM_CPU0_ACCESS_CTRL

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_access_denied_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED)
#define hal_get_mmu_vm_lookup_error_flags_access_denied_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED)
#define hal_set_mmu_vm_lookup_error_flags_access_denied_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_ACCESS_DENIED MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_handle_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE)
#define hal_get_mmu_vm_lookup_error_flags_handle_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE)
#define hal_set_mmu_vm_lookup_error_flags_handle_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_HANDLE MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_host_access_denied_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED)
#define hal_get_mmu_vm_lookup_error_flags_host_access_denied_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED)
#define hal_set_mmu_vm_lookup_error_flags_host_access_denied_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_HOST_ACCESS_DENIED MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_invalid_access_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS)
#define hal_get_mmu_vm_lookup_error_flags_invalid_access_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS)
#define hal_set_mmu_vm_lookup_error_flags_invalid_access_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_INVALID_ACCESS MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM_LSB */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_subsystem_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM)
#define hal_get_mmu_vm_lookup_error_flags_subsystem_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM)
#define hal_set_mmu_vm_lookup_error_flags_subsystem_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_SUBSYSTEM MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED */
 /* Accessor macros */
#define hal_get_mmu_vm_lookup_error_flags_unsupported_flags() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS,MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED)
#define hal_get_mmu_vm_lookup_error_flags_unsupported_clear() hal_get_register_field8(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED)
#define hal_set_mmu_vm_lookup_error_flags_unsupported_clear(x) hal_set_register_field(VM_LOOKUP_ERROR_FLAGS_CLEAR,MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED,(x))
 /* Workings */
#define TYPE_OF_MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED MMU_VM_LOOKUP_ERROR_FLAGS
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MMU_VM_LOOKUP_ERROR_FLAGS_UNSUPPORTED MMU_VM_LOOKUP_ERROR_FLAGS

 /* Field VM_BUFFER_ACCESS_CPU0_OFFSET_READ_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_cpu0_offset_read() hal_get_register_field32(VM_BUFFER_ACCESS_CPU0_OFFSET_READ,VM_BUFFER_ACCESS_CPU0_OFFSET_READ)
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_CPU0_OFFSET_READ VM_BUFFER_ACCESS_CPU0_OFFSET_READ
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU0_OFFSET_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_OFFSET_READ, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU0_OFFSET_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_OFFSET_READ, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_CPU0_OFFSET_READ VM_BUFFER_ACCESS_CPU0_OFFSET_READ

 /* Field VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_cpu0_offset_write() hal_get_register_field32(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE,VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE)
#define hal_set_vm_buffer_access_cpu0_offset_write(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE,VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE,(x))
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE

 /* Field VM_BUFFER_ACCESS_HANDLE_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_handle_handle() hal_get_register_field8(VM_BUFFER_ACCESS_CPU0_HANDLE,VM_BUFFER_ACCESS_HANDLE_HANDLE)
#define hal_set_vm_buffer_access_handle_handle(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU0_HANDLE,VM_BUFFER_ACCESS_HANDLE_HANDLE,(x))
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_HANDLE_HANDLE VM_BUFFER_ACCESS_CPU0_HANDLE
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_HANDLE_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_HANDLE_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_HANDLE_HANDLE VM_BUFFER_ACCESS_CPU0_HANDLE

 /* Field VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_handle_subsystem() hal_get_register_field8(VM_BUFFER_ACCESS_CPU0_HANDLE,VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM)
#define hal_set_vm_buffer_access_handle_subsystem(x) hal_set_register_field(VM_BUFFER_ACCESS_CPU0_HANDLE,VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM,(x))
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM VM_BUFFER_ACCESS_CPU0_HANDLE
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_HANDLE_SUBSYSTEM VM_BUFFER_ACCESS_CPU0_HANDLE

 /* Field VM_BUFFER_ACCESS_STATUS_ACCESS_LSB */
 /* Accessor macros */
#define hal_get_vm_buffer_access_status_access() hal_get_register_field8(VM_BUFFER_ACCESS_CPU0_STATUS,VM_BUFFER_ACCESS_STATUS_ACCESS)
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_STATUS_ACCESS VM_BUFFER_ACCESS_CPU0_STATUS
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_STATUS_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_STATUS_ACCESS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_STATUS_ACCESS VM_BUFFER_ACCESS_CPU0_STATUS

 /* Field VM_BUFFER_ACCESS_STATUS_ACTIVE */
 /* Accessor macros */
#define hal_get_vm_buffer_access_status_active() hal_get_register_field8(VM_BUFFER_ACCESS_CPU0_STATUS,VM_BUFFER_ACCESS_STATUS_ACTIVE)
 /* Workings */
#define TYPE_OF_VM_BUFFER_ACCESS_STATUS_ACTIVE VM_BUFFER_ACCESS_CPU0_STATUS
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_BUFFER_ACCESS_STATUS_ACTIVE VM_BUFFER_ACCESS_CPU0_STATUS

 /* Field VM_CPU0_REQUESTS_READ */
 /* Accessor macros */
#define hal_get_vm_cpu0_requests_read() hal_get_register_field8(VM_CPU0_CLEAR_PORT,VM_CPU0_REQUESTS_READ)
#define hal_set_vm_cpu0_requests_read(x) hal_set_register_field(VM_CPU0_CLEAR_PORT,VM_CPU0_REQUESTS_READ,(x))
 /* Workings */
#define TYPE_OF_VM_CPU0_REQUESTS_READ VM_CPU0_CLEAR_PORT
#define FIELDS_MASKS_SHIFTED_VM_CPU0_REQUESTS_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU0_REQUESTS_READ(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_CPU0_REQUESTS_READ VM_CPU0_CLEAR_PORT

 /* Field VM_CPU0_REQUESTS_WRITE */
 /* Accessor macros */
#define hal_get_vm_cpu0_requests_write() hal_get_register_field8(VM_CPU0_CLEAR_PORT,VM_CPU0_REQUESTS_WRITE)
#define hal_set_vm_cpu0_requests_write(x) hal_set_register_field(VM_CPU0_CLEAR_PORT,VM_CPU0_REQUESTS_WRITE,(x))
 /* Workings */
#define TYPE_OF_VM_CPU0_REQUESTS_WRITE VM_CPU0_CLEAR_PORT
#define FIELDS_MASKS_SHIFTED_VM_CPU0_REQUESTS_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU0_REQUESTS_WRITE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_CPU0_REQUESTS_WRITE VM_CPU0_CLEAR_PORT

 /* Field VM_FREE_LIST_ADDR_LSB */
 /* Accessor macros */
#define hal_get_vm_free_list_addr() hal_get_register_field32(VM_FREE_LIST_ADDR,VM_FREE_LIST_ADDR)
#define hal_set_vm_free_list_addr(x) hal_set_register_field(VM_FREE_LIST_ADDR,VM_FREE_LIST_ADDR,(x))
 /* Workings */
#define TYPE_OF_VM_FREE_LIST_ADDR VM_FREE_LIST_ADDR
#define FIELDS_MASKS_SHIFTED_VM_FREE_LIST_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_FREE_LIST_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_FREE_LIST_ADDR VM_FREE_LIST_ADDR

 /* Field VM_FREE_LIST_ADD_PAGE_LSB */
 /* Accessor macros */
#define hal_get_vm_free_list_add_page() hal_get_register_field16(VM_FREE_LIST_ADD_PAGE,VM_FREE_LIST_ADD_PAGE)
#define hal_set_vm_free_list_add_page(x) hal_set_register_field(VM_FREE_LIST_ADD_PAGE,VM_FREE_LIST_ADD_PAGE,(x))
 /* Workings */
#define TYPE_OF_VM_FREE_LIST_ADD_PAGE VM_FREE_LIST_ADD_PAGE
#define FIELDS_MASKS_SHIFTED_VM_FREE_LIST_ADD_PAGE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_ADD_PAGE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_FREE_LIST_ADD_PAGE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_ADD_PAGE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_FREE_LIST_ADD_PAGE VM_FREE_LIST_ADD_PAGE

 /* Field VM_FREE_LIST_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_vm_free_list_end_addr() hal_get_register_field32(VM_FREE_LIST_END_ADDR,VM_FREE_LIST_END_ADDR)
#define hal_set_vm_free_list_end_addr(x) hal_set_register_field(VM_FREE_LIST_END_ADDR,VM_FREE_LIST_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_VM_FREE_LIST_END_ADDR VM_FREE_LIST_END_ADDR
#define FIELDS_MASKS_SHIFTED_VM_FREE_LIST_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_FREE_LIST_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_FREE_LIST_END_ADDR VM_FREE_LIST_END_ADDR

 /* Field VM_FREE_LIST_NEXT_ADDR_LSB */
 /* Accessor macros */
#define hal_get_vm_free_list_next_addr() hal_get_register_field32(VM_FREE_LIST_NEXT_ADDR,VM_FREE_LIST_NEXT_ADDR)
 /* Workings */
#define TYPE_OF_VM_FREE_LIST_NEXT_ADDR VM_FREE_LIST_NEXT_ADDR
#define FIELDS_MASKS_SHIFTED_VM_FREE_LIST_NEXT_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_NEXT_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_FREE_LIST_NEXT_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_FREE_LIST_NEXT_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_FREE_LIST_NEXT_ADDR VM_FREE_LIST_NEXT_ADDR

 /* Field VM_INTERCONNECT_MUX_DEBUG_ENABLE */
 /* Accessor macros */
#define hal_get_vm_interconnect_mux_debug_enable() hal_get_register_field8(VM_INTERCONNECT_MUX_DEBUG_ENABLE,VM_INTERCONNECT_MUX_DEBUG_ENABLE)
#define hal_set_vm_interconnect_mux_debug_enable(x) hal_set_register_field(VM_INTERCONNECT_MUX_DEBUG_ENABLE,VM_INTERCONNECT_MUX_DEBUG_ENABLE,(x))
 /* Workings */
#define TYPE_OF_VM_INTERCONNECT_MUX_DEBUG_ENABLE VM_INTERCONNECT_MUX_DEBUG_ENABLE
#define FIELDS_MASKS_SHIFTED_VM_INTERCONNECT_MUX_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_INTERCONNECT_MUX_DEBUG_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_INTERCONNECT_MUX_DEBUG_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_INTERCONNECT_MUX_DEBUG_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_INTERCONNECT_MUX_DEBUG_ENABLE VM_INTERCONNECT_MUX_DEBUG_ENABLE

 /* Field VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES */
 /* Accessor macros */
#define hal_get_vm_lookup_allow_reading_from_unmapped_pages() hal_get_register_field8(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES,VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES)
#define hal_set_vm_lookup_allow_reading_from_unmapped_pages(x) hal_set_register_field(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES,VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES,(x))
 /* Workings */
#define TYPE_OF_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES
#define FIELDS_MASKS_SHIFTED_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES

 /* Field VM_LOOKUP_INT_EVENTS_STICKY_LSB */
 /* Accessor macros */
#define hal_get_vm_lookup_int_events_sticky() hal_get_register_field16(VM_LOOKUP_INT_EVENTS_STICKY,VM_LOOKUP_INT_EVENTS_STICKY)
 /* Workings */
#define TYPE_OF_VM_LOOKUP_INT_EVENTS_STICKY VM_LOOKUP_INT_EVENTS_STICKY
#define FIELDS_MASKS_SHIFTED_VM_LOOKUP_INT_EVENTS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_INT_EVENTS_STICKY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_LOOKUP_INT_EVENTS_STICKY(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_INT_EVENTS_STICKY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_LOOKUP_INT_EVENTS_STICKY VM_LOOKUP_INT_EVENTS_STICKY

 /* Field VM_LOOKUP_SELECT_LSB */
 /* Accessor macros */
#define hal_get_vm_lookup_select() hal_get_register_field8(VM_LOOKUP_SELECT,VM_LOOKUP_SELECT)
#define hal_set_vm_lookup_select(x) hal_set_register_field(VM_LOOKUP_SELECT,VM_LOOKUP_SELECT,(x))
 /* Workings */
#define TYPE_OF_VM_LOOKUP_SELECT VM_LOOKUP_SELECT
#define FIELDS_MASKS_SHIFTED_VM_LOOKUP_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_LOOKUP_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_LOOKUP_SELECT VM_LOOKUP_SELECT

 /* Field VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR */
 /* Accessor macros */
#define hal_get_vm_requests_remote_config_denied_status_clear_read_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR)
#define hal_set_vm_requests_remote_config_denied_status_clear_read_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR,(x))
#define hal_get_vm_requests_remote_config_denied_status_clear_write_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR)
#define hal_set_vm_requests_remote_config_denied_status_clear_write_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR,(x))
 /* Workings */
#define TYPE_OF_VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR VM_REQUESTS_REMOTE_CONFIG_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR VM_REQUESTS_REMOTE_CONFIG_ENUM

 /* Field VM_REQUESTS_REMOTE_CONFIG_EN */
 /* Accessor macros */
#define hal_get_vm_requests_remote_config_en_read_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_EN)
#define hal_set_vm_requests_remote_config_en_read_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_EN,(x))
#define hal_get_vm_requests_remote_config_en_write_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_EN)
#define hal_set_vm_requests_remote_config_en_write_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_EN,(x))
 /* Workings */
#define TYPE_OF_VM_REQUESTS_REMOTE_CONFIG_EN VM_REQUESTS_REMOTE_CONFIG_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUESTS_REMOTE_CONFIG_EN VM_REQUESTS_REMOTE_CONFIG_ENUM

 /* Field VM_REQUESTS_REMOTE_CONFIG_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_vm_requests_remote_config_handle_read_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_HANDLE)
#define hal_set_vm_requests_remote_config_handle_read_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_HANDLE,(x))
#define hal_get_vm_requests_remote_config_handle_write_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_HANDLE)
#define hal_set_vm_requests_remote_config_handle_write_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_HANDLE,(x))
 /* Workings */
#define TYPE_OF_VM_REQUESTS_REMOTE_CONFIG_HANDLE VM_REQUESTS_REMOTE_CONFIG_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUESTS_REMOTE_CONFIG_HANDLE VM_REQUESTS_REMOTE_CONFIG_ENUM

 /* Field VM_REQUESTS_REMOTE_CONFIG_SUBSYS_LSB */
 /* Accessor macros */
#define hal_get_vm_requests_remote_config_subsys_read_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_SUBSYS)
#define hal_set_vm_requests_remote_config_subsys_read_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_READ_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_SUBSYS,(x))
#define hal_get_vm_requests_remote_config_subsys_write_remote_config() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_SUBSYS)
#define hal_set_vm_requests_remote_config_subsys_write_remote_config(x) hal_set_register_field(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG,VM_REQUESTS_REMOTE_CONFIG_SUBSYS,(x))
 /* Workings */
#define TYPE_OF_VM_REQUESTS_REMOTE_CONFIG_SUBSYS VM_REQUESTS_REMOTE_CONFIG_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUESTS_REMOTE_CONFIG_SUBSYS VM_REQUESTS_REMOTE_CONFIG_ENUM

 /* Field VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR

 /* Field VM_REQUEST_STATUS_ACCESS_DENIED */
 /* Accessor macros */
#define hal_get_vm_request_status_access_denied_read_status() hal_get_register_field8(VM_REQUEST_CPU0_READ_STATUS,VM_REQUEST_STATUS_ACCESS_DENIED)
#define hal_get_vm_request_status_access_denied_write_status() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_STATUS,VM_REQUEST_STATUS_ACCESS_DENIED)
 /* Workings */
#define TYPE_OF_VM_REQUEST_STATUS_ACCESS_DENIED VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_STATUS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_STATUS_ACCESS_DENIED(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_STATUS_ACCESS_DENIED VM_REQUESTS_STATUS_ENUM

 /* Field VM_REQUEST_STATUS_ACTIVE */
 /* Accessor macros */
#define hal_get_vm_request_status_active_read_status() hal_get_register_field8(VM_REQUEST_CPU0_READ_STATUS,VM_REQUEST_STATUS_ACTIVE)
#define hal_get_vm_request_status_active_write_status() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_STATUS,VM_REQUEST_STATUS_ACTIVE)
 /* Workings */
#define TYPE_OF_VM_REQUEST_STATUS_ACTIVE VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_STATUS_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_STATUS_ACTIVE VM_REQUESTS_STATUS_ENUM

 /* Field VM_REQUEST_STATUS_BUFFER_HANDLE_LSB */
 /* Accessor macros */
#define hal_get_vm_request_status_buffer_handle_read_status() hal_get_register_field8(VM_REQUEST_CPU0_READ_STATUS,VM_REQUEST_STATUS_BUFFER_HANDLE)
#define hal_get_vm_request_status_buffer_handle_write_status() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_STATUS,VM_REQUEST_STATUS_BUFFER_HANDLE)
 /* Workings */
#define TYPE_OF_VM_REQUEST_STATUS_BUFFER_HANDLE VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_STATUS_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_STATUS_BUFFER_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_STATUS_BUFFER_HANDLE VM_REQUESTS_STATUS_ENUM

 /* Field VM_REQUEST_STATUS_BUFFER_STATUS_LSB */
 /* Accessor macros */
#define hal_get_vm_request_status_buffer_status_read_status() hal_get_register_field8(VM_REQUEST_CPU0_READ_STATUS,VM_REQUEST_STATUS_BUFFER_STATUS)
#define hal_get_vm_request_status_buffer_status_write_status() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_STATUS,VM_REQUEST_STATUS_BUFFER_STATUS)
 /* Workings */
#define TYPE_OF_VM_REQUEST_STATUS_BUFFER_STATUS VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_STATUS_BUFFER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_STATUS_BUFFER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_STATUS_BUFFER_STATUS VM_REQUESTS_STATUS_ENUM

 /* Field VM_REQUEST_STATUS_BUFFER_SUBSYS_LSB */
 /* Accessor macros */
#define hal_get_vm_request_status_buffer_subsys_read_status() hal_get_register_field8(VM_REQUEST_CPU0_READ_STATUS,VM_REQUEST_STATUS_BUFFER_SUBSYS)
#define hal_get_vm_request_status_buffer_subsys_write_status() hal_get_register_field8(VM_REQUEST_CPU0_WRITE_STATUS,VM_REQUEST_STATUS_BUFFER_SUBSYS)
 /* Workings */
#define TYPE_OF_VM_REQUEST_STATUS_BUFFER_SUBSYS VM_REQUESTS_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_STATUS_BUFFER_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_STATUS_BUFFER_SUBSYS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_VM_REQUEST_STATUS_BUFFER_SUBSYS VM_REQUESTS_STATUS_ENUM

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_MMU_VM_LOOKUP_ERROR_FLAGS_MMU_VM_LOOKUP_ERROR_FLAGS
#define CHECK_FIELD_TYPE_MMU_VM_LOOKUP_ERROR_FLAGS_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_HANDLE_VM_BUFFER_ACCESS_CPU0_HANDLE
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_HANDLE_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_OFFSET_READ_VM_BUFFER_ACCESS_CPU0_OFFSET_READ
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_OFFSET_READ_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE_END
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_STATUS_VM_BUFFER_ACCESS_CPU0_STATUS
#define CHECK_FIELD_TYPE_VM_BUFFER_ACCESS_CPU0_STATUS_END
#define CHECK_FIELD_TYPE_VM_CPU0_ACCESS_CTRL_VM_CPU0_ACCESS_CTRL
#define CHECK_FIELD_TYPE_VM_CPU0_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_VM_CPU0_CLEAR_PORT_VM_CPU0_CLEAR_PORT
#define CHECK_FIELD_TYPE_VM_CPU0_CLEAR_PORT_END
#define CHECK_FIELD_TYPE_VM_FREE_LIST_ADDR_VM_FREE_LIST_ADDR
#define CHECK_FIELD_TYPE_VM_FREE_LIST_ADDR_END
#define CHECK_FIELD_TYPE_VM_FREE_LIST_ADD_PAGE_VM_FREE_LIST_ADD_PAGE
#define CHECK_FIELD_TYPE_VM_FREE_LIST_ADD_PAGE_END
#define CHECK_FIELD_TYPE_VM_FREE_LIST_END_ADDR_VM_FREE_LIST_END_ADDR
#define CHECK_FIELD_TYPE_VM_FREE_LIST_END_ADDR_END
#define CHECK_FIELD_TYPE_VM_FREE_LIST_NEXT_ADDR_VM_FREE_LIST_NEXT_ADDR
#define CHECK_FIELD_TYPE_VM_FREE_LIST_NEXT_ADDR_END
#define CHECK_FIELD_TYPE_VM_INTERCONNECT_MUX_DEBUG_ENABLE_VM_INTERCONNECT_MUX_DEBUG_ENABLE
#define CHECK_FIELD_TYPE_VM_INTERCONNECT_MUX_DEBUG_ENABLE_END
#define CHECK_FIELD_TYPE_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES
#define CHECK_FIELD_TYPE_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES_END
#define CHECK_FIELD_TYPE_VM_LOOKUP_ERROR_FLAGS_MMU_VM_LOOKUP_ERROR_FLAGS
#define CHECK_FIELD_TYPE_VM_LOOKUP_ERROR_FLAGS_END
#define CHECK_FIELD_TYPE_VM_LOOKUP_ERROR_FLAGS_CLEAR_MMU_VM_LOOKUP_ERROR_FLAGS
#define CHECK_FIELD_TYPE_VM_LOOKUP_ERROR_FLAGS_CLEAR_END
#define CHECK_FIELD_TYPE_VM_LOOKUP_INT_EVENTS_STICKY_VM_LOOKUP_INT_EVENTS_STICKY
#define CHECK_FIELD_TYPE_VM_LOOKUP_INT_EVENTS_STICKY_END
#define CHECK_FIELD_TYPE_VM_LOOKUP_SELECT_VM_LOOKUP_SELECT
#define CHECK_FIELD_TYPE_VM_LOOKUP_SELECT_END
#define CHECK_FIELD_TYPE_VM_REQUESTS_REMOTE_CONFIG_ENUM_VM_REQUESTS_REMOTE_CONFIG_ENUM
#define CHECK_FIELD_TYPE_VM_REQUESTS_REMOTE_CONFIG_ENUM_END
#define CHECK_FIELD_TYPE_VM_REQUESTS_STATUS_ENUM_VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_VM_REQUESTS_STATUS_ENUM_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_READ_REMOTE_CONFIG_VM_REQUESTS_REMOTE_CONFIG_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_READ_REMOTE_CONFIG_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_READ_STATUS_VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_READ_STATUS_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG_VM_REQUESTS_REMOTE_CONFIG_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_WRITE_STATUS_VM_REQUESTS_STATUS_ENUM
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU0_WRITE_STATUS_END
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR
#define CHECK_FIELD_TYPE_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MMU_VM_LOOKUP_ERROR_FLAGS(next, val, rest) \
   (CHECK_FIELD_TYPE(MMU_VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU0_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU0_HANDLE(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_HANDLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_BUFFER_ACCESS_CPU0_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_BUFFER_ACCESS_CPU0_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_BUFFER_ACCESS_CPU0_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_CPU0_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU0_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_CPU0_CLEAR_PORT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_CPU0_CLEAR_PORT(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_CPU0_CLEAR_PORT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_LOOKUP_ERROR_FLAGS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ERROR_FLAGS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_LOOKUP_ERROR_FLAGS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ERROR_FLAGS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_LOOKUP_ERROR_FLAGS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ERROR_FLAGS_CLEAR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_LOOKUP_ERROR_FLAGS_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_LOOKUP_ERROR_FLAGS_CLEAR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_REMOTE_CONFIG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_REMOTE_CONFIG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUESTS_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUESTS_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUESTS_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU0_READ_REMOTE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_READ_REMOTE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU0_READ_REMOTE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_READ_REMOTE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU0_READ_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_READ_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU0_READ_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_READ_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_VM_REQUEST_CPU0_WRITE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_WRITE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_VM_REQUEST_CPU0_WRITE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(VM_REQUEST_CPU0_WRITE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define MMU_BUFFER_ACCESS_CPU0_DO_ACTION_REG_BITS (1u)
#define hal_set_reg_mmu_buffer_access_cpu0_do_action(x) hal_set_register(MMU_BUFFER_ACCESS_CPU0_DO_ACTION, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu0_do_action() hal_get_register(MMU_BUFFER_ACCESS_CPU0_DO_ACTION, 1)
#define MMU_BUFFER_ACCESS_CPU0_HANDLE_REG_BITS (12u)
#define hal_set_reg_mmu_buffer_access_cpu0_handle(x) hal_set_register(MMU_BUFFER_ACCESS_CPU0_HANDLE, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu0_handle() hal_get_register(MMU_BUFFER_ACCESS_CPU0_HANDLE, 1)
#define MMU_BUFFER_ACCESS_CPU0_OFFSET_READ_REG_BITS (18u)
#define hal_get_reg_mmu_buffer_access_cpu0_offset_read() hal_get_register(MMU_BUFFER_ACCESS_CPU0_OFFSET_READ, 1)
#define MMU_BUFFER_ACCESS_CPU0_OFFSET_WRITE_REG_BITS (18u)
#define hal_set_reg_mmu_buffer_access_cpu0_offset_write(x) hal_set_register(MMU_BUFFER_ACCESS_CPU0_OFFSET_WRITE, x, 1)
#define hal_get_reg_mmu_buffer_access_cpu0_offset_write() hal_get_register(MMU_BUFFER_ACCESS_CPU0_OFFSET_WRITE, 1)
#define MMU_BUFFER_ACCESS_CPU0_STATUS_REG_BITS (5u)
#define hal_get_reg_mmu_buffer_access_cpu0_status() hal_get_register(MMU_BUFFER_ACCESS_CPU0_STATUS, 1)
#define MMU_FREE_LIST_ADDR_REG_BITS (32u)
#define hal_set_reg_mmu_free_list_addr(x) hal_set_register(MMU_FREE_LIST_ADDR, x, 1)
#define hal_get_reg_mmu_free_list_addr() hal_get_register(MMU_FREE_LIST_ADDR, 1)
#define MMU_FREE_LIST_ADD_PAGE_REG_BITS (16u)
#define hal_set_reg_mmu_free_list_add_page(x) hal_set_register(MMU_FREE_LIST_ADD_PAGE, x, 1)
#define hal_get_reg_mmu_free_list_add_page() hal_get_register(MMU_FREE_LIST_ADD_PAGE, 1)
#define MMU_FREE_LIST_END_ADDR_REG_BITS (32u)
#define hal_set_reg_mmu_free_list_end_addr(x) hal_set_register(MMU_FREE_LIST_END_ADDR, x, 1)
#define hal_get_reg_mmu_free_list_end_addr() hal_get_register(MMU_FREE_LIST_END_ADDR, 1)
#define MMU_FREE_LIST_NEXT_ADDR_REG_BITS (32u)
#define hal_get_reg_mmu_free_list_next_addr() hal_get_register(MMU_FREE_LIST_NEXT_ADDR, 1)
#define VM_BUFFER_ACCESS_CPU0_DO_ACTION_REG_BITS (1u)
#define hal_set_reg_vm_buffer_access_cpu0_do_action(x) hal_set_register(VM_BUFFER_ACCESS_CPU0_DO_ACTION, x, 1)
#define hal_get_reg_vm_buffer_access_cpu0_do_action() hal_get_register(VM_BUFFER_ACCESS_CPU0_DO_ACTION, 1)
#define VM_BUFFER_ACCESS_CPU0_HANDLE_REG_BITS (12u)
#define hal_set_reg_vm_buffer_access_cpu0_handle(x) hal_set_register(VM_BUFFER_ACCESS_CPU0_HANDLE, x, 1)
#define hal_get_reg_vm_buffer_access_cpu0_handle() hal_get_register(VM_BUFFER_ACCESS_CPU0_HANDLE, 1)
#define VM_BUFFER_ACCESS_CPU0_OFFSET_READ_REG_BITS (18u)
#define hal_get_reg_vm_buffer_access_cpu0_offset_read() hal_get_register(VM_BUFFER_ACCESS_CPU0_OFFSET_READ, 1)
#define VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE_REG_BITS (18u)
#define hal_set_reg_vm_buffer_access_cpu0_offset_write(x) hal_set_register(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE, x, 1)
#define hal_get_reg_vm_buffer_access_cpu0_offset_write() hal_get_register(VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE, 1)
#define VM_BUFFER_ACCESS_CPU0_STATUS_REG_BITS (5u)
#define hal_get_reg_vm_buffer_access_cpu0_status() hal_get_register(VM_BUFFER_ACCESS_CPU0_STATUS, 1)
#define VM_CPU0_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_vm_cpu0_access_ctrl(x) hal_set_register(VM_CPU0_ACCESS_CTRL, x, 1)
#define hal_get_reg_vm_cpu0_access_ctrl() hal_get_register(VM_CPU0_ACCESS_CTRL, 1)
#define VM_CPU0_CLEAR_PORT_REG_BITS (2u)
#define hal_set_reg_vm_cpu0_clear_port(x) hal_set_register(VM_CPU0_CLEAR_PORT, x, 1)
#define hal_get_reg_vm_cpu0_clear_port() hal_get_register(VM_CPU0_CLEAR_PORT, 1)
#define VM_CPU0_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_vm_cpu0_mutex_lock(x) hal_set_register(VM_CPU0_MUTEX_LOCK, x, 1)
#define hal_get_reg_vm_cpu0_mutex_lock() hal_get_register(VM_CPU0_MUTEX_LOCK, 1)
#define VM_DEBUG_SELECT_REG_BITS (5u)
#define hal_set_reg_vm_debug_select(x) hal_set_register(VM_DEBUG_SELECT, x, 1)
#define hal_get_reg_vm_debug_select() hal_get_register(VM_DEBUG_SELECT, 1)
#define VM_FREE_LIST_ADDR_REG_BITS (32u)
#define hal_set_reg_vm_free_list_addr(x) hal_set_register(VM_FREE_LIST_ADDR, x, 1)
#define hal_get_reg_vm_free_list_addr() hal_get_register(VM_FREE_LIST_ADDR, 1)
#define VM_FREE_LIST_ADD_PAGE_REG_BITS (16u)
#define hal_set_reg_vm_free_list_add_page(x) hal_set_register(VM_FREE_LIST_ADD_PAGE, x, 1)
#define hal_get_reg_vm_free_list_add_page() hal_get_register(VM_FREE_LIST_ADD_PAGE, 1)
#define VM_FREE_LIST_END_ADDR_REG_BITS (32u)
#define hal_set_reg_vm_free_list_end_addr(x) hal_set_register(VM_FREE_LIST_END_ADDR, x, 1)
#define hal_get_reg_vm_free_list_end_addr() hal_get_register(VM_FREE_LIST_END_ADDR, 1)
#define VM_FREE_LIST_NEXT_ADDR_REG_BITS (32u)
#define hal_get_reg_vm_free_list_next_addr() hal_get_register(VM_FREE_LIST_NEXT_ADDR, 1)
#define VM_INTERCONNECT_MUX_DEBUG_ENABLE_REG_BITS (1u)
#define hal_set_reg_vm_interconnect_mux_debug_enable(x) hal_set_register(VM_INTERCONNECT_MUX_DEBUG_ENABLE, x, 1)
#define hal_get_reg_vm_interconnect_mux_debug_enable() hal_get_register(VM_INTERCONNECT_MUX_DEBUG_ENABLE, 1)
#define VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES_REG_BITS (1u)
#define hal_set_reg_vm_lookup_allow_reading_from_unmapped_pages(x) hal_set_register(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES, x, 1)
#define hal_get_reg_vm_lookup_allow_reading_from_unmapped_pages() hal_get_register(VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES, 1)
#define VM_LOOKUP_ERROR_FLAGS_REG_BITS (16u)
#define hal_get_reg_vm_lookup_error_flags() hal_get_register(VM_LOOKUP_ERROR_FLAGS, 1)
#define VM_LOOKUP_ERROR_FLAGS_CLEAR_REG_BITS (16u)
#define hal_set_reg_vm_lookup_error_flags_clear(x) hal_set_register(VM_LOOKUP_ERROR_FLAGS_CLEAR, x, 1)
#define hal_get_reg_vm_lookup_error_flags_clear() hal_get_register(VM_LOOKUP_ERROR_FLAGS_CLEAR, 1)
#define VM_LOOKUP_INT_EVENTS_STICKY_REG_BITS (16u)
#define hal_get_reg_vm_lookup_int_events_sticky() hal_get_register(VM_LOOKUP_INT_EVENTS_STICKY, 1)
#define VM_LOOKUP_SELECT_REG_BITS (4u)
#define hal_set_reg_vm_lookup_select(x) hal_set_register(VM_LOOKUP_SELECT, x, 1)
#define hal_get_reg_vm_lookup_select() hal_get_register(VM_LOOKUP_SELECT, 1)
#define VM_REQUEST_CPU0_READ_REMOTE_CONFIG_REG_BITS (14u)
#define hal_set_reg_vm_request_cpu0_read_remote_config(x) hal_set_register(VM_REQUEST_CPU0_READ_REMOTE_CONFIG, x, 1)
#define hal_get_reg_vm_request_cpu0_read_remote_config() hal_get_register(VM_REQUEST_CPU0_READ_REMOTE_CONFIG, 1)
#define VM_REQUEST_CPU0_READ_STATUS_REG_BITS (18u)
#define hal_get_reg_vm_request_cpu0_read_status() hal_get_register(VM_REQUEST_CPU0_READ_STATUS, 1)
#define VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG_REG_BITS (14u)
#define hal_set_reg_vm_request_cpu0_write_remote_config(x) hal_set_register(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG, x, 1)
#define hal_get_reg_vm_request_cpu0_write_remote_config() hal_get_register(VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG, 1)
#define VM_REQUEST_CPU0_WRITE_STATUS_REG_BITS (18u)
#define hal_get_reg_vm_request_cpu0_write_status() hal_get_register(VM_REQUEST_CPU0_WRITE_STATUS, 1)
#define VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR_REG_BITS (1u)
#define hal_set_reg_vm_request_cpu1_requests_remote_config_denied_status_clear(x) hal_set_register(VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR, x, 1)

 /* Workings */
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU0_DO_ACTION hal_set_reg_mmu_buffer_access_cpu0_do_action
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU0_DO_ACTION hal_get_reg_mmu_buffer_access_cpu0_do_action
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU0_HANDLE hal_set_reg_mmu_buffer_access_cpu0_handle
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU0_HANDLE hal_get_reg_mmu_buffer_access_cpu0_handle
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU0_OFFSET_READ hal_get_reg_mmu_buffer_access_cpu0_offset_read
#define SETTER_FOR_MMU_BUFFER_ACCESS_CPU0_OFFSET_WRITE hal_set_reg_mmu_buffer_access_cpu0_offset_write
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU0_OFFSET_WRITE hal_get_reg_mmu_buffer_access_cpu0_offset_write
#define GETTER_FOR_MMU_BUFFER_ACCESS_CPU0_STATUS hal_get_reg_mmu_buffer_access_cpu0_status
#define SETTER_FOR_MMU_FREE_LIST_ADDR hal_set_reg_mmu_free_list_addr
#define GETTER_FOR_MMU_FREE_LIST_ADDR hal_get_reg_mmu_free_list_addr
#define SETTER_FOR_MMU_FREE_LIST_ADD_PAGE hal_set_reg_mmu_free_list_add_page
#define GETTER_FOR_MMU_FREE_LIST_ADD_PAGE hal_get_reg_mmu_free_list_add_page
#define SETTER_FOR_MMU_FREE_LIST_END_ADDR hal_set_reg_mmu_free_list_end_addr
#define GETTER_FOR_MMU_FREE_LIST_END_ADDR hal_get_reg_mmu_free_list_end_addr
#define GETTER_FOR_MMU_FREE_LIST_NEXT_ADDR hal_get_reg_mmu_free_list_next_addr
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU0_DO_ACTION hal_set_reg_vm_buffer_access_cpu0_do_action
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU0_DO_ACTION hal_get_reg_vm_buffer_access_cpu0_do_action
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU0_HANDLE hal_set_reg_vm_buffer_access_cpu0_handle
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU0_HANDLE hal_get_reg_vm_buffer_access_cpu0_handle
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU0_OFFSET_READ hal_get_reg_vm_buffer_access_cpu0_offset_read
#define SETTER_FOR_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE hal_set_reg_vm_buffer_access_cpu0_offset_write
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU0_OFFSET_WRITE hal_get_reg_vm_buffer_access_cpu0_offset_write
#define GETTER_FOR_VM_BUFFER_ACCESS_CPU0_STATUS hal_get_reg_vm_buffer_access_cpu0_status
#define SETTER_FOR_VM_CPU0_ACCESS_CTRL hal_set_reg_vm_cpu0_access_ctrl
#define GETTER_FOR_VM_CPU0_ACCESS_CTRL hal_get_reg_vm_cpu0_access_ctrl
#define SETTER_FOR_VM_CPU0_CLEAR_PORT hal_set_reg_vm_cpu0_clear_port
#define GETTER_FOR_VM_CPU0_CLEAR_PORT hal_get_reg_vm_cpu0_clear_port
#define SETTER_FOR_VM_CPU0_MUTEX_LOCK hal_set_reg_vm_cpu0_mutex_lock
#define GETTER_FOR_VM_CPU0_MUTEX_LOCK hal_get_reg_vm_cpu0_mutex_lock
#define SETTER_FOR_VM_DEBUG_SELECT hal_set_reg_vm_debug_select
#define GETTER_FOR_VM_DEBUG_SELECT hal_get_reg_vm_debug_select
#define SETTER_FOR_VM_FREE_LIST_ADDR hal_set_reg_vm_free_list_addr
#define GETTER_FOR_VM_FREE_LIST_ADDR hal_get_reg_vm_free_list_addr
#define SETTER_FOR_VM_FREE_LIST_ADD_PAGE hal_set_reg_vm_free_list_add_page
#define GETTER_FOR_VM_FREE_LIST_ADD_PAGE hal_get_reg_vm_free_list_add_page
#define SETTER_FOR_VM_FREE_LIST_END_ADDR hal_set_reg_vm_free_list_end_addr
#define GETTER_FOR_VM_FREE_LIST_END_ADDR hal_get_reg_vm_free_list_end_addr
#define GETTER_FOR_VM_FREE_LIST_NEXT_ADDR hal_get_reg_vm_free_list_next_addr
#define SETTER_FOR_VM_INTERCONNECT_MUX_DEBUG_ENABLE hal_set_reg_vm_interconnect_mux_debug_enable
#define GETTER_FOR_VM_INTERCONNECT_MUX_DEBUG_ENABLE hal_get_reg_vm_interconnect_mux_debug_enable
#define SETTER_FOR_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES hal_set_reg_vm_lookup_allow_reading_from_unmapped_pages
#define GETTER_FOR_VM_LOOKUP_ALLOW_READING_FROM_UNMAPPED_PAGES hal_get_reg_vm_lookup_allow_reading_from_unmapped_pages
#define GETTER_FOR_VM_LOOKUP_ERROR_FLAGS hal_get_reg_vm_lookup_error_flags
#define SETTER_FOR_VM_LOOKUP_ERROR_FLAGS_CLEAR hal_set_reg_vm_lookup_error_flags_clear
#define GETTER_FOR_VM_LOOKUP_ERROR_FLAGS_CLEAR hal_get_reg_vm_lookup_error_flags_clear
#define GETTER_FOR_VM_LOOKUP_INT_EVENTS_STICKY hal_get_reg_vm_lookup_int_events_sticky
#define SETTER_FOR_VM_LOOKUP_SELECT hal_set_reg_vm_lookup_select
#define GETTER_FOR_VM_LOOKUP_SELECT hal_get_reg_vm_lookup_select
#define SETTER_FOR_VM_REQUEST_CPU0_READ_REMOTE_CONFIG hal_set_reg_vm_request_cpu0_read_remote_config
#define GETTER_FOR_VM_REQUEST_CPU0_READ_REMOTE_CONFIG hal_get_reg_vm_request_cpu0_read_remote_config
#define GETTER_FOR_VM_REQUEST_CPU0_READ_STATUS hal_get_reg_vm_request_cpu0_read_status
#define SETTER_FOR_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG hal_set_reg_vm_request_cpu0_write_remote_config
#define GETTER_FOR_VM_REQUEST_CPU0_WRITE_REMOTE_CONFIG hal_get_reg_vm_request_cpu0_write_remote_config
#define GETTER_FOR_VM_REQUEST_CPU0_WRITE_STATUS hal_get_reg_vm_request_cpu0_write_status
#define SETTER_FOR_VM_REQUEST_CPU1_REQUESTS_REMOTE_CONFIG_DENIED_STATUS_CLEAR hal_set_reg_vm_request_cpu1_requests_remote_config_denied_status_clear

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_CPU0_VM) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_CPU0_VM */

#if defined(IO_DEFS_MODULE_KALIMBA_HW_SEMAPHORES) 

#ifndef __HAL_MACROS_H__MODULE_KALIMBA_HW_SEMAPHORES
#define __HAL_MACROS_H__MODULE_KALIMBA_HW_SEMAPHORES

/* -- Hardware semaphores interface registers -- */

 /* Field SEMAPHORE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_semaphore_addr() hal_get_register_field8(SEMAPHORE_ADDR,SEMAPHORE_ADDR)
#define hal_set_semaphore_addr(x) hal_set_register_field(SEMAPHORE_ADDR,SEMAPHORE_ADDR,(x))
 /* Workings */
#define TYPE_OF_SEMAPHORE_ADDR SEMAPHORE_ADDR
#define FIELDS_MASKS_SHIFTED_SEMAPHORE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SEMAPHORE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SEMAPHORE_ADDR SEMAPHORE_ADDR

 /* Field SEMAPHORE_DATA */
 /* Accessor macros */
#define hal_get_semaphore_data() hal_get_register_field8(SEMAPHORE_DATA,SEMAPHORE_DATA)
#define hal_set_semaphore_data(x) hal_set_register_field(SEMAPHORE_DATA,SEMAPHORE_DATA,(x))
 /* Workings */
#define TYPE_OF_SEMAPHORE_DATA SEMAPHORE_DATA
#define FIELDS_MASKS_SHIFTED_SEMAPHORE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SEMAPHORE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SEMAPHORE_DATA SEMAPHORE_DATA

 /* Field SEMAPHORE_STATUS */
 /* Accessor macros */
#define hal_get_semaphore_status() hal_get_register_field8(SEMAPHORE_STATUS,SEMAPHORE_STATUS)
 /* Workings */
#define TYPE_OF_SEMAPHORE_STATUS SEMAPHORE_STATUS
#define FIELDS_MASKS_SHIFTED_SEMAPHORE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SEMAPHORE_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SEMAPHORE_STATUS SEMAPHORE_STATUS

 /* Field SEMAPHORE_STATUS_RAW */
 /* Accessor macros */
#define hal_get_semaphore_status_raw() hal_get_register_field8(SEMAPHORE_STATUS_RAW,SEMAPHORE_STATUS_RAW)
 /* Workings */
#define TYPE_OF_SEMAPHORE_STATUS_RAW SEMAPHORE_STATUS_RAW
#define FIELDS_MASKS_SHIFTED_SEMAPHORE_STATUS_RAW(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_STATUS_RAW, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SEMAPHORE_STATUS_RAW(next, val, rest) \
   (CHECK_FIELD_TYPE(SEMAPHORE_STATUS_RAW, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SEMAPHORE_STATUS_RAW SEMAPHORE_STATUS_RAW

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_SEMAPHORE_ADDR_SEMAPHORE_ADDR
#define CHECK_FIELD_TYPE_SEMAPHORE_ADDR_END
#define CHECK_FIELD_TYPE_SEMAPHORE_DATA_SEMAPHORE_DATA
#define CHECK_FIELD_TYPE_SEMAPHORE_DATA_END
#define CHECK_FIELD_TYPE_SEMAPHORE_STATUS_SEMAPHORE_STATUS
#define CHECK_FIELD_TYPE_SEMAPHORE_STATUS_END
#define CHECK_FIELD_TYPE_SEMAPHORE_STATUS_RAW_SEMAPHORE_STATUS_RAW
#define CHECK_FIELD_TYPE_SEMAPHORE_STATUS_RAW_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define SEMAPHORE_ADDR_REG_BITS (6u)
#define hal_set_reg_semaphore_addr(x) hal_set_register(SEMAPHORE_ADDR, x, 1)
#define hal_get_reg_semaphore_addr() hal_get_register(SEMAPHORE_ADDR, 1)
#define SEMAPHORE_DATA_REG_BITS (1u)
#define hal_set_reg_semaphore_data(x) hal_set_register(SEMAPHORE_DATA, x, 1)
#define hal_get_reg_semaphore_data() hal_get_register(SEMAPHORE_DATA, 1)
#define SEMAPHORE_STATUS_REG_BITS (1u)
#define hal_get_reg_semaphore_status() hal_get_register(SEMAPHORE_STATUS, 1)
#define SEMAPHORE_STATUS_RAW_REG_BITS (1u)
#define hal_get_reg_semaphore_status_raw() hal_get_register(SEMAPHORE_STATUS_RAW, 1)

 /* Workings */
#define SETTER_FOR_SEMAPHORE_ADDR hal_set_reg_semaphore_addr
#define GETTER_FOR_SEMAPHORE_ADDR hal_get_reg_semaphore_addr
#define SETTER_FOR_SEMAPHORE_DATA hal_set_reg_semaphore_data
#define GETTER_FOR_SEMAPHORE_DATA hal_get_reg_semaphore_data
#define GETTER_FOR_SEMAPHORE_STATUS hal_get_reg_semaphore_status
#define GETTER_FOR_SEMAPHORE_STATUS_RAW hal_get_reg_semaphore_status_raw

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_KALIMBA_HW_SEMAPHORES) */
#endif /* __HAL_MACROS_H__MODULE_KALIMBA_HW_SEMAPHORES */


#if defined(IO_DEFS_MODULE_APPS_SYS_CLKGEN) 

#ifndef __HAL_MACROS_H__MODULE_APPS_SYS_CLKGEN
#define __HAL_MACROS_H__MODULE_APPS_SYS_CLKGEN

/* -- Applictions subsystem clock generation registers -- */

 /* Field APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_clkgen__p0_access_permission() ((apps_sys_clkgen__p0_access_permission) hal_get_register_field8(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION))
#define hal_set_apps_sys_clkgen__p0_access_permission(x) hal_set_register_field(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CLKGEN__P0_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL

 /* Field APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_clkgen__p1_access_permission() ((apps_sys_clkgen__p1_access_permission) hal_get_register_field8(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION))
#define hal_set_apps_sys_clkgen__p1_access_permission(x) hal_set_register_field(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CLKGEN__P1_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL

 /* Field APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_clkgen__p2_access_permission() ((apps_sys_clkgen__p2_access_permission) hal_get_register_field8(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION))
#define hal_set_apps_sys_clkgen__p2_access_permission(x) hal_set_register_field(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CLKGEN__P2_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL

 /* Field APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_apps_sys_clkgen__p3_access_permission() ((apps_sys_clkgen__p3_access_permission) hal_get_register_field8(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION))
#define hal_set_apps_sys_clkgen__p3_access_permission(x) hal_set_register_field(CLKGEN_ACCESS_CTRL,APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_APPS_SYS_CLKGEN__P3_ACCESS_PERMISSION CLKGEN_ACCESS_CTRL

 /* Field CLKGEN_120M_REGS_EN */
 /* Accessor macros */
#define hal_get_clkgen_120m_regs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_120M_REGS_EN)
#define hal_set_clkgen_120m_regs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_120M_REGS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_120M_REGS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_120M_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_120M_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_120M_REGS_EN CLKGEN_ENABLES

 /* Field CLKGEN_ADPTRS_EN */
 /* Accessor macros */
#define hal_get_clkgen_adptrs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_ADPTRS_EN)
#define hal_set_clkgen_adptrs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_ADPTRS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_ADPTRS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_ADPTRS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_ADPTRS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_ADPTRS_EN CLKGEN_ENABLES

 /* Field CLKGEN_CORE_CLK_RATE_LSB */
 /* Accessor macros */
#define hal_get_clkgen_core_clk_rate() hal_get_register_field8(CLKGEN_CORE_CLK_RATE,CLKGEN_CORE_CLK_RATE)
#define hal_set_clkgen_core_clk_rate(x) hal_set_register_field(CLKGEN_CORE_CLK_RATE,CLKGEN_CORE_CLK_RATE,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CORE_CLK_RATE CLKGEN_CORE_CLK_RATE
#define FIELDS_MASKS_SHIFTED_CLKGEN_CORE_CLK_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CORE_CLK_RATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CORE_CLK_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_CORE_CLK_RATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CORE_CLK_RATE CLKGEN_CORE_CLK_RATE

 /* Field CLKGEN_CPU0_CACHE_RAM_EN */
 /* Accessor macros */
#define hal_get_clkgen_cpu0_cache_ram_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_CPU0_CACHE_RAM_EN)
#define hal_set_clkgen_cpu0_cache_ram_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_CPU0_CACHE_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CPU0_CACHE_RAM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_CPU0_CACHE_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CPU0_CACHE_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CPU0_CACHE_RAM_EN CLKGEN_ENABLES

 /* Field CLKGEN_CPU0_DM_RAM_EN */
 /* Accessor macros */
#define hal_get_clkgen_cpu0_dm_ram_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_CPU0_DM_RAM_EN)
#define hal_set_clkgen_cpu0_dm_ram_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_CPU0_DM_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CPU0_DM_RAM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_CPU0_DM_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CPU0_DM_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CPU0_DM_RAM_EN CLKGEN_ENABLES

 /* Field CLKGEN_CPU1_CACHE_RAM_EN */
 /* Accessor macros */
#define hal_get_clkgen_cpu1_cache_ram_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_CPU1_CACHE_RAM_EN)
#define hal_set_clkgen_cpu1_cache_ram_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_CPU1_CACHE_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CPU1_CACHE_RAM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_CPU1_CACHE_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CPU1_CACHE_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CPU1_CACHE_RAM_EN CLKGEN_ENABLES

 /* Field CLKGEN_CPU1_DM_RAM_EN */
 /* Accessor macros */
#define hal_get_clkgen_cpu1_dm_ram_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_CPU1_DM_RAM_EN)
#define hal_set_clkgen_cpu1_dm_ram_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_CPU1_DM_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_CPU1_DM_RAM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_CPU1_DM_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_CPU1_DM_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_CPU1_DM_RAM_EN CLKGEN_ENABLES

 /* Field CLKGEN_DATAPATH0_EN */
 /* Accessor macros */
#define hal_get_clkgen_datapath0_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DATAPATH0_EN)
#define hal_set_clkgen_datapath0_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DATAPATH0_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DATAPATH0_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DATAPATH0_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DATAPATH0_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DATAPATH0_EN CLKGEN_ENABLES

 /* Field CLKGEN_DATAPATH1_EN */
 /* Accessor macros */
#define hal_get_clkgen_datapath1_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DATAPATH1_EN)
#define hal_set_clkgen_datapath1_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DATAPATH1_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DATAPATH1_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DATAPATH1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DATAPATH1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DATAPATH1_EN CLKGEN_ENABLES

 /* Field CLKGEN_DEBUG_CLOCKS_ENABLE */
 /* Accessor macros */
#define hal_get_clkgen_debug_clocks_enable() hal_get_register_field8(CLKGEN_DEBUG,CLKGEN_DEBUG_CLOCKS_ENABLE)
#define hal_set_clkgen_debug_clocks_enable(x) hal_set_register_field(CLKGEN_DEBUG,CLKGEN_DEBUG_CLOCKS_ENABLE,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DEBUG_CLOCKS_ENABLE CLKGEN_DEBUG
#define FIELDS_MASKS_SHIFTED_CLKGEN_DEBUG_CLOCKS_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DEBUG_CLOCKS_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DEBUG_CLOCKS_ENABLE CLKGEN_DEBUG

 /* Field CLKGEN_DEBUG_SELECT_LSB */
 /* Accessor macros */
#define hal_get_clkgen_debug_select() hal_get_register_field8(CLKGEN_DEBUG,CLKGEN_DEBUG_SELECT)
#define hal_set_clkgen_debug_select(x) hal_set_register_field(CLKGEN_DEBUG,CLKGEN_DEBUG_SELECT,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DEBUG_SELECT CLKGEN_DEBUG
#define FIELDS_MASKS_SHIFTED_CLKGEN_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DEBUG_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DEBUG_SELECT CLKGEN_DEBUG

 /* Field CLKGEN_DECRYPT0_EN */
 /* Accessor macros */
#define hal_get_clkgen_decrypt0_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DECRYPT0_EN)
#define hal_set_clkgen_decrypt0_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DECRYPT0_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DECRYPT0_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DECRYPT0_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DECRYPT0_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DECRYPT0_EN CLKGEN_ENABLES

 /* Field CLKGEN_DECRYPT1_EN */
 /* Accessor macros */
#define hal_get_clkgen_decrypt1_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DECRYPT1_EN)
#define hal_set_clkgen_decrypt1_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DECRYPT1_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DECRYPT1_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DECRYPT1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DECRYPT1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DECRYPT1_EN CLKGEN_ENABLES

 /* Field CLKGEN_DMAC_EN */
 /* Accessor macros */
#define hal_get_clkgen_dmac_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DMAC_EN)
#define hal_set_clkgen_dmac_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DMAC_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DMAC_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DMAC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DMAC_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DMAC_EN CLKGEN_ENABLES

 /* Field CLKGEN_DSP0_CACHE_EN */
 /* Accessor macros */
#define hal_get_clkgen_dsp0_cache_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DSP0_CACHE_EN)
#define hal_set_clkgen_dsp0_cache_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DSP0_CACHE_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DSP0_CACHE_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DSP0_CACHE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DSP0_CACHE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DSP0_CACHE_EN CLKGEN_ENABLES

 /* Field CLKGEN_DSP1_CACHE_EN */
 /* Accessor macros */
#define hal_get_clkgen_dsp1_cache_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DSP1_CACHE_EN)
#define hal_set_clkgen_dsp1_cache_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DSP1_CACHE_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DSP1_CACHE_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DSP1_CACHE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DSP1_CACHE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DSP1_CACHE_EN CLKGEN_ENABLES

 /* Field CLKGEN_DSP_REGS_EN */
 /* Accessor macros */
#define hal_get_clkgen_dsp_regs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DSP_REGS_EN)
#define hal_set_clkgen_dsp_regs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DSP_REGS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DSP_REGS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DSP_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DSP_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DSP_REGS_EN CLKGEN_ENABLES

 /* Field CLKGEN_DSP_TRACE_EN */
 /* Accessor macros */
#define hal_get_clkgen_dsp_trace_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_DSP_TRACE_EN)
#define hal_set_clkgen_dsp_trace_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_DSP_TRACE_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_DSP_TRACE_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_DSP_TRACE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DSP_TRACE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_DSP_TRACE_EN CLKGEN_ENABLES

 /* Field CLKGEN_INTERCONNECT_EN */
 /* Accessor macros */
#define hal_get_clkgen_interconnect_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_INTERCONNECT_EN)
#define hal_set_clkgen_interconnect_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_INTERCONNECT_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_INTERCONNECT_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_INTERCONNECT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_INTERCONNECT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_INTERCONNECT_EN CLKGEN_ENABLES

 /* Field CLKGEN_LED_CTRL_REGS_EN */
 /* Accessor macros */
#define hal_get_clkgen_led_ctrl_regs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_LED_CTRL_REGS_EN)
#define hal_set_clkgen_led_ctrl_regs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_LED_CTRL_REGS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_LED_CTRL_REGS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_LED_CTRL_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_LED_CTRL_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_LED_CTRL_REGS_EN CLKGEN_ENABLES

 /* Field CLKGEN_PIO_INT_EN */
 /* Accessor macros */
#define hal_get_clkgen_pio_int_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_PIO_INT_EN)
#define hal_set_clkgen_pio_int_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_PIO_INT_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_PIO_INT_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_PIO_INT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_PIO_INT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_PIO_INT_EN CLKGEN_ENABLES

 /* Field CLKGEN_RAM_AUTO_SLEEP_EN */
 /* Accessor macros */
#define hal_get_clkgen_ram_auto_sleep_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_RAM_AUTO_SLEEP_EN)
#define hal_set_clkgen_ram_auto_sleep_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_RAM_AUTO_SLEEP_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_RAM_AUTO_SLEEP_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_RAM_AUTO_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_RAM_AUTO_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_RAM_AUTO_SLEEP_EN CLKGEN_ENABLES

 /* Field CLKGEN_RAM_GATES_EN */
 /* Accessor macros */
#define hal_get_clkgen_ram_gates_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_RAM_GATES_EN)
#define hal_set_clkgen_ram_gates_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_RAM_GATES_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_RAM_GATES_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_RAM_GATES_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_RAM_GATES_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_RAM_GATES_EN CLKGEN_ENABLES

 /* Field CLKGEN_SDIO_HOST_CLK_DIV_RATIO_LSB */
 /* Accessor macros */
#define hal_get_clkgen_sdio_host_clk_div_ratio() hal_get_register_field8(CLKGEN_SDIO_HOST_CLK_CONFIG,CLKGEN_SDIO_HOST_CLK_DIV_RATIO)
#define hal_set_clkgen_sdio_host_clk_div_ratio(x) hal_set_register_field(CLKGEN_SDIO_HOST_CLK_CONFIG,CLKGEN_SDIO_HOST_CLK_DIV_RATIO,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_SDIO_HOST_CLK_DIV_RATIO CLKGEN_SDIO_HOST_CLK_CONFIG
#define FIELDS_MASKS_SHIFTED_CLKGEN_SDIO_HOST_CLK_DIV_RATIO(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_SDIO_HOST_CLK_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SDIO_HOST_CLK_DIV_RATIO(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_SDIO_HOST_CLK_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_SDIO_HOST_CLK_DIV_RATIO CLKGEN_SDIO_HOST_CLK_CONFIG

 /* Field CLKGEN_SDIO_HOST_EN */
 /* Accessor macros */
#define hal_get_clkgen_sdio_host_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_SDIO_HOST_EN)
#define hal_set_clkgen_sdio_host_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_SDIO_HOST_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_SDIO_HOST_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_SDIO_HOST_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SDIO_HOST_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_SDIO_HOST_EN CLKGEN_ENABLES

 /* Field CLKGEN_SHARED_DM_EN */
 /* Accessor macros */
#define hal_get_clkgen_shared_dm_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_SHARED_DM_EN)
#define hal_set_clkgen_shared_dm_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_SHARED_DM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_SHARED_DM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_SHARED_DM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SHARED_DM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_SHARED_DM_EN CLKGEN_ENABLES

 /* Field CLKGEN_SQIF0_REGS_EN */
 /* Accessor macros */
#define hal_get_clkgen_sqif0_regs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_SQIF0_REGS_EN)
#define hal_set_clkgen_sqif0_regs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_SQIF0_REGS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_SQIF0_REGS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_SQIF0_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SQIF0_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_SQIF0_REGS_EN CLKGEN_ENABLES

 /* Field CLKGEN_SQIF1_REGS_EN */
 /* Accessor macros */
#define hal_get_clkgen_sqif1_regs_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_SQIF1_REGS_EN)
#define hal_set_clkgen_sqif1_regs_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_SQIF1_REGS_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_SQIF1_REGS_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_SQIF1_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SQIF1_REGS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_SQIF1_REGS_EN CLKGEN_ENABLES

 /* Field CLKGEN_STATUS_SLOW_CLK */
 /* Accessor macros */
#define hal_get_clkgen_status_slow_clk() hal_get_register_field8(CLKGEN_STATUS_SLOW_CLK,CLKGEN_STATUS_SLOW_CLK)
 /* Workings */
#define TYPE_OF_CLKGEN_STATUS_SLOW_CLK CLKGEN_STATUS_SLOW_CLK
#define FIELDS_MASKS_SHIFTED_CLKGEN_STATUS_SLOW_CLK(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_STATUS_SLOW_CLK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_STATUS_SLOW_CLK(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_STATUS_SLOW_CLK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_STATUS_SLOW_CLK CLKGEN_STATUS_SLOW_CLK

 /* Field CLKGEN_TCM1_RAM_EN */
 /* Accessor macros */
#define hal_get_clkgen_tcm1_ram_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_TCM1_RAM_EN)
#define hal_set_clkgen_tcm1_ram_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_TCM1_RAM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_TCM1_RAM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_TCM1_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_TCM1_RAM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_TCM1_RAM_EN CLKGEN_ENABLES

 /* Field CLKGEN_TIMER_EN */
 /* Accessor macros */
#define hal_get_clkgen_timer_en() hal_get_register_field8(CLKGEN_TIMER_ENABLES,CLKGEN_TIMER_EN)
#define hal_set_clkgen_timer_en(x) hal_set_register_field(CLKGEN_TIMER_ENABLES,CLKGEN_TIMER_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_TIMER_EN CLKGEN_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_TIMER_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_TIMER_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_TIMER_EN CLKGEN_TIMER_ENABLES

 /* Field CLKGEN_TIMER_FAST_EN */
 /* Accessor macros */
#define hal_get_clkgen_timer_fast_en() hal_get_register_field8(CLKGEN_TIMER_ENABLES,CLKGEN_TIMER_FAST_EN)
#define hal_set_clkgen_timer_fast_en(x) hal_set_register_field(CLKGEN_TIMER_ENABLES,CLKGEN_TIMER_FAST_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_TIMER_FAST_EN CLKGEN_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_TIMER_FAST_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_TIMER_FAST_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_TIMER_FAST_EN CLKGEN_TIMER_ENABLES

 /* Field CLKGEN_TIMER_FAST_STATUS_LSB */
 /* Accessor macros */
#define hal_get_clkgen_timer_fast_status() hal_get_register_field16(CLKGEN_TIMER_FAST_STATUS,CLKGEN_TIMER_FAST_STATUS)
 /* Workings */
#define TYPE_OF_CLKGEN_TIMER_FAST_STATUS CLKGEN_TIMER_FAST_STATUS
#define FIELDS_MASKS_SHIFTED_CLKGEN_TIMER_FAST_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_FAST_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_TIMER_FAST_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_FAST_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_TIMER_FAST_STATUS CLKGEN_TIMER_FAST_STATUS

 /* Field CLKGEN_VM_EN */
 /* Accessor macros */
#define hal_get_clkgen_vm_en() hal_get_register_field8(CLKGEN_ENABLES,CLKGEN_VM_EN)
#define hal_set_clkgen_vm_en(x) hal_set_register_field(CLKGEN_ENABLES,CLKGEN_VM_EN,(x))
 /* Workings */
#define TYPE_OF_CLKGEN_VM_EN CLKGEN_ENABLES
#define FIELDS_MASKS_SHIFTED_CLKGEN_VM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_VM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLKGEN_VM_EN CLKGEN_ENABLES

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_CLKGEN_ACCESS_CTRL_CLKGEN_ACCESS_CTRL
#define CHECK_FIELD_TYPE_CLKGEN_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_CLKGEN_CORE_CLK_RATE_CLKGEN_CORE_CLK_RATE
#define CHECK_FIELD_TYPE_CLKGEN_CORE_CLK_RATE_END
#define CHECK_FIELD_TYPE_CLKGEN_DEBUG_CLKGEN_DEBUG
#define CHECK_FIELD_TYPE_CLKGEN_DEBUG_END
#define CHECK_FIELD_TYPE_CLKGEN_ENABLES_CLKGEN_ENABLES
#define CHECK_FIELD_TYPE_CLKGEN_ENABLES_END
#define CHECK_FIELD_TYPE_CLKGEN_SDIO_HOST_CLK_CONFIG_CLKGEN_SDIO_HOST_CLK_CONFIG
#define CHECK_FIELD_TYPE_CLKGEN_SDIO_HOST_CLK_CONFIG_END
#define CHECK_FIELD_TYPE_CLKGEN_STATUS_SLOW_CLK_CLKGEN_STATUS_SLOW_CLK
#define CHECK_FIELD_TYPE_CLKGEN_STATUS_SLOW_CLK_END
#define CHECK_FIELD_TYPE_CLKGEN_TIMER_ENABLES_CLKGEN_TIMER_ENABLES
#define CHECK_FIELD_TYPE_CLKGEN_TIMER_ENABLES_END
#define CHECK_FIELD_TYPE_CLKGEN_TIMER_FAST_STATUS_CLKGEN_TIMER_FAST_STATUS
#define CHECK_FIELD_TYPE_CLKGEN_TIMER_FAST_STATUS_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_CLKGEN_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_SDIO_HOST_CLK_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_SDIO_HOST_CLK_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_SDIO_HOST_CLK_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_SDIO_HOST_CLK_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_CLKGEN_TIMER_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLKGEN_TIMER_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(CLKGEN_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define CLKGEN_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_clkgen_access_ctrl(x) hal_set_register(CLKGEN_ACCESS_CTRL, x, 1)
#define hal_get_reg_clkgen_access_ctrl() hal_get_register(CLKGEN_ACCESS_CTRL, 1)
#define CLKGEN_CORE_CLK_RATE_REG_BITS (4u)
#define hal_set_reg_clkgen_core_clk_rate(x) hal_set_register(CLKGEN_CORE_CLK_RATE, x, 1)
#define hal_get_reg_clkgen_core_clk_rate() hal_get_register(CLKGEN_CORE_CLK_RATE, 1)
#define CLKGEN_DEBUG_REG_BITS (4u)
#define hal_set_reg_clkgen_debug(x) hal_set_register(CLKGEN_DEBUG, x, 1)
#define hal_get_reg_clkgen_debug() hal_get_register(CLKGEN_DEBUG, 1)
#define CLKGEN_ENABLES_REG_BITS (30u)
#define hal_set_reg_clkgen_enables(x) hal_set_register(CLKGEN_ENABLES, x, 1)
#define hal_get_reg_clkgen_enables() hal_get_register(CLKGEN_ENABLES, 1)
#define CLKGEN_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_clkgen_mutex_lock(x) hal_set_register(CLKGEN_MUTEX_LOCK, x, 1)
#define hal_get_reg_clkgen_mutex_lock() hal_get_register(CLKGEN_MUTEX_LOCK, 1)
#define CLKGEN_SDIO_HOST_CLK_CONFIG_REG_BITS (4u)
#define hal_set_reg_clkgen_sdio_host_clk_config(x) hal_set_register(CLKGEN_SDIO_HOST_CLK_CONFIG, x, 1)
#define hal_get_reg_clkgen_sdio_host_clk_config() hal_get_register(CLKGEN_SDIO_HOST_CLK_CONFIG, 1)
#define CLKGEN_STATUS_SLOW_CLK_REG_BITS (1u)
#define hal_get_reg_clkgen_status_slow_clk() hal_get_register(CLKGEN_STATUS_SLOW_CLK, 1)
#define CLKGEN_TIMER_ENABLES_REG_BITS (2u)
#define hal_set_reg_clkgen_timer_enables(x) hal_set_register(CLKGEN_TIMER_ENABLES, x, 1)
#define hal_get_reg_clkgen_timer_enables() hal_get_register(CLKGEN_TIMER_ENABLES, 1)
#define CLKGEN_TIMER_FAST_STATUS_REG_BITS (16u)
#define hal_get_reg_clkgen_timer_fast_status() hal_get_register(CLKGEN_TIMER_FAST_STATUS, 1)

 /* Workings */
#define SETTER_FOR_CLKGEN_ACCESS_CTRL hal_set_reg_clkgen_access_ctrl
#define GETTER_FOR_CLKGEN_ACCESS_CTRL hal_get_reg_clkgen_access_ctrl
#define SETTER_FOR_CLKGEN_CORE_CLK_RATE hal_set_reg_clkgen_core_clk_rate
#define GETTER_FOR_CLKGEN_CORE_CLK_RATE hal_get_reg_clkgen_core_clk_rate
#define SETTER_FOR_CLKGEN_DEBUG hal_set_reg_clkgen_debug
#define GETTER_FOR_CLKGEN_DEBUG hal_get_reg_clkgen_debug
#define SETTER_FOR_CLKGEN_ENABLES hal_set_reg_clkgen_enables
#define GETTER_FOR_CLKGEN_ENABLES hal_get_reg_clkgen_enables
#define SETTER_FOR_CLKGEN_MUTEX_LOCK hal_set_reg_clkgen_mutex_lock
#define GETTER_FOR_CLKGEN_MUTEX_LOCK hal_get_reg_clkgen_mutex_lock
#define SETTER_FOR_CLKGEN_SDIO_HOST_CLK_CONFIG hal_set_reg_clkgen_sdio_host_clk_config
#define GETTER_FOR_CLKGEN_SDIO_HOST_CLK_CONFIG hal_get_reg_clkgen_sdio_host_clk_config
#define GETTER_FOR_CLKGEN_STATUS_SLOW_CLK hal_get_reg_clkgen_status_slow_clk
#define SETTER_FOR_CLKGEN_TIMER_ENABLES hal_set_reg_clkgen_timer_enables
#define GETTER_FOR_CLKGEN_TIMER_ENABLES hal_get_reg_clkgen_timer_enables
#define GETTER_FOR_CLKGEN_TIMER_FAST_STATUS hal_get_reg_clkgen_timer_fast_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_APPS_SYS_CLKGEN) */
#endif /* __HAL_MACROS_H__MODULE_APPS_SYS_CLKGEN */



#if defined(IO_DEFS_MODULE_K32_INTERRUPT) 

#ifndef __HAL_MACROS_H__MODULE_K32_INTERRUPT
#define __HAL_MACROS_H__MODULE_K32_INTERRUPT

/* -- Kalimba 32-bit Interrupt Controller Control registers -- */

 /* Field INT_ACK */
 /* Accessor macros */
#define hal_get_int_ack() hal_get_register_field8(INT_ACK,INT_ACK)
#define hal_set_int_ack(x) hal_set_register_field(INT_ACK,INT_ACK,(x))
 /* Workings */
#define TYPE_OF_INT_ACK INT_ACK
#define FIELDS_MASKS_SHIFTED_INT_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_ACK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_ACK(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_ACK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_ACK INT_ACK

 /* Field INT_ADDR_LSB */
 /* Accessor macros */
#define hal_get_int_addr() hal_get_register_field32(INT_ADDR,INT_ADDR)
#define hal_set_int_addr(x) hal_set_register_field(INT_ADDR,INT_ADDR,(x))
 /* Workings */
#define TYPE_OF_INT_ADDR INT_ADDR
#define FIELDS_MASKS_SHIFTED_INT_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_ADDR INT_ADDR

 /* Field INT_BLOCK_PRIORITY_LSB */
 /* Accessor macros */
#define hal_get_int_block_priority() hal_get_register_field8(INT_BLOCK_PRIORITY,INT_BLOCK_PRIORITY)
#define hal_set_int_block_priority(x) hal_set_register_field(INT_BLOCK_PRIORITY,INT_BLOCK_PRIORITY,(x))
 /* Workings */
#define TYPE_OF_INT_BLOCK_PRIORITY INT_BLOCK_PRIORITY
#define FIELDS_MASKS_SHIFTED_INT_BLOCK_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_BLOCK_PRIORITY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_BLOCK_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_BLOCK_PRIORITY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_BLOCK_PRIORITY INT_BLOCK_PRIORITY

 /* Field INT_CLK_SWITCH_EN */
 /* Accessor macros */
#define hal_get_int_clk_switch_en() hal_get_register_field8(INT_CLK_SWITCH_EN,INT_CLK_SWITCH_EN)
#define hal_set_int_clk_switch_en(x) hal_set_register_field(INT_CLK_SWITCH_EN,INT_CLK_SWITCH_EN,(x))
 /* Workings */
#define TYPE_OF_INT_CLK_SWITCH_EN INT_CLK_SWITCH_EN
#define FIELDS_MASKS_SHIFTED_INT_CLK_SWITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_CLK_SWITCH_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_CLK_SWITCH_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_CLK_SWITCH_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_CLK_SWITCH_EN INT_CLK_SWITCH_EN

 /* Field INT_GBL_ENABLE */
 /* Accessor macros */
#define hal_get_int_gbl_enable() hal_get_register_field8(INT_GBL_ENABLE,INT_GBL_ENABLE)
#define hal_set_int_gbl_enable(x) hal_set_register_field(INT_GBL_ENABLE,INT_GBL_ENABLE,(x))
 /* Workings */
#define TYPE_OF_INT_GBL_ENABLE INT_GBL_ENABLE
#define FIELDS_MASKS_SHIFTED_INT_GBL_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_GBL_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_GBL_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_GBL_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_GBL_ENABLE INT_GBL_ENABLE

 /* Field INT_LOAD_INFO_DONT_CLEAR */
 /* Accessor macros */
#define hal_get_int_load_info_dont_clear() hal_get_register_field8(INT_LOAD_INFO,INT_LOAD_INFO_DONT_CLEAR)
#define hal_set_int_load_info_dont_clear(x) hal_set_register_field(INT_LOAD_INFO,INT_LOAD_INFO_DONT_CLEAR,(x))
 /* Workings */
#define TYPE_OF_INT_LOAD_INFO_DONT_CLEAR INT_LOAD_INFO
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO_DONT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO_DONT_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_LOAD_INFO_DONT_CLEAR INT_LOAD_INFO

 /* Field INT_LOAD_INFO_INT_ACTIVE */
 /* Accessor macros */
#define hal_get_int_load_info_int_active() hal_get_register_field8(INT_LOAD_INFO,INT_LOAD_INFO_INT_ACTIVE)
#define hal_set_int_load_info_int_active(x) hal_set_register_field(INT_LOAD_INFO,INT_LOAD_INFO_INT_ACTIVE,(x))
 /* Workings */
#define TYPE_OF_INT_LOAD_INFO_INT_ACTIVE INT_LOAD_INFO
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO_INT_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO_INT_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_LOAD_INFO_INT_ACTIVE INT_LOAD_INFO

 /* Field INT_LOAD_INFO_PRIORITY_LSB */
 /* Accessor macros */
#define hal_get_int_load_info_priority() hal_get_register_field8(INT_LOAD_INFO,INT_LOAD_INFO_PRIORITY)
#define hal_set_int_load_info_priority(x) hal_set_register_field(INT_LOAD_INFO,INT_LOAD_INFO_PRIORITY,(x))
 /* Workings */
#define TYPE_OF_INT_LOAD_INFO_PRIORITY INT_LOAD_INFO
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_LOAD_INFO_PRIORITY INT_LOAD_INFO

 /* Field INT_LOAD_INFO_REQUEST_LSB */
 /* Accessor macros */
#define hal_get_int_load_info_request() hal_get_register_field8(INT_LOAD_INFO,INT_LOAD_INFO_REQUEST)
#define hal_set_int_load_info_request(x) hal_set_register_field(INT_LOAD_INFO,INT_LOAD_INFO_REQUEST,(x))
 /* Workings */
#define TYPE_OF_INT_LOAD_INFO_REQUEST INT_LOAD_INFO
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_LOAD_INFO_REQUEST INT_LOAD_INFO

 /* Field INT_LOAD_INFO_SOURCE_LSB */
 /* Accessor macros */
#define hal_get_int_load_info_source() hal_get_register_field8(INT_LOAD_INFO,INT_LOAD_INFO_SOURCE)
#define hal_set_int_load_info_source(x) hal_set_register_field(INT_LOAD_INFO,INT_LOAD_INFO_SOURCE,(x))
 /* Workings */
#define TYPE_OF_INT_LOAD_INFO_SOURCE INT_LOAD_INFO
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_LOAD_INFO_SOURCE INT_LOAD_INFO

 /* Field INT_PRIORITY_LSB */
 /* Accessor macros */
#define hal_get_int_priority() hal_get_register_field8(INT_PRIORITY,INT_PRIORITY)
#define hal_set_int_priority(x) hal_set_register_field(INT_PRIORITY,INT_PRIORITY,(x))
 /* Workings */
#define TYPE_OF_INT_PRIORITY INT_PRIORITY
#define FIELDS_MASKS_SHIFTED_INT_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_PRIORITY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_PRIORITY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_PRIORITY INT_PRIORITY

 /* Field INT_SAVE_INFO_ACTIVE */
 /* Accessor macros */
#define hal_get_int_save_info_active() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_ACTIVE)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_ACTIVE INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_ACTIVE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_ACTIVE INT_SAVE_INFO

 /* Field INT_SAVE_INFO_PRIORITY_LSB */
 /* Accessor macros */
#define hal_get_int_save_info_priority() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_PRIORITY)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_PRIORITY INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_PRIORITY(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_PRIORITY INT_SAVE_INFO

 /* Field INT_SAVE_INFO_PRIORITY_NEW_LSB */
 /* Accessor macros */
#define hal_get_int_save_info_priority_new() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_PRIORITY_NEW)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_PRIORITY_NEW INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_PRIORITY_NEW(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_PRIORITY_NEW(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_PRIORITY_NEW INT_SAVE_INFO

 /* Field INT_SAVE_INFO_SOURCE_LSB */
 /* Accessor macros */
#define hal_get_int_save_info_source() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_SOURCE)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_SOURCE INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_SOURCE INT_SAVE_INFO

 /* Field INT_SAVE_INFO_SOURCE_NEW_LSB */
 /* Accessor macros */
#define hal_get_int_save_info_source_new() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_SOURCE_NEW)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_SOURCE_NEW INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_SOURCE_NEW(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_SOURCE_NEW(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_SOURCE_NEW INT_SAVE_INFO

 /* Field INT_SAVE_INFO_UNUSED19 */
 /* Accessor macros */
#define hal_get_int_save_info_unused19() hal_get_register_field8(INT_SAVE_INFO,INT_SAVE_INFO_UNUSED19)
 /* Workings */
#define TYPE_OF_INT_SAVE_INFO_UNUSED19 INT_SAVE_INFO
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO_UNUSED19(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO_UNUSED19(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SAVE_INFO_UNUSED19 INT_SAVE_INFO

 /* Field INT_SELECT_LSB */
 /* Accessor macros */
#define hal_get_int_select() hal_get_register_field8(INT_SELECT,INT_SELECT)
#define hal_set_int_select(x) hal_set_register_field(INT_SELECT,INT_SELECT,(x))
 /* Workings */
#define TYPE_OF_INT_SELECT INT_SELECT
#define FIELDS_MASKS_SHIFTED_INT_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SELECT INT_SELECT

 /* Field INT_SOURCE_CPU1_ACCESS_FAULT_EVENT */
 /* Accessor macros */
#define hal_get_int_source_cpu1_access_fault_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_CPU1_ACCESS_FAULT_EVENT)
#define hal_set_int_source_cpu1_access_fault_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_CPU1_ACCESS_FAULT_EVENT,(x))
#define hal_get_int_source_cpu1_access_fault_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_CPU1_ACCESS_FAULT_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_CPU1_ACCESS_FAULT_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_CPU1_ACCESS_FAULT_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_CPU1_ACCESS_FAULT_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_CPU1_ACCESS_FAULT_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_CPU1_EXCEPTION */
 /* Accessor macros */
#define hal_get_int_source_cpu1_exception_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_CPU1_EXCEPTION)
#define hal_set_int_source_cpu1_exception_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_CPU1_EXCEPTION,(x))
#define hal_get_int_source_cpu1_exception_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_CPU1_EXCEPTION)
 /* Workings */
#define TYPE_OF_INT_SOURCE_CPU1_EXCEPTION INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_CPU1_EXCEPTION(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_CPU1_EXCEPTION(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_CPU1_EXCEPTION INT_SOURCE_ENUM

 /* Field INT_SOURCE_DMAC_QUEUE0_EVENT */
 /* Accessor macros */
#define hal_get_int_source_dmac_queue0_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_DMAC_QUEUE0_EVENT)
#define hal_set_int_source_dmac_queue0_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_DMAC_QUEUE0_EVENT,(x))
#define hal_get_int_source_dmac_queue0_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_DMAC_QUEUE0_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_DMAC_QUEUE0_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_DMAC_QUEUE0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_DMAC_QUEUE0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_DMAC_QUEUE0_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_DMAC_QUEUE1_EVENT */
 /* Accessor macros */
#define hal_get_int_source_dmac_queue1_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_DMAC_QUEUE1_EVENT)
#define hal_set_int_source_dmac_queue1_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_DMAC_QUEUE1_EVENT,(x))
#define hal_get_int_source_dmac_queue1_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_DMAC_QUEUE1_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_DMAC_QUEUE1_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_DMAC_QUEUE1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_DMAC_QUEUE1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_DMAC_QUEUE1_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_INTERPROC_EVENT_1 */
 /* Accessor macros */
#define hal_get_int_source_interproc_event_1_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_INTERPROC_EVENT_1)
#define hal_set_int_source_interproc_event_1_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_INTERPROC_EVENT_1,(x))
#define hal_get_int_source_interproc_event_1_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_INTERPROC_EVENT_1)
 /* Workings */
#define TYPE_OF_INT_SOURCE_INTERPROC_EVENT_1 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_INTERPROC_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_INTERPROC_EVENT_1 INT_SOURCE_ENUM

 /* Field INT_SOURCE_INTERPROC_EVENT_2 */
 /* Accessor macros */
#define hal_get_int_source_interproc_event_2_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_INTERPROC_EVENT_2)
#define hal_set_int_source_interproc_event_2_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_INTERPROC_EVENT_2,(x))
#define hal_get_int_source_interproc_event_2_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_INTERPROC_EVENT_2)
 /* Workings */
#define TYPE_OF_INT_SOURCE_INTERPROC_EVENT_2 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_INTERPROC_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_INTERPROC_EVENT_2 INT_SOURCE_ENUM

 /* Field INT_SOURCE_LAST */
 /* Accessor macros */
#define hal_get_int_source_last_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_LAST)
#define hal_set_int_source_last_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_LAST,(x))
#define hal_get_int_source_last_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_LAST)
 /* Workings */
#define TYPE_OF_INT_SOURCE_LAST INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_LAST(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_LAST INT_SOURCE_ENUM

 /* Field INT_SOURCE_LSB */
 /* Accessor macros */
#define hal_get_int_source() hal_get_register_field8(INT_SOURCE,INT_SOURCE)
 /* Workings */
#define TYPE_OF_INT_SOURCE INT_SOURCE
#define FIELDS_MASKS_SHIFTED_INT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE INT_SOURCE

 /* Field INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT */
 /* Accessor macros */
#define hal_get_int_source_outbound_access_error_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT)
#define hal_set_int_source_outbound_access_error_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT,(x))
#define hal_get_int_source_outbound_access_error_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_OUTBOUND_ACCESS_ERROR_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_PIO_INT_EVENT_1 */
 /* Accessor macros */
#define hal_get_int_source_pio_int_event_1_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_PIO_INT_EVENT_1)
#define hal_set_int_source_pio_int_event_1_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_PIO_INT_EVENT_1,(x))
#define hal_get_int_source_pio_int_event_1_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_PIO_INT_EVENT_1)
 /* Workings */
#define TYPE_OF_INT_SOURCE_PIO_INT_EVENT_1 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_PIO_INT_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_PIO_INT_EVENT_1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_PIO_INT_EVENT_1 INT_SOURCE_ENUM

 /* Field INT_SOURCE_PIO_INT_EVENT_2 */
 /* Accessor macros */
#define hal_get_int_source_pio_int_event_2_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_PIO_INT_EVENT_2)
#define hal_set_int_source_pio_int_event_2_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_PIO_INT_EVENT_2,(x))
#define hal_get_int_source_pio_int_event_2_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_PIO_INT_EVENT_2)
 /* Workings */
#define TYPE_OF_INT_SOURCE_PIO_INT_EVENT_2 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_PIO_INT_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_PIO_INT_EVENT_2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_PIO_INT_EVENT_2 INT_SOURCE_ENUM

 /* Field INT_SOURCE_PIO_TIMER_EVENT_3 */
 /* Accessor macros */
#define hal_get_int_source_pio_timer_event_3_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_PIO_TIMER_EVENT_3)
#define hal_set_int_source_pio_timer_event_3_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_PIO_TIMER_EVENT_3,(x))
#define hal_get_int_source_pio_timer_event_3_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_PIO_TIMER_EVENT_3)
 /* Workings */
#define TYPE_OF_INT_SOURCE_PIO_TIMER_EVENT_3 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_PIO_TIMER_EVENT_3(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_PIO_TIMER_EVENT_3(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_PIO_TIMER_EVENT_3 INT_SOURCE_ENUM

 /* Field INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT */
 /* Accessor macros */
#define hal_get_int_source_sdio_host_interrupt_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT)
#define hal_set_int_source_sdio_host_interrupt_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT,(x))
#define hal_get_int_source_sdio_host_interrupt_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SDIO_HOST_INTERRUPT_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_SDIO_HOST_WAKEUP_EVENT */
 /* Accessor macros */
#define hal_get_int_source_sdio_host_wakeup_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SDIO_HOST_WAKEUP_EVENT)
#define hal_set_int_source_sdio_host_wakeup_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SDIO_HOST_WAKEUP_EVENT,(x))
#define hal_get_int_source_sdio_host_wakeup_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SDIO_HOST_WAKEUP_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SDIO_HOST_WAKEUP_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SDIO_HOST_WAKEUP_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SDIO_HOST_WAKEUP_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SDIO_HOST_WAKEUP_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_SQIF_ARBITER1_EVENT */
 /* Accessor macros */
#define hal_get_int_source_sqif_arbiter1_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SQIF_ARBITER1_EVENT)
#define hal_set_int_source_sqif_arbiter1_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SQIF_ARBITER1_EVENT,(x))
#define hal_get_int_source_sqif_arbiter1_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SQIF_ARBITER1_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SQIF_ARBITER1_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SQIF_ARBITER1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SQIF_ARBITER1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SQIF_ARBITER1_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_SQIF_ARBITER_EVENT */
 /* Accessor macros */
#define hal_get_int_source_sqif_arbiter_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SQIF_ARBITER_EVENT)
#define hal_set_int_source_sqif_arbiter_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SQIF_ARBITER_EVENT,(x))
#define hal_get_int_source_sqif_arbiter_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SQIF_ARBITER_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SQIF_ARBITER_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SQIF_ARBITER_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SQIF_ARBITER_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SQIF_ARBITER_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_SW0 */
 /* Accessor macros */
#define hal_get_int_source_sw0_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SW0)
#define hal_set_int_source_sw0_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SW0,(x))
#define hal_get_int_source_sw0_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SW0)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SW0 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SW0(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SW0(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SW0 INT_SOURCE_ENUM

 /* Field INT_SOURCE_SW1 */
 /* Accessor macros */
#define hal_get_int_source_sw1_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SW1)
#define hal_set_int_source_sw1_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SW1,(x))
#define hal_get_int_source_sw1_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SW1)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SW1 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SW1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SW1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SW1 INT_SOURCE_ENUM

 /* Field INT_SOURCE_SW_ERROR */
 /* Accessor macros */
#define hal_get_int_source_sw_error_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_SW_ERROR)
#define hal_set_int_source_sw_error_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_SW_ERROR,(x))
#define hal_get_int_source_sw_error_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_SW_ERROR)
 /* Workings */
#define TYPE_OF_INT_SOURCE_SW_ERROR INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_SW_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_SW_ERROR(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_SW_ERROR INT_SOURCE_ENUM

 /* Field INT_SOURCE_TBUS_INT_ADPTR_EVENT */
 /* Accessor macros */
#define hal_get_int_source_tbus_int_adptr_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_TBUS_INT_ADPTR_EVENT)
#define hal_set_int_source_tbus_int_adptr_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_TBUS_INT_ADPTR_EVENT,(x))
#define hal_get_int_source_tbus_int_adptr_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_TBUS_INT_ADPTR_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_TBUS_INT_ADPTR_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_TBUS_INT_ADPTR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_TBUS_INT_ADPTR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_TBUS_INT_ADPTR_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_TBUS_MSG_ADPTR_EVENT */
 /* Accessor macros */
#define hal_get_int_source_tbus_msg_adptr_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_TBUS_MSG_ADPTR_EVENT)
#define hal_set_int_source_tbus_msg_adptr_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_TBUS_MSG_ADPTR_EVENT,(x))
#define hal_get_int_source_tbus_msg_adptr_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_TBUS_MSG_ADPTR_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_TBUS_MSG_ADPTR_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_TBUS_MSG_ADPTR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_TBUS_MSG_ADPTR_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_TBUS_MSG_ADPTR_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_TIMER1 */
 /* Accessor macros */
#define hal_get_int_source_timer1_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_TIMER1)
#define hal_set_int_source_timer1_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_TIMER1,(x))
#define hal_get_int_source_timer1_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_TIMER1)
 /* Workings */
#define TYPE_OF_INT_SOURCE_TIMER1 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_TIMER1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_TIMER1(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_TIMER1 INT_SOURCE_ENUM

 /* Field INT_SOURCE_TIMER2 */
 /* Accessor macros */
#define hal_get_int_source_timer2_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_TIMER2)
#define hal_set_int_source_timer2_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_TIMER2,(x))
#define hal_get_int_source_timer2_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_TIMER2)
 /* Workings */
#define TYPE_OF_INT_SOURCE_TIMER2 INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_TIMER2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_TIMER2(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_TIMER2 INT_SOURCE_ENUM

 /* Field INT_SOURCE_TIME_UPDATE_EVENT */
 /* Accessor macros */
#define hal_get_int_source_time_update_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_TIME_UPDATE_EVENT)
#define hal_set_int_source_time_update_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_TIME_UPDATE_EVENT,(x))
#define hal_get_int_source_time_update_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_TIME_UPDATE_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_TIME_UPDATE_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_TIME_UPDATE_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_TIME_UPDATE_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_TIME_UPDATE_EVENT INT_SOURCE_ENUM

 /* Field INT_SOURCE_VML_EVENT */
 /* Accessor macros */
#define hal_get_int_source_vml_event_en() hal_get_register_field8(INT_SOURCES_EN,INT_SOURCE_VML_EVENT)
#define hal_set_int_source_vml_event_en(x) hal_set_register_field(INT_SOURCES_EN,INT_SOURCE_VML_EVENT,(x))
#define hal_get_int_source_vml_event_status() hal_get_register_field8(INT_STATUS,INT_SOURCE_VML_EVENT)
 /* Workings */
#define TYPE_OF_INT_SOURCE_VML_EVENT INT_SOURCE_ENUM
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_VML_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_VML_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SOURCE_VML_EVENT INT_SOURCE_ENUM

 /* Field INT_SW0_EVENT */
 /* Accessor macros */
#define hal_get_int_sw0_event() hal_get_register_field8(INT_SW0_EVENT,INT_SW0_EVENT)
#define hal_set_int_sw0_event(x) hal_set_register_field(INT_SW0_EVENT,INT_SW0_EVENT,(x))
 /* Workings */
#define TYPE_OF_INT_SW0_EVENT INT_SW0_EVENT
#define FIELDS_MASKS_SHIFTED_INT_SW0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SW0_EVENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SW0_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SW0_EVENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SW0_EVENT INT_SW0_EVENT

 /* Field INT_SW1_EVENT */
 /* Accessor macros */
#define hal_get_int_sw1_event() hal_get_register_field8(INT_SW1_EVENT,INT_SW1_EVENT)
#define hal_set_int_sw1_event(x) hal_set_register_field(INT_SW1_EVENT,INT_SW1_EVENT,(x))
 /* Workings */
#define TYPE_OF_INT_SW1_EVENT INT_SW1_EVENT
#define FIELDS_MASKS_SHIFTED_INT_SW1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SW1_EVENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SW1_EVENT(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SW1_EVENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_SW1_EVENT INT_SW1_EVENT

 /* Field INT_UNBLOCK */
 /* Accessor macros */
#define hal_get_int_unblock() hal_get_register_field8(INT_UNBLOCK,INT_UNBLOCK)
#define hal_set_int_unblock(x) hal_set_register_field(INT_UNBLOCK,INT_UNBLOCK,(x))
 /* Workings */
#define TYPE_OF_INT_UNBLOCK INT_UNBLOCK
#define FIELDS_MASKS_SHIFTED_INT_UNBLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_UNBLOCK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_UNBLOCK(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_UNBLOCK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INT_UNBLOCK INT_UNBLOCK

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_INT_ACK_INT_ACK
#define CHECK_FIELD_TYPE_INT_ACK_END
#define CHECK_FIELD_TYPE_INT_ADDR_INT_ADDR
#define CHECK_FIELD_TYPE_INT_ADDR_END
#define CHECK_FIELD_TYPE_INT_BLOCK_PRIORITY_INT_BLOCK_PRIORITY
#define CHECK_FIELD_TYPE_INT_BLOCK_PRIORITY_END
#define CHECK_FIELD_TYPE_INT_CLK_SWITCH_EN_INT_CLK_SWITCH_EN
#define CHECK_FIELD_TYPE_INT_CLK_SWITCH_EN_END
#define CHECK_FIELD_TYPE_INT_GBL_ENABLE_INT_GBL_ENABLE
#define CHECK_FIELD_TYPE_INT_GBL_ENABLE_END
#define CHECK_FIELD_TYPE_INT_LOAD_INFO_INT_LOAD_INFO
#define CHECK_FIELD_TYPE_INT_LOAD_INFO_END
#define CHECK_FIELD_TYPE_INT_PRIORITY_INT_PRIORITY
#define CHECK_FIELD_TYPE_INT_PRIORITY_END
#define CHECK_FIELD_TYPE_INT_SAVE_INFO_INT_SAVE_INFO
#define CHECK_FIELD_TYPE_INT_SAVE_INFO_END
#define CHECK_FIELD_TYPE_INT_SELECT_INT_SELECT
#define CHECK_FIELD_TYPE_INT_SELECT_END
#define CHECK_FIELD_TYPE_INT_SOURCE_INT_SOURCE
#define CHECK_FIELD_TYPE_INT_SOURCE_END
#define CHECK_FIELD_TYPE_INT_SOURCES_EN_INT_SOURCE_ENUM
#define CHECK_FIELD_TYPE_INT_SOURCES_EN_END
#define CHECK_FIELD_TYPE_INT_SOURCE_ENUM_INT_SOURCE_ENUM
#define CHECK_FIELD_TYPE_INT_SOURCE_ENUM_END
#define CHECK_FIELD_TYPE_INT_STATUS_INT_SOURCE_ENUM
#define CHECK_FIELD_TYPE_INT_STATUS_END
#define CHECK_FIELD_TYPE_INT_SW0_EVENT_INT_SW0_EVENT
#define CHECK_FIELD_TYPE_INT_SW0_EVENT_END
#define CHECK_FIELD_TYPE_INT_SW1_EVENT_INT_SW1_EVENT
#define CHECK_FIELD_TYPE_INT_SW1_EVENT_END
#define CHECK_FIELD_TYPE_INT_UNBLOCK_INT_UNBLOCK
#define CHECK_FIELD_TYPE_INT_UNBLOCK_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_INT_LOAD_INFO(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_LOAD_INFO(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_LOAD_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INT_SAVE_INFO(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SAVE_INFO(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SAVE_INFO, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INT_SOURCES_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCES_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCES_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCES_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INT_SOURCE_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_SOURCE_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_SOURCE_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INT_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(INT_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define INT_ACK_REG_BITS (1u)
#define hal_set_reg_int_ack(x) hal_set_register(INT_ACK, x, 1)
#define hal_get_reg_int_ack() hal_get_register(INT_ACK, 1)
#define INT_ADDR_REG_BITS (32u)
#define hal_set_reg_int_addr(x) hal_set_register(INT_ADDR, x, 1)
#define hal_get_reg_int_addr() hal_get_register(INT_ADDR, 1)
#define INT_BLOCK_PRIORITY_REG_BITS (2u)
#define hal_set_reg_int_block_priority(x) hal_set_register(INT_BLOCK_PRIORITY, x, 1)
#define hal_get_reg_int_block_priority() hal_get_register(INT_BLOCK_PRIORITY, 1)
#define INT_CLK_SWITCH_EN_REG_BITS (1u)
#define hal_set_reg_int_clk_switch_en(x) hal_set_register(INT_CLK_SWITCH_EN, x, 1)
#define hal_get_reg_int_clk_switch_en() hal_get_register(INT_CLK_SWITCH_EN, 1)
#define INT_CLOCK_DIVIDE_RATE_REG_BITS (2u)
#define hal_set_reg_int_clock_divide_rate(x) hal_set_register(INT_CLOCK_DIVIDE_RATE, x, 1)
#define hal_get_reg_int_clock_divide_rate() hal_get_register(INT_CLOCK_DIVIDE_RATE, 1)
#define INT_GBL_ENABLE_REG_BITS (1u)
#define hal_set_reg_int_gbl_enable(x) hal_set_register(INT_GBL_ENABLE, x, 1)
#define hal_get_reg_int_gbl_enable() hal_get_register(INT_GBL_ENABLE, 1)
#define INT_LOAD_INFO_REG_BITS (20u)
#define hal_set_reg_int_load_info(x) hal_set_register(INT_LOAD_INFO, x, 1)
#define hal_get_reg_int_load_info() hal_get_register(INT_LOAD_INFO, 1)
#define INT_PRIORITY_REG_BITS (2u)
#define hal_set_reg_int_priority(x) hal_set_register(INT_PRIORITY, x, 1)
#define hal_get_reg_int_priority() hal_get_register(INT_PRIORITY, 1)
#define INT_SAVE_INFO_REG_BITS (22u)
#define hal_get_reg_int_save_info() hal_get_register(INT_SAVE_INFO, 1)
#define INT_SELECT_REG_BITS (5u)
#define hal_set_reg_int_select(x) hal_set_register(INT_SELECT, x, 1)
#define hal_get_reg_int_select() hal_get_register(INT_SELECT, 1)
#define INT_SOURCE_REG_BITS (5u)
#define hal_get_reg_int_source() hal_get_register(INT_SOURCE, 1)
#define INT_SOURCES_EN_REG_BITS (32u)
#define hal_set_reg_int_sources_en(x) hal_set_register(INT_SOURCES_EN, x, 1)
#define hal_get_reg_int_sources_en() hal_get_register(INT_SOURCES_EN, 1)
#define INT_STATUS_REG_BITS (32u)
#define hal_get_reg_int_status() hal_get_register(INT_STATUS, 1)
#define INT_SW0_EVENT_REG_BITS (1u)
#define hal_set_reg_int_sw0_event(x) hal_set_register(INT_SW0_EVENT, x, 1)
#define hal_get_reg_int_sw0_event() hal_get_register(INT_SW0_EVENT, 1)
#define INT_SW1_EVENT_REG_BITS (1u)
#define hal_set_reg_int_sw1_event(x) hal_set_register(INT_SW1_EVENT, x, 1)
#define hal_get_reg_int_sw1_event() hal_get_register(INT_SW1_EVENT, 1)
#define INT_UNBLOCK_REG_BITS (1u)
#define hal_set_reg_int_unblock(x) hal_set_register(INT_UNBLOCK, x, 1)
#define hal_get_reg_int_unblock() hal_get_register(INT_UNBLOCK, 1)

 /* Workings */
#define SETTER_FOR_INT_ACK hal_set_reg_int_ack
#define GETTER_FOR_INT_ACK hal_get_reg_int_ack
#define SETTER_FOR_INT_ADDR hal_set_reg_int_addr
#define GETTER_FOR_INT_ADDR hal_get_reg_int_addr
#define SETTER_FOR_INT_BLOCK_PRIORITY hal_set_reg_int_block_priority
#define GETTER_FOR_INT_BLOCK_PRIORITY hal_get_reg_int_block_priority
#define SETTER_FOR_INT_CLK_SWITCH_EN hal_set_reg_int_clk_switch_en
#define GETTER_FOR_INT_CLK_SWITCH_EN hal_get_reg_int_clk_switch_en
#define SETTER_FOR_INT_CLOCK_DIVIDE_RATE hal_set_reg_int_clock_divide_rate
#define GETTER_FOR_INT_CLOCK_DIVIDE_RATE hal_get_reg_int_clock_divide_rate
#define SETTER_FOR_INT_GBL_ENABLE hal_set_reg_int_gbl_enable
#define GETTER_FOR_INT_GBL_ENABLE hal_get_reg_int_gbl_enable
#define SETTER_FOR_INT_LOAD_INFO hal_set_reg_int_load_info
#define GETTER_FOR_INT_LOAD_INFO hal_get_reg_int_load_info
#define SETTER_FOR_INT_PRIORITY hal_set_reg_int_priority
#define GETTER_FOR_INT_PRIORITY hal_get_reg_int_priority
#define GETTER_FOR_INT_SAVE_INFO hal_get_reg_int_save_info
#define SETTER_FOR_INT_SELECT hal_set_reg_int_select
#define GETTER_FOR_INT_SELECT hal_get_reg_int_select
#define GETTER_FOR_INT_SOURCE hal_get_reg_int_source
#define SETTER_FOR_INT_SOURCES_EN hal_set_reg_int_sources_en
#define GETTER_FOR_INT_SOURCES_EN hal_get_reg_int_sources_en
#define GETTER_FOR_INT_STATUS hal_get_reg_int_status
#define SETTER_FOR_INT_SW0_EVENT hal_set_reg_int_sw0_event
#define GETTER_FOR_INT_SW0_EVENT hal_get_reg_int_sw0_event
#define SETTER_FOR_INT_SW1_EVENT hal_set_reg_int_sw1_event
#define GETTER_FOR_INT_SW1_EVENT hal_get_reg_int_sw1_event
#define SETTER_FOR_INT_UNBLOCK hal_set_reg_int_unblock
#define GETTER_FOR_INT_UNBLOCK hal_get_reg_int_unblock

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_INTERRUPT) */
#endif /* __HAL_MACROS_H__MODULE_K32_INTERRUPT */




#if defined(IO_DEFS_MODULE_SQIF_DATAPATH) 

#ifndef __HAL_MACROS_H__MODULE_SQIF_DATAPATH
#define __HAL_MACROS_H__MODULE_SQIF_DATAPATH

/* -- SQIF Datapath Registers -- */

 /* Field DEBUG_SEL_H_LSB */
 /* Accessor macros */
#define hal_get_debug_sel_h() hal_get_register_field8(SQIF_DATAPATH_BANK,DEBUG_SEL_H)
#define hal_set_debug_sel_h(x) hal_set_register_field(SQIF_DATAPATH_BANK,DEBUG_SEL_H,(x))
 /* Workings */
#define TYPE_OF_DEBUG_SEL_H SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_DEBUG_SEL_H(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DEBUG_SEL_H(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DEBUG_SEL_H SQIF_DATAPATH_BANK

 /* Field DEBUG_SEL_L_LSB */
 /* Accessor macros */
#define hal_get_debug_sel_l() hal_get_register_field8(SQIF_DATAPATH_BANK,DEBUG_SEL_L)
#define hal_set_debug_sel_l(x) hal_set_register_field(SQIF_DATAPATH_BANK,DEBUG_SEL_L,(x))
 /* Workings */
#define TYPE_OF_DEBUG_SEL_L SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_DEBUG_SEL_L(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DEBUG_SEL_L(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DEBUG_SEL_L SQIF_DATAPATH_BANK

 /* Field IRQ_PENDING */
 /* Accessor macros */
#define hal_get_irq_pending() hal_get_register_field8(SQIF_DATAPATH_STATUS,IRQ_PENDING)
#define hal_set_irq_pending(x) hal_set_register_field(SQIF_DATAPATH_STATUS,IRQ_PENDING,(x))
 /* Workings */
#define TYPE_OF_IRQ_PENDING SQIF_DATAPATH_STATUS
#define FIELDS_MASKS_SHIFTED_IRQ_PENDING(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_IRQ_PENDING(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_IRQ_PENDING SQIF_DATAPATH_STATUS

 /* Field PERF_CTR_CLEAR */
 /* Accessor macros */
#define hal_get_perf_ctr_clear() hal_get_register_field8(SQIF_DATAPATH_BANK,PERF_CTR_CLEAR)
#define hal_set_perf_ctr_clear(x) hal_set_register_field(SQIF_DATAPATH_BANK,PERF_CTR_CLEAR,(x))
 /* Workings */
#define TYPE_OF_PERF_CTR_CLEAR SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_PERF_CTR_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PERF_CTR_CLEAR(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PERF_CTR_CLEAR SQIF_DATAPATH_BANK

 /* Field PERF_CTR_SEL_LSB */
 /* Accessor macros */
#define hal_get_perf_ctr_sel() hal_get_register_field8(SQIF_DATAPATH_BANK,PERF_CTR_SEL)
#define hal_set_perf_ctr_sel(x) hal_set_register_field(SQIF_DATAPATH_BANK,PERF_CTR_SEL,(x))
 /* Workings */
#define TYPE_OF_PERF_CTR_SEL SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_PERF_CTR_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PERF_CTR_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PERF_CTR_SEL SQIF_DATAPATH_BANK

 /* Field PERF_PORT_SEL_ALL */
 /* Accessor macros */
#define hal_get_perf_port_sel_all() hal_get_register_field8(SQIF_DATAPATH_BANK,PERF_PORT_SEL_ALL)
#define hal_set_perf_port_sel_all(x) hal_set_register_field(SQIF_DATAPATH_BANK,PERF_PORT_SEL_ALL,(x))
 /* Workings */
#define TYPE_OF_PERF_PORT_SEL_ALL SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_PERF_PORT_SEL_ALL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PERF_PORT_SEL_ALL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PERF_PORT_SEL_ALL SQIF_DATAPATH_BANK

 /* Field PERF_PORT_SEL_LSB */
 /* Accessor macros */
#define hal_get_perf_port_sel() hal_get_register_field8(SQIF_DATAPATH_BANK,PERF_PORT_SEL)
#define hal_set_perf_port_sel(x) hal_set_register_field(SQIF_DATAPATH_BANK,PERF_PORT_SEL,(x))
 /* Workings */
#define TYPE_OF_PERF_PORT_SEL SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_PERF_PORT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PERF_PORT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PERF_PORT_SEL SQIF_DATAPATH_BANK

 /* Field REG_INDEX_LSB */
 /* Accessor macros */
#define hal_get_reg_index() hal_get_register_field8(SQIF_DATAPATH_BANK,REG_INDEX)
#define hal_set_reg_index(x) hal_set_register_field(SQIF_DATAPATH_BANK,REG_INDEX,(x))
 /* Workings */
#define TYPE_OF_REG_INDEX SQIF_DATAPATH_BANK
#define FIELDS_MASKS_SHIFTED_REG_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_REG_INDEX(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_REG_INDEX SQIF_DATAPATH_BANK

 /* Field SOFT_RESET */
 /* Accessor macros */
#define hal_get_soft_reset() hal_get_register_field8(SQIF_DATAPATH_STATUS,SOFT_RESET)
#define hal_set_soft_reset(x) hal_set_register_field(SQIF_DATAPATH_STATUS,SOFT_RESET,(x))
 /* Workings */
#define TYPE_OF_SOFT_RESET SQIF_DATAPATH_STATUS
#define FIELDS_MASKS_SHIFTED_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SOFT_RESET(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SOFT_RESET SQIF_DATAPATH_STATUS

 /* Field SQIF_DATAPATH_PERF_COUNTER_LSB */
 /* Accessor macros */
#define hal_get_sqif_datapath_perf_counter() hal_get_register_field32(SQIF_DATAPATH_PERF_COUNTER,SQIF_DATAPATH_PERF_COUNTER)
 /* Workings */
#define TYPE_OF_SQIF_DATAPATH_PERF_COUNTER SQIF_DATAPATH_PERF_COUNTER
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH_PERF_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_PERF_COUNTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH_PERF_COUNTER(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_PERF_COUNTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DATAPATH_PERF_COUNTER SQIF_DATAPATH_PERF_COUNTER

 /* Field SQIF_DATAPATH__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif_datapath__p0_access_permission() ((sqif_datapath__p0_access_permission) hal_get_register_field8(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P0_ACCESS_PERMISSION))
#define hal_set_sqif_datapath__p0_access_permission(x) hal_set_register_field(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF_DATAPATH__P0_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DATAPATH__P0_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL

 /* Field SQIF_DATAPATH__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif_datapath__p1_access_permission() ((sqif_datapath__p1_access_permission) hal_get_register_field8(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P1_ACCESS_PERMISSION))
#define hal_set_sqif_datapath__p1_access_permission(x) hal_set_register_field(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF_DATAPATH__P1_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DATAPATH__P1_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL

 /* Field SQIF_DATAPATH__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif_datapath__p2_access_permission() ((sqif_datapath__p2_access_permission) hal_get_register_field8(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P2_ACCESS_PERMISSION))
#define hal_set_sqif_datapath__p2_access_permission(x) hal_set_register_field(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF_DATAPATH__P2_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DATAPATH__P2_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL

 /* Field SQIF_DATAPATH__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_sqif_datapath__p3_access_permission() ((sqif_datapath__p3_access_permission) hal_get_register_field8(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P3_ACCESS_PERMISSION))
#define hal_set_sqif_datapath__p3_access_permission(x) hal_set_register_field(SQIF_DATAPATH_ACCESS_CTRL,SQIF_DATAPATH__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_SQIF_DATAPATH__P3_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SQIF_DATAPATH__P3_ACCESS_PERMISSION SQIF_DATAPATH_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_ACCESS_CTRL_SQIF_DATAPATH_ACCESS_CTRL
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_BANK_SQIF_DATAPATH_BANK
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_BANK_END
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_PERF_COUNTER_SQIF_DATAPATH_PERF_COUNTER
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_PERF_COUNTER_END
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_STATUS_SQIF_DATAPATH_STATUS
#define CHECK_FIELD_TYPE_SQIF_DATAPATH_STATUS_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH_BANK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH_BANK(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_BANK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_SQIF_DATAPATH_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SQIF_DATAPATH_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SQIF_DATAPATH_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define SQIF_DATAPATH_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_sqif_datapath_access_ctrl(x) hal_set_register(SQIF_DATAPATH_ACCESS_CTRL, x, 1)
#define hal_get_reg_sqif_datapath_access_ctrl() hal_get_register(SQIF_DATAPATH_ACCESS_CTRL, 1)
#define SQIF_DATAPATH_BANK_REG_BITS (15u)
#define hal_set_reg_sqif_datapath_bank(x) hal_set_register(SQIF_DATAPATH_BANK, x, 1)
#define hal_get_reg_sqif_datapath_bank() hal_get_register(SQIF_DATAPATH_BANK, 1)
#define SQIF_DATAPATH_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_sqif_datapath_mutex_lock(x) hal_set_register(SQIF_DATAPATH_MUTEX_LOCK, x, 1)
#define hal_get_reg_sqif_datapath_mutex_lock() hal_get_register(SQIF_DATAPATH_MUTEX_LOCK, 1)
#define SQIF_DATAPATH_PERF_COUNTER_REG_BITS (32u)
#define hal_get_reg_sqif_datapath_perf_counter() hal_get_register(SQIF_DATAPATH_PERF_COUNTER, 1)
#define SQIF_DATAPATH_STATUS_REG_BITS (2u)
#define hal_set_reg_sqif_datapath_status(x) hal_set_register(SQIF_DATAPATH_STATUS, x, 1)
#define hal_get_reg_sqif_datapath_status() hal_get_register(SQIF_DATAPATH_STATUS, 1)

 /* Workings */
#define SETTER_FOR_SQIF_DATAPATH_ACCESS_CTRL hal_set_reg_sqif_datapath_access_ctrl
#define GETTER_FOR_SQIF_DATAPATH_ACCESS_CTRL hal_get_reg_sqif_datapath_access_ctrl
#define SETTER_FOR_SQIF_DATAPATH_BANK hal_set_reg_sqif_datapath_bank
#define GETTER_FOR_SQIF_DATAPATH_BANK hal_get_reg_sqif_datapath_bank
#define SETTER_FOR_SQIF_DATAPATH_MUTEX_LOCK hal_set_reg_sqif_datapath_mutex_lock
#define GETTER_FOR_SQIF_DATAPATH_MUTEX_LOCK hal_get_reg_sqif_datapath_mutex_lock
#define GETTER_FOR_SQIF_DATAPATH_PERF_COUNTER hal_get_reg_sqif_datapath_perf_counter
#define SETTER_FOR_SQIF_DATAPATH_STATUS hal_set_reg_sqif_datapath_status
#define GETTER_FOR_SQIF_DATAPATH_STATUS hal_get_reg_sqif_datapath_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_SQIF_DATAPATH) */
#endif /* __HAL_MACROS_H__MODULE_SQIF_DATAPATH */




#if defined(IO_DEFS_MODULE_KALIMBA_PIO_INT) 

#ifndef __HAL_MACROS_H__MODULE_KALIMBA_PIO_INT
#define __HAL_MACROS_H__MODULE_KALIMBA_PIO_INT

/* -- Generic Kalimba Timer registers -- */

 /* Field KALIMBA_PIO_INT_TIMER_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_EN)
#define hal_set_kalimba_pio_int_timer_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_default() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT)
#define hal_set_kalimba_pio_int_timer_pio1_event_default(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_DEFAULT KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN)
#define hal_set_kalimba_pio_int_timer_pio1_event_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_invert_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN)
#define hal_set_kalimba_pio_int_timer_pio1_event_invert_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_INVERT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_period_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE)
#define hal_set_kalimba_pio_int_timer_pio1_event_period_fine(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_period() hal_get_register_field16(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD)
#define hal_set_kalimba_pio_int_timer_pio1_event_period(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_sel_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN)
#define hal_set_kalimba_pio_int_timer_pio1_event_sel_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_EN KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_sel_pos() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS)
#define hal_set_kalimba_pio_int_timer_pio1_event_sel_pos(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_POS KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_time_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE)
#define hal_set_kalimba_pio_int_timer_pio1_event_time_fine(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio1_event_time() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME)
#define hal_set_kalimba_pio_int_timer_pio1_event_time(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME,KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_default() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT)
#define hal_set_kalimba_pio_int_timer_pio2_event_default(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_DEFAULT KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN)
#define hal_set_kalimba_pio_int_timer_pio2_event_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_invert_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN)
#define hal_set_kalimba_pio_int_timer_pio2_event_invert_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_INVERT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_period_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE)
#define hal_set_kalimba_pio_int_timer_pio2_event_period_fine(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_period() hal_get_register_field16(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD)
#define hal_set_kalimba_pio_int_timer_pio2_event_period(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_sel_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN)
#define hal_set_kalimba_pio_int_timer_pio2_event_sel_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_EN KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_sel_pos() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS)
#define hal_set_kalimba_pio_int_timer_pio2_event_sel_pos(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_POS KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_time_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE)
#define hal_set_kalimba_pio_int_timer_pio2_event_time_fine(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio2_event_time() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME)
#define hal_set_kalimba_pio_int_timer_pio2_event_time(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME,KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe1_falling_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN)
#define hal_set_kalimba_pio_int_timer_pio_strobe1_falling_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_FALLING_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE1_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe1() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE1)
#define hal_set_kalimba_pio_int_timer_pio_strobe1(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE1,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE1 KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1 KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe1_rising_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN)
#define hal_set_kalimba_pio_int_timer_pio_strobe1_rising_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_RISING_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe1_time_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE)
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe1_time() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME,KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME)
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe2_falling_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN)
#define hal_set_kalimba_pio_int_timer_pio_strobe2_falling_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_FALLING_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE2_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe2() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE2)
#define hal_set_kalimba_pio_int_timer_pio_strobe2(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE2,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE2 KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2 KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe2_rising_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN)
#define hal_set_kalimba_pio_int_timer_pio_strobe2_rising_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_RISING_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe2_time_fine() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE)
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe2_time() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME,KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME)
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME

 /* Field KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_pio_strobe_unused() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED)
#define hal_set_kalimba_pio_int_timer_pio_strobe_unused(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT,KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE_UNUSED KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT

 /* Field KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_sw1_event_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN)
#define hal_set_kalimba_pio_int_timer_sw1_event_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_SW1_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_sw2_event_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN)
#define hal_set_kalimba_pio_int_timer_sw2_event_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_SW2_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_sw3_event_en() hal_get_register_field8(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN)
#define hal_set_kalimba_pio_int_timer_sw3_event_en(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_ENABLES,KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_EN KALIMBA_PIO_INT_TIMER_ENABLES

 /* Field KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_sw3_event_time() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME,KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME)
#define hal_set_kalimba_pio_int_timer_sw3_event_time(x) hal_set_register_field(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME,KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME

 /* Field KALIMBA_PIO_INT_TIMER_TIME2_LSB */
 /* Accessor macros */
#define hal_get_kalimba_pio_int_timer_time2() hal_get_register_field32(KALIMBA_PIO_INT_TIMER_TIME2,KALIMBA_PIO_INT_TIMER_TIME2)
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT_TIMER_TIME2 KALIMBA_PIO_INT_TIMER_TIME2
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_TIME2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_TIME2(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_TIME2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT_TIMER_TIME2 KALIMBA_PIO_INT_TIMER_TIME2

 /* Field KALIMBA_PIO_INT__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_pio_int__p0_access_permission() ((kalimba_pio_int__p0_access_permission) hal_get_register_field8(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P0_ACCESS_PERMISSION))
#define hal_set_kalimba_pio_int__p0_access_permission(x) hal_set_register_field(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT__P0_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT__P0_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL

 /* Field KALIMBA_PIO_INT__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_pio_int__p1_access_permission() ((kalimba_pio_int__p1_access_permission) hal_get_register_field8(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P1_ACCESS_PERMISSION))
#define hal_set_kalimba_pio_int__p1_access_permission(x) hal_set_register_field(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT__P1_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT__P1_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL

 /* Field KALIMBA_PIO_INT__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_pio_int__p2_access_permission() ((kalimba_pio_int__p2_access_permission) hal_get_register_field8(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P2_ACCESS_PERMISSION))
#define hal_set_kalimba_pio_int__p2_access_permission(x) hal_set_register_field(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT__P2_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT__P2_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL

 /* Field KALIMBA_PIO_INT__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_kalimba_pio_int__p3_access_permission() ((kalimba_pio_int__p3_access_permission) hal_get_register_field8(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P3_ACCESS_PERMISSION))
#define hal_set_kalimba_pio_int__p3_access_permission(x) hal_set_register_field(KALIMBA_PIO_INT_ACCESS_CTRL,KALIMBA_PIO_INT__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_KALIMBA_PIO_INT__P3_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_KALIMBA_PIO_INT__P3_ACCESS_PERMISSION KALIMBA_PIO_INT_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_ACCESS_CTRL_KALIMBA_PIO_INT_ACCESS_CTRL
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_ENABLES_KALIMBA_PIO_INT_TIMER_ENABLES
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_ENABLES_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME_END
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_TIME2_KALIMBA_PIO_INT_TIMER_TIME2
#define CHECK_FIELD_TYPE_KALIMBA_PIO_INT_TIMER_TIME2_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_ENABLES(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_ENABLES, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define KALIMBA_PIO_INT_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_kalimba_pio_int_access_ctrl(x) hal_set_register(KALIMBA_PIO_INT_ACCESS_CTRL, x, 1)
#define hal_get_reg_kalimba_pio_int_access_ctrl() hal_get_register(KALIMBA_PIO_INT_ACCESS_CTRL, 1)
#define KALIMBA_PIO_INT_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_kalimba_pio_int_mutex_lock(x) hal_set_register(KALIMBA_PIO_INT_MUTEX_LOCK, x, 1)
#define hal_get_reg_kalimba_pio_int_mutex_lock() hal_get_register(KALIMBA_PIO_INT_MUTEX_LOCK, 1)
#define KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_REG_BITS (72u)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE, i)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_word0() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_word1() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_word2() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD2, 1)
#define KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA, i, x)
#define hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA, i)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word0() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word1() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word2() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD2, 1)
#define KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio1_event_falling_enable(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE, i, x)
#define hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_falling_enable(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE, i)
#define hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word0() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word1() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word2() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD2, 1)
#define KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio1_event_rising_enable(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE, i, x)
#define hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_rising_enable(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE, i)
#define hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word0() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word1() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word2() hal_get_register(KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD2, 1)
#define KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_REG_BITS (72u)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE, i)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_word0() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_word1() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_word2() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD2, 1)
#define KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA, i, x)
#define hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA, i)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word0() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word1() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word2() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD2, 1)
#define KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio2_event_falling_enable(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE, i, x)
#define hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_falling_enable(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE, i)
#define hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word0() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word1() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word2() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD2, 1)
#define KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_pio2_event_rising_enable(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE, i, x)
#define hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word0(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word1(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word2(x) hal_set_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_rising_enable(i) hal_get_register_indexed(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE, i)
#define hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word0() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word1() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word2() hal_get_register(KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD2, 1)
#define KALIMBA_PIO_INT_TIMER_ENABLES_REG_BITS (14u)
#define hal_set_reg_kalimba_pio_int_timer_enables(x) hal_set_register(KALIMBA_PIO_INT_TIMER_ENABLES, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_enables() hal_get_register(KALIMBA_PIO_INT_TIMER_ENABLES, 1)
#define KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_REG_BITS (16u)
#define hal_set_reg_kalimba_pio_int_timer_pio1_event_period(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio1_event_period() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD, 1)
#define KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio1_event_period_fine(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio1_event_period_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio1_event_sel(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio1_event_sel() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL, 1)
#define KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_REG_BITS (32u)
#define hal_set_reg_kalimba_pio_int_timer_pio1_event_time(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio1_event_time() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME, 1)
#define KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio1_event_time_fine(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio1_event_time_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_REG_BITS (16u)
#define hal_set_reg_kalimba_pio_int_timer_pio2_event_period(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio2_event_period() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD, 1)
#define KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio2_event_period_fine(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio2_event_period_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio2_event_sel(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio2_event_sel() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL, 1)
#define KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_REG_BITS (32u)
#define hal_set_reg_kalimba_pio_int_timer_pio2_event_time(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio2_event_time() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME, 1)
#define KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE_REG_BITS (7u)
#define hal_set_reg_kalimba_pio_int_timer_pio2_event_time_fine(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio2_event_time_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_REG_BITS (32u)
#define hal_get_reg_kalimba_pio_int_timer_pio_strobe1_time() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME, 1)
#define KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE_REG_BITS (7u)
#define hal_get_reg_kalimba_pio_int_timer_pio_strobe1_time_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_REG_BITS (32u)
#define hal_get_reg_kalimba_pio_int_timer_pio_strobe2_time() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME, 1)
#define KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE_REG_BITS (7u)
#define hal_get_reg_kalimba_pio_int_timer_pio_strobe2_time_fine() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE, 1)
#define KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT_REG_BITS (15u)
#define hal_set_reg_kalimba_pio_int_timer_pio_strobe_select(x) hal_set_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_pio_strobe_select() hal_get_register(KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT, 1)
#define KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT, i, x)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word0(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word1(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word2(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert(i) hal_get_register_indexed(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT, i)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word0() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word1() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word2() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD2, 1)
#define KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_REG_BITS (72u)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask(i, x) hal_set_register_indexed(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK, i, x)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word0(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD0, (x), 1)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word1(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD1, (x), 1)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word2(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD2, (x), 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask(i) hal_get_register_indexed(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK, i)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word0() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word1() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word2() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD2, 1)
#define KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_REG_BITS (72u)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status(i) hal_get_register_indexed(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS, i)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word0() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD0, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word1() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD1, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word2() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD2, 1)
#define KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME_REG_BITS (32u)
#define hal_set_reg_kalimba_pio_int_timer_sw3_event_time(x) hal_set_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME, x, 1)
#define hal_get_reg_kalimba_pio_int_timer_sw3_event_time() hal_get_register(KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME, 1)
#define KALIMBA_PIO_INT_TIMER_TIME2_REG_BITS (32u)
#define hal_get_reg_kalimba_pio_int_timer_time2() hal_get_register(KALIMBA_PIO_INT_TIMER_TIME2, 1)

 /* Workings */
#define SETTER_FOR_KALIMBA_PIO_INT_ACCESS_CTRL hal_set_reg_kalimba_pio_int_access_ctrl
#define GETTER_FOR_KALIMBA_PIO_INT_ACCESS_CTRL hal_get_reg_kalimba_pio_int_access_ctrl
#define SETTER_FOR_KALIMBA_PIO_INT_MUTEX_LOCK hal_set_reg_kalimba_pio_int_mutex_lock
#define GETTER_FOR_KALIMBA_PIO_INT_MUTEX_LOCK hal_get_reg_kalimba_pio_int_mutex_lock
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE hal_get_reg_kalimba_pio_int_pio1_event_cause
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD0 hal_get_reg_kalimba_pio_int_pio1_event_cause_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD1 hal_get_reg_kalimba_pio_int_pio1_event_cause_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_WORD2 hal_get_reg_kalimba_pio_int_pio1_event_cause_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD0 hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD1 hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD2 hal_set_reg_kalimba_pio_int_pio1_event_cause_clear_data_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD0 hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD1 hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_CAUSE_CLEAR_DATA_WORD2 hal_get_reg_kalimba_pio_int_pio1_event_cause_clear_data_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE hal_set_reg_kalimba_pio_int_pio1_event_falling_enable
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD0 hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD1 hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD2 hal_set_reg_kalimba_pio_int_pio1_event_falling_enable_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE hal_get_reg_kalimba_pio_int_pio1_event_falling_enable
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD0 hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD1 hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_FALLING_ENABLE_WORD2 hal_get_reg_kalimba_pio_int_pio1_event_falling_enable_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE hal_set_reg_kalimba_pio_int_pio1_event_rising_enable
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD0 hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD1 hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD2 hal_set_reg_kalimba_pio_int_pio1_event_rising_enable_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE hal_get_reg_kalimba_pio_int_pio1_event_rising_enable
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD0 hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD1 hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO1_EVENT_RISING_ENABLE_WORD2 hal_get_reg_kalimba_pio_int_pio1_event_rising_enable_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE hal_get_reg_kalimba_pio_int_pio2_event_cause
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD0 hal_get_reg_kalimba_pio_int_pio2_event_cause_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD1 hal_get_reg_kalimba_pio_int_pio2_event_cause_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_WORD2 hal_get_reg_kalimba_pio_int_pio2_event_cause_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD0 hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD1 hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD2 hal_set_reg_kalimba_pio_int_pio2_event_cause_clear_data_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD0 hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD1 hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_CAUSE_CLEAR_DATA_WORD2 hal_get_reg_kalimba_pio_int_pio2_event_cause_clear_data_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE hal_set_reg_kalimba_pio_int_pio2_event_falling_enable
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD0 hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD1 hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD2 hal_set_reg_kalimba_pio_int_pio2_event_falling_enable_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE hal_get_reg_kalimba_pio_int_pio2_event_falling_enable
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD0 hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD1 hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_FALLING_ENABLE_WORD2 hal_get_reg_kalimba_pio_int_pio2_event_falling_enable_word2
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE hal_set_reg_kalimba_pio_int_pio2_event_rising_enable
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD0 hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word0
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD1 hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word1
#define SETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD2 hal_set_reg_kalimba_pio_int_pio2_event_rising_enable_word2
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE hal_get_reg_kalimba_pio_int_pio2_event_rising_enable
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD0 hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word0
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD1 hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word1
#define GETTER_FOR_KALIMBA_PIO_INT_PIO2_EVENT_RISING_ENABLE_WORD2 hal_get_reg_kalimba_pio_int_pio2_event_rising_enable_word2
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_ENABLES hal_set_reg_kalimba_pio_int_timer_enables
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_ENABLES hal_get_reg_kalimba_pio_int_timer_enables
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD hal_set_reg_kalimba_pio_int_timer_pio1_event_period
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD hal_get_reg_kalimba_pio_int_timer_pio1_event_period
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE hal_set_reg_kalimba_pio_int_timer_pio1_event_period_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_PERIOD_FINE hal_get_reg_kalimba_pio_int_timer_pio1_event_period_fine
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL hal_set_reg_kalimba_pio_int_timer_pio1_event_sel
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_SEL hal_get_reg_kalimba_pio_int_timer_pio1_event_sel
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME hal_set_reg_kalimba_pio_int_timer_pio1_event_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME hal_get_reg_kalimba_pio_int_timer_pio1_event_time
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE hal_set_reg_kalimba_pio_int_timer_pio1_event_time_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO1_EVENT_TIME_FINE hal_get_reg_kalimba_pio_int_timer_pio1_event_time_fine
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD hal_set_reg_kalimba_pio_int_timer_pio2_event_period
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD hal_get_reg_kalimba_pio_int_timer_pio2_event_period
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE hal_set_reg_kalimba_pio_int_timer_pio2_event_period_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_PERIOD_FINE hal_get_reg_kalimba_pio_int_timer_pio2_event_period_fine
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL hal_set_reg_kalimba_pio_int_timer_pio2_event_sel
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_SEL hal_get_reg_kalimba_pio_int_timer_pio2_event_sel
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME hal_set_reg_kalimba_pio_int_timer_pio2_event_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME hal_get_reg_kalimba_pio_int_timer_pio2_event_time
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE hal_set_reg_kalimba_pio_int_timer_pio2_event_time_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO2_EVENT_TIME_FINE hal_get_reg_kalimba_pio_int_timer_pio2_event_time_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME hal_get_reg_kalimba_pio_int_timer_pio_strobe1_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE1_TIME_FINE hal_get_reg_kalimba_pio_int_timer_pio_strobe1_time_fine
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME hal_get_reg_kalimba_pio_int_timer_pio_strobe2_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE2_TIME_FINE hal_get_reg_kalimba_pio_int_timer_pio_strobe2_time_fine
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT hal_set_reg_kalimba_pio_int_timer_pio_strobe_select
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_PIO_STROBE_SELECT hal_get_reg_kalimba_pio_int_timer_pio_strobe_select
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD0 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word0
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD1 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word1
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD2 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word2
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD0 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word0
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD1 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word1
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_INVERT_WORD2 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_invert_word2
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD0 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word0
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD1 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word1
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD2 hal_set_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word2
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD0 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word0
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD1 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word1
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_MASK_WORD2 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_mask_word2
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD0 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word0
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD1 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word1
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_PIO_STATUS_WORD2 hal_get_reg_kalimba_pio_int_timer_sw3_event_pio_status_word2
#define SETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME hal_set_reg_kalimba_pio_int_timer_sw3_event_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_SW3_EVENT_TIME hal_get_reg_kalimba_pio_int_timer_sw3_event_time
#define GETTER_FOR_KALIMBA_PIO_INT_TIMER_TIME2 hal_get_reg_kalimba_pio_int_timer_time2

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_KALIMBA_PIO_INT) */
#endif /* __HAL_MACROS_H__MODULE_KALIMBA_PIO_INT */

#if defined(IO_DEFS_MODULE_BUS_PROC_STREAM) 

#ifndef __HAL_MACROS_H__MODULE_BUS_PROC_STREAM
#define __HAL_MACROS_H__MODULE_BUS_PROC_STREAM

/* -- Processor-driven transaction stream generation control registers. -- */

 /* Field BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_config_block_dest_id() hal_get_register_field8(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID)
#define hal_set_bus_proc_stream_config_block_dest_id(x) hal_set_register_field(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID BUS_PROC_STREAM_CONFIG
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_CONFIG_BLOCK_DEST_ID BUS_PROC_STREAM_CONFIG

 /* Field BUS_PROC_STREAM_CONFIG_OPCODE_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_config_opcode() hal_get_register_field8(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_OPCODE)
#define hal_set_bus_proc_stream_config_opcode(x) hal_set_register_field(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_OPCODE,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_CONFIG_OPCODE BUS_PROC_STREAM_CONFIG
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_CONFIG_OPCODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_CONFIG_OPCODE(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_CONFIG_OPCODE BUS_PROC_STREAM_CONFIG

 /* Field BUS_PROC_STREAM_CONFIG_SYS_DEST_ID_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_config_sys_dest_id() hal_get_register_field8(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_SYS_DEST_ID)
#define hal_set_bus_proc_stream_config_sys_dest_id(x) hal_set_register_field(BUS_PROC_STREAM_CONFIG,BUS_PROC_STREAM_CONFIG_SYS_DEST_ID,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_CONFIG_SYS_DEST_ID BUS_PROC_STREAM_CONFIG
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_CONFIG_SYS_DEST_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_CONFIG_SYS_DEST_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_CONFIG_SYS_DEST_ID BUS_PROC_STREAM_CONFIG

 /* Field BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_final_block_source_id() hal_get_register_field8(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID)
#define hal_set_bus_proc_stream_final_block_source_id(x) hal_set_register_field(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID BUS_PROC_STREAM_FINAL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_FINAL_BLOCK_SOURCE_ID BUS_PROC_STREAM_FINAL

 /* Field BUS_PROC_STREAM_FINAL_PAYLOAD_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_final_payload() hal_get_register_field8(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_PAYLOAD)
#define hal_set_bus_proc_stream_final_payload(x) hal_set_register_field(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_PAYLOAD,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_FINAL_PAYLOAD BUS_PROC_STREAM_FINAL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_FINAL_PAYLOAD(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_FINAL_PAYLOAD(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_FINAL_PAYLOAD BUS_PROC_STREAM_FINAL

 /* Field BUS_PROC_STREAM_FINAL_TAG_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_final_tag() hal_get_register_field8(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_TAG)
#define hal_set_bus_proc_stream_final_tag(x) hal_set_register_field(BUS_PROC_STREAM_FINAL,BUS_PROC_STREAM_FINAL_TAG,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_FINAL_TAG BUS_PROC_STREAM_FINAL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_FINAL_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_FINAL_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_FINAL_TAG BUS_PROC_STREAM_FINAL

 /* Field BUS_PROC_STREAM_PAYLOAD0_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_payload0() hal_get_register_field32(BUS_PROC_STREAM_PAYLOAD0,BUS_PROC_STREAM_PAYLOAD0)
#define hal_set_bus_proc_stream_payload0(x) hal_set_register_field(BUS_PROC_STREAM_PAYLOAD0,BUS_PROC_STREAM_PAYLOAD0,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_PAYLOAD0 BUS_PROC_STREAM_PAYLOAD0
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_PAYLOAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_PAYLOAD0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_PAYLOAD0(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_PAYLOAD0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_PAYLOAD0 BUS_PROC_STREAM_PAYLOAD0

 /* Field BUS_PROC_STREAM_PAYLOAD1_LSB */
 /* Accessor macros */
#define hal_get_bus_proc_stream_payload1() hal_get_register_field32(BUS_PROC_STREAM_PAYLOAD1,BUS_PROC_STREAM_PAYLOAD1)
#define hal_set_bus_proc_stream_payload1(x) hal_set_register_field(BUS_PROC_STREAM_PAYLOAD1,BUS_PROC_STREAM_PAYLOAD1,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM_PAYLOAD1 BUS_PROC_STREAM_PAYLOAD1
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_PAYLOAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_PAYLOAD1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_PAYLOAD1(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_PAYLOAD1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM_PAYLOAD1 BUS_PROC_STREAM_PAYLOAD1

 /* Field BUS_PROC_STREAM__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_bus_proc_stream__p0_access_permission() ((bus_proc_stream__p0_access_permission) hal_get_register_field8(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P0_ACCESS_PERMISSION))
#define hal_set_bus_proc_stream__p0_access_permission(x) hal_set_register_field(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM__P0_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM__P0_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL

 /* Field BUS_PROC_STREAM__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_bus_proc_stream__p1_access_permission() ((bus_proc_stream__p1_access_permission) hal_get_register_field8(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P1_ACCESS_PERMISSION))
#define hal_set_bus_proc_stream__p1_access_permission(x) hal_set_register_field(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM__P1_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM__P1_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL

 /* Field BUS_PROC_STREAM__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_bus_proc_stream__p2_access_permission() ((bus_proc_stream__p2_access_permission) hal_get_register_field8(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P2_ACCESS_PERMISSION))
#define hal_set_bus_proc_stream__p2_access_permission(x) hal_set_register_field(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM__P2_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM__P2_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL

 /* Field BUS_PROC_STREAM__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_bus_proc_stream__p3_access_permission() ((bus_proc_stream__p3_access_permission) hal_get_register_field8(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P3_ACCESS_PERMISSION))
#define hal_set_bus_proc_stream__p3_access_permission(x) hal_set_register_field(BUS_PROC_STREAM_ACCESS_CTRL,BUS_PROC_STREAM__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_BUS_PROC_STREAM__P3_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BUS_PROC_STREAM__P3_ACCESS_PERMISSION BUS_PROC_STREAM_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_ACCESS_CTRL_BUS_PROC_STREAM_ACCESS_CTRL
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_CONFIG_BUS_PROC_STREAM_CONFIG
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_CONFIG_END
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_FINAL_BUS_PROC_STREAM_FINAL
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_FINAL_END
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_PAYLOAD0_BUS_PROC_STREAM_PAYLOAD0
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_PAYLOAD0_END
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_PAYLOAD1_BUS_PROC_STREAM_PAYLOAD1
#define CHECK_FIELD_TYPE_BUS_PROC_STREAM_PAYLOAD1_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_BUS_PROC_STREAM_FINAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BUS_PROC_STREAM_FINAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BUS_PROC_STREAM_FINAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define BUS_PROC_STREAM_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_bus_proc_stream_access_ctrl(x) hal_set_register(BUS_PROC_STREAM_ACCESS_CTRL, x, 1)
#define hal_get_reg_bus_proc_stream_access_ctrl() hal_get_register(BUS_PROC_STREAM_ACCESS_CTRL, 1)
#define BUS_PROC_STREAM_CONFIG_REG_BITS (12u)
#define hal_set_reg_bus_proc_stream_config(x) hal_set_register(BUS_PROC_STREAM_CONFIG, x, 1)
#define hal_get_reg_bus_proc_stream_config() hal_get_register(BUS_PROC_STREAM_CONFIG, 1)
#define BUS_PROC_STREAM_FINAL_REG_BITS (16u)
#define hal_set_reg_bus_proc_stream_final(x) hal_set_register(BUS_PROC_STREAM_FINAL, x, 1)
#define hal_get_reg_bus_proc_stream_final() hal_get_register(BUS_PROC_STREAM_FINAL, 1)
#define BUS_PROC_STREAM_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_bus_proc_stream_mutex_lock(x) hal_set_register(BUS_PROC_STREAM_MUTEX_LOCK, x, 1)
#define hal_get_reg_bus_proc_stream_mutex_lock() hal_get_register(BUS_PROC_STREAM_MUTEX_LOCK, 1)
#define BUS_PROC_STREAM_PAYLOAD0_REG_BITS (32u)
#define hal_set_reg_bus_proc_stream_payload0(x) hal_set_register(BUS_PROC_STREAM_PAYLOAD0, x, 1)
#define hal_get_reg_bus_proc_stream_payload0() hal_get_register(BUS_PROC_STREAM_PAYLOAD0, 1)
#define BUS_PROC_STREAM_PAYLOAD1_REG_BITS (32u)
#define hal_set_reg_bus_proc_stream_payload1(x) hal_set_register(BUS_PROC_STREAM_PAYLOAD1, x, 1)
#define hal_get_reg_bus_proc_stream_payload1() hal_get_register(BUS_PROC_STREAM_PAYLOAD1, 1)

 /* Workings */
#define SETTER_FOR_BUS_PROC_STREAM_ACCESS_CTRL hal_set_reg_bus_proc_stream_access_ctrl
#define GETTER_FOR_BUS_PROC_STREAM_ACCESS_CTRL hal_get_reg_bus_proc_stream_access_ctrl
#define SETTER_FOR_BUS_PROC_STREAM_CONFIG hal_set_reg_bus_proc_stream_config
#define GETTER_FOR_BUS_PROC_STREAM_CONFIG hal_get_reg_bus_proc_stream_config
#define SETTER_FOR_BUS_PROC_STREAM_FINAL hal_set_reg_bus_proc_stream_final
#define GETTER_FOR_BUS_PROC_STREAM_FINAL hal_get_reg_bus_proc_stream_final
#define SETTER_FOR_BUS_PROC_STREAM_MUTEX_LOCK hal_set_reg_bus_proc_stream_mutex_lock
#define GETTER_FOR_BUS_PROC_STREAM_MUTEX_LOCK hal_get_reg_bus_proc_stream_mutex_lock
#define SETTER_FOR_BUS_PROC_STREAM_PAYLOAD0 hal_set_reg_bus_proc_stream_payload0
#define GETTER_FOR_BUS_PROC_STREAM_PAYLOAD0 hal_get_reg_bus_proc_stream_payload0
#define SETTER_FOR_BUS_PROC_STREAM_PAYLOAD1 hal_set_reg_bus_proc_stream_payload1
#define GETTER_FOR_BUS_PROC_STREAM_PAYLOAD1 hal_get_reg_bus_proc_stream_payload1

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_BUS_PROC_STREAM) */
#endif /* __HAL_MACROS_H__MODULE_BUS_PROC_STREAM */



