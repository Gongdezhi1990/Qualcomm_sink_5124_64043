// *****************************************************************************
// Copyright (c) 2005 - 2017 Qualcomm Technologies International, Ltd.
// %%version
// *****************************************************************************

#include "cvc_modules.h"
#include "frame_proc/frame_proc_asm.h"


// SP. Needs for Sample Rate converters

#include "audio_proc_library.h"
#include "passthr_mode.h"

#include "cvc_receive_cap_asm.h"

#include "mem_utils/dynamic_mem_macros.h"

#include "frame_iir_resamplerv2_asm_defs.h"
#include "shared_volume_control_asm_defs.h"

#define uses_RCV_FREQPROC  (uses_RCV_NS || uses_AEQ)
#define uses_RCV_VAD       (uses_RCV_AGC || uses_AEQ)

#if defined(INSTALL_OPERATOR_CVC_32K) || defined(INSTALL_OPERATOR_CVC_48K)
   #define CVC_USES_RESAMPLER
   #define stream_rcvout_intermidiate    stream_map_rcvout_internal
#else
   #define stream_rcvout_intermidiate    stream_map_rcvout
#endif

//*****extra includes and temp fixes start here*****************
   .CONST   $IIR_RESAMPLEV2_IIR_BUFFER_SIZE      19;
   .CONST   $IIR_RESAMPLEV2_FIR_BUFFER_SIZE      10;   
   .CONST   $IIR_RESAMPLEV2_APPENDED_BUFFER_SIZE      ($IIR_RESAMPLEV2_IIR_BUFFER_SIZE+$IIR_RESAMPLEV2_FIR_BUFFER_SIZE);
   .CONST   $iir_resamplev2.OBJECT_SIZE_SNGL_STAGE    $frame_iir_resamplerv2.iir_resampler_op_struct.STRUC_SIZE + $IIR_RESAMPLEV2_APPENDED_BUFFER_SIZE;
//*****extra includes and temp fixes end here*******************


#define MAX_NUM_PEQ_STAGES             (5)

// The aeq_scratch buffer reuses the AEC buffer to reduce the data memory usage.
#define aeq_scratch dm1_scratch
#define vad_scratch dm1_scratch
// The oms_scratch buffer reuses the AEC buffer to reduce the data memory usage.
#define oms_scratch dm1_scratch
#define fft_circ_scratch fft_circ



// Constants for Variants
.CONST $CVC_RCV_VAR.NB.SAMPLES_PER_FRAME        60;
.CONST $CVC_RCV_VAR.NB.NUM_FREQ_BIN             65;
.CONST $CVC_RCV_VAR.NB.FFT_BUFFER_SIZE          64;
.CONST $CVC_RCV_VAR.NB.WINDOW_SIZE              120;
.CONST $CVC_RCV_VAR.NB.OMS270.STATELENGTH       104;  


.CONST $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME        120;
.CONST $CVC_RCV_VAR.WB.NUM_FREQ_BIN             129; 
.CONST $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE          128;
.CONST $CVC_RCV_VAR.WB.WINDOW_SIZE              240;
.CONST $CVC_RCV_VAR.WB.OMS270.STATELENGTH       124;  

.CONST $CVC_RCV_VAR.SWB.SAMPLES_PER_FRAME       240;
.CONST $CVC_RCV_VAR.FB.SAMPLES_PER_FRAME        360;


.MODULE $M.CVC_RCV_CAP.data;
   .DATASEGMENT DM;

   //  ******************  Define Scratch/Shared Memory ************************
   .CONST MAX_DM1_SCRATCH_SIZE 254;
     
    // Frequency Domain Shared working buffers
   .VAR/SM1   fft_real[$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE];            
   .VAR/SM1   D_rcv_real[$CVC_RCV_VAR.WB.NUM_FREQ_BIN];
   .VAR/SM1   dm1_scratch[MAX_DM1_SCRATCH_SIZE];
   
   .VAR/SM2   fft_imag[$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE];             
   .VAR/SM2   D_rcv_imag[$CVC_RCV_VAR.WB.NUM_FREQ_BIN + $CVC_RCV_VAR.WB.NUM_FREQ_BIN];
   .VAR/SM2   fft_circ[$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE];

   
   // ********** Parameters and statistics **********************************
    .VAR  ZeroValue = 0;  
    .VAR  OneValue  = 1.0;
    
   .VAR  cvc_parameters[$M.CVC_RECV.PARAMETERS.STRUCT_SIZE+1];

   
   // Array of Status Fields for Capability
    .VAR  StatusArray[] =
      &spkr_out_pk_dtct + $M.audio_proc.peak_monitor.PEAK_LEVEL,
      &sco_in_pk_dtct   + $M.audio_proc.peak_monitor.PEAK_LEVEL,
#if uses_AEQ
      &AEQ_DataObject + $M.AdapEq.AEQ_GAIN_LOW_FIELD,          // AEQ Gain Low
      &AEQ_DataObject + $M.AdapEq.AEQ_GAIN_HIGH_FIELD,         // AEQ Gain High
      &AEQ_DataObject + $M.AdapEq.STATE_FIELD,                 // AEQ State
      &AEQ_DataObject + $M.AdapEq.AEQ_POWER_TEST_FIELD,        // AEQ Tone Detection
      &AEQ_DataObject + $M.AdapEq.AEQ_TONE_POWER_FIELD,        // AEQ Tone Power
#else
      &ZeroValue,&ZeroValue,&ZeroValue,&ZeroValue,&ZeroValue,
#endif
#if uses_RCV_AGC
      &rcv_agc400_dm + $M.agc400.OFFSET_INPUT_LEVEL_FIELD,   // AGC Speech Power Level (Q8.16 log2 power)
      &rcv_agc400_dm + $M.agc400.OFFSET_G_REAL_FIELD,        // AGC Applied Gain (Q6.17 linear gain [0 - 64.0])
#else
      &OneValue,&OneValue,
#endif
      &ZeroValue;     // RESERVED
      

    
// --------------------------------------------



   .VAR     ModeControl[$M.SET_MODE_GAIN.STRUC_SIZE] =
         cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_PT_RCVGAIN_MANTISSA,
         0 ...;
   
   .VAR/DM2     passthru_rcv_gain[$M.audio_proc.stream_gain.STRUC_SIZE] =
      &stream_map_rcvin,                             // OFFSET_INPUT_PTR
      0,                                             // OFFSET_OUTPUT_PTR  <set in passthrough & loopback>
      &ModeControl + $M.SET_MODE_GAIN.MANT_LEFT,     // OFFSET_PTR_MANTISSA
      &ModeControl + $M.SET_MODE_GAIN.EXP;           // OFFSET_PTR_EXPONENT
      


   // Fequency Domain Objects
    .VAR rcv_X[] =
      &D_rcv_real,
      &D_rcv_imag,
      &RcvAnalysisBank + $M.filter_bank.Parameters.OFFSET_BEXP;

   // The three buffers in this object are temporary to FFT and could be shared
   .VAR fft_obj[$M.filter_bank.fft.STRUC_SIZE] =
      0,
      &fft_real,
      &fft_imag,
      &fft_circ_scratch,
      cvc_fb_split_table, // PTR_FFTSPLIT
      0 ...;
      

#if uses_RCV_FREQPROC
    // Analysis Filter Bank Config Block
   .VAR/DM1 bufd_rcv_inp[$CVC_RCV_VAR.WB.WINDOW_SIZE];
   .VAR/DM1 RcvAnalysisBank[$M.filter_bank.Parameters.ONE_CHNL_BLOCK_SIZE] =
      cvc_analysis_config,             // OFFSET_CONFIG_OBJECT
      &stream_map_rcvin,               // CH1_PTR_FRAME
      &bufd_rcv_inp,                   // OFFSET_CH1_PTR_HISTORY
      0,                               // CH1_BEXP
      &rcv_X,                          // OFFSET_FREQ_OBJ
      0 ...;                           // No Channel Delay


    // Syntheseis Filter Bank Config Block
   .VAR/DM1 bufdr_outp[$CVC_RCV_VAR.WB.WINDOW_SIZE + $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME];
   .VAR/DM2 RcvSynthesisBank[$M.filter_bank.Parameters.ONE_CHNL_BLOCK_SIZE] =
      cvc_synthysis_config,            // OFFSET_CONFIG_OBJECT
      stream_rcvout_intermidiate,              // OFFSET_PTR_FRAME
      &bufdr_outp,                     // OFFSET_PTR_HISTORY
      0,
      &rcv_X,                          // OFFSET_FREQ_OBJ
      1,                               // ZDN_FIELD
      -1;                              // SP_FIELD
#endif

   .VAR rcv_variant = 0;
   .VAR harm_history[$CVC_RCV_VAR.NB.SAMPLES_PER_FRAME * 3];
   .VAR rcv_harm_obj[$harmonicity.STRUC_SIZE] =
         &stream_map_rcvin,            // $harmonicity.INP_X_FIELD
         &rcv_variant,                 // $harmonicity.VARIANT_FIELD
         &harm_history,                // $harmonicity.HISTORY_FIELD
         0 ...;

#if uses_RCV_NS
   // <start> of memory declared per instance of oms270
   .VAR rcvoms_G[$CVC_RCV_VAR.WB.NUM_FREQ_BIN];
   .VAR rcvoms_LpXnz[$CVC_RCV_VAR.WB.NUM_FREQ_BIN];
   .VAR rcvoms_state[$M.oms270.wide_band.STATE_LENGTH];
   .VAR/DM1 rcvLpX_queue[$M.oms270.QUE_LENGTH];

   .VAR oms270rcv_obj[$M.oms270.STRUC_SIZE] =
        &rcv_X,                 // Y_FIELD
        &rcv_X,                 // X_FIELD
        &rcv_variant,           // PTR_VARIANT_FIELD
        cvc_oms_config,         // PTR_MODE_FIELD
        cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCV_OMS_HFK_AGGR, // PARAM_FIELD
        &cvclib_table,          // $M.oms270.PBP_TABLE_FIELD  
        &rcvLpX_queue,          // $M.oms270.LPX_QUEUE_START_FIELD
        &rcvoms_G,              // $M.oms270.G_FIELD;
        &rcvoms_LpXnz,          // $M.oms270.LPXNZ_FIELD,
        &rcvoms_state,          // $M.oms270.PTR_STATE_FIELD
        &oms_scratch,           // $M.oms270.PTR_SCRATCH_FIELD
        
        0.45,                   // $M.oms270.HARMONICITY_THRESHOLD_FIELD
        1,                      // $M.oms270.MIN_SEARCH_ON_FIELD
        1,                      // $M.oms270.MMSE_LSA_ON_FIELD
#if uses_AEQ                  // $M.oms270.PTR_TONE_FLAG_FIELD
        &AEQ_DataObject + $M.AdapEq.AEQ_POWER_TEST_FIELD,
#else
        0,
#endif
        0 ...;      
#endif

   // only executed when FE/BEX
    .VAR/DM1 dac_upsample_dm1[$iir_resamplev2.OBJECT_SIZE_SNGL_STAGE] =
        &stream_map_rcvin,                             // INPUT_PTR_FIELD
        &stream_map_rcvout,                            // OUTPUT_PTR_FIELD
        0, // CONVERSION_OBJECT_PTR_FIELD
        -8,                                    // INPUT_SCALE_FIELD
        8,                                     // OUTPUT_SCALE_FIELD
        0,                                     // INTERMEDIATE_CBUF_PTR_FIELD
        0,                                     // INTERMEDIATE_CBUF_LEN_FIELD
        0 ...;


#if uses_DCBLOCK
   .VAR/DM2 sco_dcblock_dm2[PEQ_OBJECT_SIZE(1)] =
      &stream_map_rcvin,               // PTR_INPUT_DATA_BUFF_FIELD
      &stream_map_rcvin,               // PTR_OUTPUT_DATA_BUFF_FIELD
      1,                               // MAX_STAGES_FIELD
      cvc_vad_dc_ceoffs+$M.vad400.DCB_PEQ_COEFF_OFFSET,        // PARAM_PTR_FIELD
      0 ...;
#endif

#if uses_RCV_PEQ
   .VAR/DM2 rcv_peq_dm2[PEQ_OBJECT_SIZE(MAX_NUM_PEQ_STAGES)] =
      stream_rcvout_intermidiate,              // PTR_INPUT_DATA_BUFF_FIELD
      stream_rcvout_intermidiate,              // PTR_OUTPUT_DATA_BUFF_FIELD
      MAX_NUM_PEQ_STAGES,              // MAX_STAGES_FIELD
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCV_PEQ_CONFIG,  // PARAM_PTR_FIELD
      0 ...;
#endif

   // Pre RCV AGC gain stage
   .VAR/DM1 rcvout_gain_dm2[$M.audio_proc.stream_gain.STRUC_SIZE] =
      stream_rcvout_intermidiate,                       // OFFSET_INPUT_PTR
      stream_rcvout_intermidiate,                       // OFFSET_OUTPUT_PTR
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCVGAIN_MANTISSA, // OFFSET_PTR_MANTISSA
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCVGAIN_EXPONENT; // OFFSET_PTR_EXPONENT

#if uses_RCV_VAD
   // Declare a dummy frame buffer structure, intended for linear buffer that
   // could be used with calls to '$frmbuffer.get_buffer_with_start_address'
   // between VAD PEQ and VAD processing modules.  $frmbuffer.FRAME_SIZE_FIELD
   // will be set by VAD PEQ.  Because the buffer is linear the length and
   // base address are zero.

    .VAR  vad_peq_output[$frmbuffer.STRUC_SIZE]  =
            &vad_scratch,  // $frmbuffer.FRAME_PTR_FIELD
            0,             // $frmbuffer.FRAME_SIZE_FIELD
            0,             // $frmbuffer.BUFFER_SIZE_FIELD
            0;             // $frmbuffer.BUFFER_START_ADDRESS_FIELD
            
   .VAR/DM rcv_vad_peq[PEQ_OBJECT_SIZE(3)] =
      &stream_map_rcvin,                        // PTR_INPUT_DATA_BUFF_FIELD
      &vad_peq_output,                          // INPUT_CIRCBUFF_SIZE_FIELD
      3,                                        // MAX_STAGES_FIELD
      cvc_vad_dc_ceoffs+$M.vad400.VAD_PEQ_COEFF_OFFSET,                    // PARAM_PTR_FIELD
      0 ...;

   // RCV VAD
   .VAR/DM1 rcv_vad400[$M.vad400.OBJECT_SIZE_FIELD] =
      &vad_peq_output,     // INPUT_PTR_FIELD
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCV_VAD_ATTACK_TC, // Parameter Ptr
      0 ...;

#endif

#if uses_RCV_AGC
   // RCV AGC
   .VAR/DM rcv_agc400_dm[$agc400.STRUC_SIZE] =
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_RCV_AGC_G_INITIAL, // OFFSET_PARAM_PTR_FIELD
      stream_rcvout_intermidiate,  //OFFSET_PTR_INPUT_FIELD
      stream_rcvout_intermidiate,  //OFFSET_PTR_OUTPUT_FIELD
      &rcv_vad400 + $M.vad400.FLAG_FIELD,
                           //OFFSET_PTR_VAD_VALUE_FIELD
      $M.agc400.const.FRAME_THRESHOLD, //OFFSET_FRAME_THRESHOLD_FIELD
      1.0,                 //OFFSET_HARD_LIMIT_FIELD
#if uses_AEQ               //OFFSET_PTR_TONE_FLAG_FIELD
      &AEQ_DataObject + $M.AdapEq.AEQ_POWER_TEST_FIELD,
#else
      0,
#endif
      0 ...;
#endif

#if uses_AEQ
   .VAR/DM aeq_band_pX[$M.AdapEq.Bands_Buffer_Length];
   .VAR/DM AEQ_DataObject[$M.AdapEq.STRUC_SIZE] =
      0,                                        // CONTROL_WORD_FIELD
      $M.CVC_RECV.CONFIG.AEQBYP,      // BYPASS_BIT_MASK_FIELD
      $M.CVC_RECV.CONFIG.BEXBYP,      // BEX_BIT_MASK_FIELD
      $CVC_RCV_VAR.WB.NUM_FREQ_BIN,                 // NUM_FREQ_BINS
      cvc_parameters + $M.CVC_RECV.PARAMETERS.OFFSET_AEQ_ATK_TC, // PTR_PARAMS_FIELD
      &rcv_X,
      &rcv_X,
      0,                                        // AEQ_EQ_COUNTER_FIELD         14
      267,                                      // AEQ_EQ_INIT_FRAME_FIELD      15
      0,                                        // AEQ_GAIN_LOW_FIELD           16
      0,                                        // AEQ_GAIN_HIGH_FIELD          17
      &rcv_vad400 + $M.vad400.FLAG_FIELD,       // VAD_AGC_FIELD                18
      0.036805582279178,                        // ALFA_ENV_FIELD               23
      1.0-0.036805582279178,                    // ONE_MINUS_ALFA_ENV_FIELD     24
      &aeq_band_pX,                             // PTR_AEQ_BAND_PX_FIELD        25
      0,                                        // STATE_FIELD                  26
      ndvc_volume_level+$shared_volume_control._shared_volume_struct.NDVC_NOISE_LEVEL_FIELD,    // PTR_VOL_STEP_UP_FIELD        27
      0,                                        // AEQ_TONE_POWER_FIELD Q8.16   44
      0,                                        // AEQ_POWER_TEST_FIELD         47
      &aeq_scratch,                              // PTR_SCRATCH_G_FIELD
      0 ...;
#endif
      
   .VAR sco_in_pk_dtct[] =
      &stream_map_rcvin,               // PTR_INPUT_BUFFER_FIELD
      0;                               // PEAK_LEVEL

   .VAR spkr_out_pk_dtct[] =
      &stream_map_rcvout,             // PTR_INPUT_BUFFER_FIELD
      0;                              // PEAK_LEVEL

    // rcvin stream map
   .VAR   stream_map_rcvin[$frmbuffer.EXTENDED_STRUC_SIZE] =
      0,0,0,0,                                  // Filled in by Dirstibute Function
      0,                                        // $frmbuffer.CBUFFER_PTR_FIELD - set by connect logic
      ext_frame_in_size,        // $frmbuffer.INITIAL_FRAME_SIZE_FIELD
      $frame_proc.distribute_input_stream,      // $frmbuffer.DISTRIBUTE_FUNCPTR_FIELD
      $frame_proc.update_input_stream,          // $frmbuffer.UPDATE_FUNCPTR_FIELD
      0,                                        // $frmbuffer.THRESHOLD_FIELD - zero to disable latency cntrl
      0,                                        // $frmbuffer.JITTER_FIELD
      0 ...;

    // rcvout stream map
   .VAR stream_map_rcvout[$frmbuffer.EXTENDED_STRUC_SIZE] =
      0,0,0,0,                                  // Filled in by Dirstibute Function
      0,                                        // $frmbuffer.CBUFFER_PTR_FIELD - set by connect logic
      ext_frame_out_size,        // $frmbuffer.INITIAL_FRAME_SIZE_FIELD
      $frame_proc.distribute_output_stream,     // $frmbuffer.DISTRIBUTE_FUNCPTR_FIELD
      $frame_proc.update_output_stream,         // $frmbuffer.UPDATE_FUNCPTR_FIELD
      0,                                        // $frmbuffer.THRESHOLD_FIELD - zero to disable latency cntrl
      0,                                        // $frmbuffer.JITTER_FIELD
      0 ...;

   // -----------------------------------------------------------------------------
   
      // Stream List for Receive Processing
   .VAR    rcv_process_streams[] =
      &stream_map_rcvin,
      &stream_map_rcvout,
      0;

#ifdef CVC_USES_RESAMPLER
   .VAR/SM1 cbuffer_rcvout_internal[$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME];
   
   .VAR  stream_map_rcvout_internal[$frmbuffer.STRUC_SIZE]  =
         &cbuffer_rcvout_internal,  // $frmbuffer.FRAME_PTR_FIELD
         0,             // $frmbuffer.FRAME_SIZE_FIELD
         0,             // $frmbuffer.BUFFER_SIZE_FIELD
         0;             // $frmbuffer.BUFFER_START_ADDRESS_FIELD
            

   //object for rcvout up sampler
   .VAR/DM1 rcvout_upsampler_dm1[$iir_resamplev2.OBJECT_SIZE_SNGL_STAGE] =
      stream_rcvout_intermidiate,               // INPUT_PTR_FIELD
      &stream_map_rcvout,                       // OUTPUT_PTR_FIELD
      ext_upsample_config_ptr,                  // CONVERSION_OBJECT_PTR_FIELD
      -8,                                       // INPUT_SCALE_FIELD
      8,                                        // OUTPUT_SCALE_FIELD
      0,                                        // INTERMEDIATE_CBUF_PTR_FIELD
      0,                                        // INTERMEDIATE_CBUF_LEN_FIELD
      0 ...;
      
   //object for rcvin down sampler
   .VAR/DM1 rcvin_downsampler_dm1[$iir_resamplev2.OBJECT_SIZE_SNGL_STAGE] =
      &stream_map_rcvin,                        // INPUT_PTR_FIELD, inplace buffer use
      &stream_map_rcvin,                        // OUTPUT_PTR_FIELD, inplace operation
      ext_downsample_config_ptr,                // CONVERSION_OBJECT_PTR_FIELD
      -8,                                       // INPUT_SCALE_FIELD
      8,                                        // OUTPUT_SCALE_FIELD
      0,                                        // INTERMEDIATE_CBUF_PTR_FIELD
      0,                                        // INTERMEDIATE_CBUF_LEN_FIELD
      0 ...;
#endif  
   
   // -----------------------------------------------------------------------------
   .VAR/DM hfk_proc_funcsRcv[] =
      // Function                               r7                      r8
      $frame_proc.distribute_streams,           &rcv_process_streams,   0,

#ifdef CVC_USES_RESAMPLER
      //EWB -> resampler
      $cvc.rcv.frame_resample_process,          &rcvin_downsampler_dm1, rcv_ewb,  
      //EWB -> resampler
#endif
      
#if uses_DCBLOCK
      $audio_proc.peq.process,                  &sco_dcblock_dm2,       0,      // Ri --> Ri
#endif

      $M.audio_proc.peak_monitor.Process.func,  &sco_in_pk_dtct,        0,

#if uses_RCV_VAD
      $audio_proc.peq.process,                  &rcv_vad_peq,           0,
      $M.vad400.process.func,                   &rcv_vad400,            0,
#endif

#if uses_RCV_FREQPROC
      $filter_bank.analysis.process,            &fft_obj,        &RcvAnalysisBank,

#if uses_AEQ
      $M.AdapEq.process.tone_detect,            0,                &AEQ_DataObject,
#endif

      $harmonicity.process,                     0,                   &rcv_harm_obj,                      

#if uses_RCV_NS
      $oms270.process,                          0,                   &oms270rcv_obj,
      $oms270.apply_gain,                       0,                   &oms270rcv_obj,
#endif

#if uses_AEQ
      $M.AdapEq.process.func,                   0,                &AEQ_DataObject,
#endif

      $filter_bank.synthesis.process,           &fft_obj,       &RcvSynthesisBank,
#else
      // No Freq domain processing, need explicit upsampling to 16 kHz
      // only for FE/BEX
      $cvc.fe.frame_resample_process,         &dac_upsample_dm1, cvc_variant ,
#endif

#if uses_RCV_PEQ
      // for NB/FE only (not WB)
      $cvc.rcv_peq.process,                     &rcv_peq_dm2,           cvc_variant,
#endif

      $M.audio_proc.stream_gain.Process.func,   &rcvout_gain_dm2,       0,

#if uses_RCV_AGC
      $agc400.process,                          0,              &rcv_agc400_dm,
#endif

#if uses_RCV_PEQ
      // for WB only
      $cvc.rcv_peq.process_wb,                  &rcv_peq_dm2,           cvc_variant,
#endif

#ifdef CVC_USES_RESAMPLER
      //EWB -> resampler
      $frame.iir_resamplev2.Process,         &rcvout_upsampler_dm1,      0,
#endif
      
      $M.audio_proc.peak_monitor.Process.func,  &spkr_out_pk_dtct,      0,
            
      //EWB -> resampler
      $frame_proc.update_streams,           &rcv_process_streams,       0,

      0;                                     // END OF TABLE

   .VAR/DM copy_proc_funcsRcv[] =
      // Function                               r7                      r8
      $frame_proc.distribute_streams,       &rcv_process_streams,   0,

      $M.CVC_RCV_CAP.Set_PassThroughGains,      &ModeControl,           cvc_current_mode,

      $M.audio_proc.peak_monitor.Process.func,  &sco_in_pk_dtct,        0,
      $M.audio_proc.stream_gain.Process.func,   &passthru_rcv_gain,     0,    // Ri --> Ro
      $cvc.fe.frame_resample_process,           &dac_upsample_dm1,      cvc_variant ,
      $M.audio_proc.peak_monitor.Process.func,  &spkr_out_pk_dtct,      0,

      $frame_proc.update_streams,           &rcv_process_streams,   0,
      0;                                     // END OF TABLE
      
// -----------------------------------------------------------------------------
   .VAR  ModeProcTableRcv[$M.CVC_RECV.SYSMODE.MAX_MODES] =
      &copy_proc_funcsRcv,             // Static
      &copy_proc_funcsRcv,             // Stand by
      &hfk_proc_funcsRcv,              // hfk mode
      &copy_proc_funcsRcv;             // pass-thru mode


   // ----------------------------------------------------------------------------
   .VAR/DM ReInitializeTable[] =

      // Function                                           r7                 r8

      // only executed when FE/BEX
      $frame.iir_resamplev2.Initialize,                  &dac_upsample_dm1,   0 ,

#ifdef CVC_USES_RESAMPLER
      //EWB -> resampler 
      $frame.iir_resamplev2.Initialize,            &rcvin_downsampler_dm1,       0,
      $frame.iir_resamplev2.Initialize,            &rcvout_upsampler_dm1,        0,
      //EWB -> resampler       
#endif

#if uses_RCV_FREQPROC
      $filter_bank.analysis.initialize,                     0,         &RcvAnalysisBank,
      $filter_bank.synthesis.initialize,                    0,         &RcvSynthesisBank,
      $harmonicity.initialize,                              0,       &rcv_harm_obj,
#if uses_RCV_NS
      $oms270.initialize,                                   0,       &oms270rcv_obj,
#endif
#if uses_AEQ
     $M.AdapEq.initialize.func,                0,                 &AEQ_DataObject,
#endif
#endif

#if uses_DCBLOCK
      $audio_proc.peq.initialize,         &sco_dcblock_dm2,         0,
#endif

#if uses_RCV_PEQ
      $audio_proc.peq.initialize,     &rcv_peq_dm2,             0,
#endif

#if uses_RCV_VAD
      $audio_proc.peq.initialize,          &rcv_vad_peq,             0,
      $M.vad400.initialize.func,           &rcv_vad400,              0,
#endif
#if uses_RCV_AGC
      $agc400.initialize,           0,                        &rcv_agc400_dm,
#endif

      0;                                    // END OF TABLE


   // -------------------------------------------------------------------------
   .VAR ModulePointers[] =   
      &rcv_agc400_dm,      // AGC_PTR_FIELD
      &oms270rcv_obj,      // OMS_PTR_FIELD
      &rcv_harm_obj,       // HARM_PTR_FIELD
      &rcv_vad400,         // VAD_PTR_FIELD
      &AEQ_DataObject;     // AEQ_PTR_FIELD
  
// Place Holder for linker resolved symbols
.VAR/CONST  DynTable_Linker[] = 0;

   
// Command Data Block
.VAR/CONST16  DynTable_Main[] =
   // Header
   DYN_ALLOC_EXTERNAL_FILESYSTEM()
   DYN_LINKER_RESOLVE(DynTable_Linker),
   DYN_ALLOC_ROOT($CVC_RCV_CAP.ROOT.INST_ALLOC_PTR_FIELD),
   DYN_ALLOC_SCRATCH_ROOT($CVC_RCV_CAP.ROOT.SCRATCH_ALLOC_PTR_FIELD),

   // Define Dynamic Memory Block Sizes to use 
   DYN_BLOCK_SIZE(1032),
   
   // Scratch blocks use 3 words for header
   DYN_SCRATCH_BLOCK_SIZE(1032),
       
   
   // Link to Root Object
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.INPUT_STREAM_MAP_PTR_FIELD,stream_map_rcvin),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.OUTPUT_STREAM_MAP_PTR_FIELD,stream_map_rcvout),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.MODE_TABLE_PTR_FIELD,ModeProcTableRcv),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.INIT_TABLE_PTR_FIELD,ReInitializeTable),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.MODULES_PTR_FIELD,ModulePointers),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.STATUS_TABLE_PTR_FIELD,StatusArray),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.UPSAMPLE_PTR_FIELD,dac_upsample_dm1),
   DYN_SET_ROOT($CVC_RCV_CAP.ROOT.PARAMS_PTR_FIELD,cvc_parameters),
 
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.CVCLIB_TABLE_FIELD,cvclib_table),   
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.OVR_CONTROL,override_control),
      
   // Link in shared (externally resolved) memory

#if uses_RCV_VAD ||  uses_DCBLOCK    
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.VAD_DCB_COEFFS_PTR_FIELD,cvc_vad_dc_ceoffs), 
#endif
#if uses_RCV_NS 
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.OMS_CONFIG_PTR_FIELD,cvc_oms_config), 
#endif   
#if uses_RCV_FREQPROC  
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.ANAL_FB_CONFIG_PTR_FIELD,cvc_analysis_config), 
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.SYNTH_FB_CONFIG_PTR_FIELD,cvc_synthysis_config),  
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.FB_SPLIT_PTR_FIELD,cvc_fb_split_table), 
#endif
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.CAPABILITY_ID, cvc_variant),
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.NDVC_SHARE_PTR_FIELD, ndvc_volume_level),
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.CUR_MODE_PTR_FIELD, cvc_current_mode),   
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.APPLY_RESAMPLE_FIELD, rcv_ewb),

   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.DOWNSAMPLE_CONFIG_FIELD, ext_downsample_config_ptr),
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.UPSAMPLE_CONFIG_FIELD, ext_upsample_config_ptr),

   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.FRAME_SIZE_IN_FIELD, ext_frame_in_size),
   DYN_RESOLVE_EXTERN($CVC_RCV_CAP.ROOT.FRAME_SIZE_OUT_FIELD, ext_frame_out_size),

   // **** Variants ******
   DYN_VARIANT($M.CVC_RECV_NB_CAP_ID),

   DYN_SET_VALUE(&rcv_variant, 0),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvout),   

   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.NB.WINDOW_SIZE),

#if uses_AEQ
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
   // SP.  Need extra bins for Freq Extension even in NB
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
#else
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.NB.NUM_FREQ_BIN),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
#endif

    DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.NB.FFT_BUFFER_SIZE),    
    DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.NB.FFT_BUFFER_SIZE),
  
    
    DYN_ALLOC_RESIZE(dm1_scratch,$M.oms270.narrow_band.SCRATCH_LENGTH), // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.NB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.NB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.NB.WINDOW_SIZE+$CVC_RCV_VAR.NB.SAMPLES_PER_FRAME),

   // -----------------------------
   DYN_VARIANT($M.CVC_RECV_FE_CAP_ID),

   DYN_SET_VALUE(&rcv_variant, 0),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvin),  

   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.NB.WINDOW_SIZE),

#if uses_AEQ
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
#endif

   DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_real,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   
   DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    
    DYN_ALLOC_RESIZE(dm1_scratch, $M.oms270.wide_band.SCRATCH_LENGTH),     // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.NB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.NB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.WB.WINDOW_SIZE+$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME),
   
   // -----------------------------
   DYN_VARIANT($M.CVC_RECV_WB_CAP_ID),

   DYN_SET_VALUE(&rcv_variant, 1),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvout),  

   DYN_ALLOC_RESIZE(harm_history, $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME * 3),
   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.WB.WINDOW_SIZE),

#if uses_AEQ
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
#endif

   DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   
   DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    
    DYN_ALLOC_RESIZE(dm1_scratch,$M.oms270.wide_band.SCRATCH_LENGTH),   // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.WB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.WB.WINDOW_SIZE+$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME),

   // -----------------------------
#ifdef INSTALL_OPERATOR_CVC_24K   
   DYN_VARIANT($M.CVC_RECV_UWB_CAP_ID),


   DYN_SET_VALUE(&rcv_variant, 2),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvout),  

   DYN_ALLOC_RESIZE(harm_history, $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME * 4),
   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.WB.WINDOW_SIZE),

#if uses_AEQ // UWB
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.AEQ_EQ_INIT_FRAME_FIELD,400),
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.ALFA_ENV_FIELD,0.02469008797166738500),
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.ONE_MINUS_ALFA_ENV_FIELD,1.0-0.02469008797166738500),
#endif

   DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   
   DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    
    DYN_ALLOC_RESIZE(dm1_scratch,$M.oms270.wide_band.SCRATCH_LENGTH),   // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.WB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.WB.WINDOW_SIZE+$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME),

   #if uses_RCV_AGC
      DYN_SET_VALUE(rcv_agc400_dm + $M.agc400.OFFSET_FRAME_THRESHOLD_FIELD, $M.agc400.const.UWB.FRAME_THRESHOLD),
   #endif
#endif

#ifdef INSTALL_OPERATOR_CVC_32K
   // -----------------------------
   DYN_VARIANT($M.CVC_RECV_SWB_CAP_ID),

   
   DYN_SET_VALUE(&rcv_variant, 1),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvout),  

   DYN_ALLOC_RESIZE(harm_history, $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME * 3),
   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.WB.WINDOW_SIZE),

#if uses_AEQ
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
#endif

   DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   
   DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    
    DYN_ALLOC_RESIZE(dm1_scratch,$M.oms270.wide_band.SCRATCH_LENGTH),   // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.WB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.WB.WINDOW_SIZE+$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME),

#endif
#ifdef INSTALL_OPERATOR_CVC_48K
   // -----------------------------
   DYN_VARIANT($M.CVC_RECV_FB_CAP_ID),

   
   DYN_SET_VALUE(&rcv_variant, 1),

   DYN_SET_VALUE(passthru_rcv_gain+$M.audio_proc.stream_gain.OFFSET_OUTPUT_PTR,stream_map_rcvout),  

   DYN_ALLOC_RESIZE(harm_history, $CVC_RCV_VAR.WB.SAMPLES_PER_FRAME * 3),
   DYN_ALLOC_RESIZE(bufd_rcv_inp,$CVC_RCV_VAR.WB.WINDOW_SIZE),

#if uses_AEQ
   DYN_SET_VALUE(&AEQ_DataObject + $M.AdapEq.NUM_FREQ_BINS,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
#endif

   DYN_ALLOC_RESIZE(fft_real, $CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_real, $CVC_RCV_VAR.WB.NUM_FREQ_BIN),
   
   DYN_ALLOC_RESIZE(fft_imag,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
   DYN_ALLOC_RESIZE(D_rcv_imag,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    
    DYN_ALLOC_RESIZE(dm1_scratch,$M.oms270.wide_band.SCRATCH_LENGTH),   // max(oms,aeq,vad)  
    
    DYN_ALLOC_RESIZE(fft_circ,$CVC_RCV_VAR.WB.FFT_BUFFER_SIZE),
    DYN_ALLOC_RESIZE(rcvoms_G,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_LpXnz,$CVC_RCV_VAR.WB.NUM_FREQ_BIN),
    DYN_ALLOC_RESIZE(rcvoms_state,$CVC_RCV_VAR.WB.OMS270.STATELENGTH),

   DYN_ALLOC_RESIZE(bufdr_outp,$CVC_RCV_VAR.WB.WINDOW_SIZE+$CVC_RCV_VAR.WB.SAMPLES_PER_FRAME),
#endif

   DYN_END();


.ENDMODULE;
