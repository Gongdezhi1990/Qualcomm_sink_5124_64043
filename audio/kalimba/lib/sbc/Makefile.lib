############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2010 - 2017 Qualcomm Technologies International, Ltd.
#
############################################################################
asm_files = analysis_subband_filter.asm \
calc_bit_allocation.asm \
calc_frame_length.asm \
calc_scale_factors.asm \
change_state.asm \
crc_calc.asm \
encoder_set_parameters.asm \
find_sync.asm \
frame_decode.asm \
frame_encode.asm \
get_encoded_frame_info.asm \
get_frame_info.asm \
getbits.asm \
global_variables_decoder.asm \
global_variables_encdec.asm \
global_variables_encoder.asm \
init_decoder.asm \
init_encoder.asm \
init_static_encoder.asm \
init_static_common.asm \
init_static_decoder.asm \
joint_stereo_decode.asm \
joint_stereo_encode.asm \
putbits.asm \
quantize_samples.asm \
read_audio_samples.asm \
read_frame_header.asm \
read_padding_bits.asm \
read_scale_factors.asm \
reset_decoder.asm \
reset_encoder.asm \
sample_reconstruction.asm \
sbc_api.asm \
silence_decoder.asm \
synthesis_subband_filter.asm \
write_audio_samples.asm \
write_frame_header.asm \
write_padding_bits.asm \
wbs_sco_decode.asm \
wbs_sco_encode.asm \
write_scale_factors.asm \
initialise_tables.asm

	
wbs_acl_asm_files = analysis_subband_filter.asm \
calc_bit_allocation.asm \
calc_frame_length.asm \
calc_scale_factors.asm \
crc_calc.asm \
getbits.asm \
global_variables_decoder.asm \
global_variables_encdec.asm \
global_variables_encoder.asm \
init_static_encoder.asm \
init_static_common.asm \
init_static_decoder.asm \
putbits.asm \
quantize_samples.asm \
read_audio_samples.asm \
read_padding_bits.asm \
read_scale_factors.asm \
reset_decoder.asm \
reset_encoder.asm \
sample_reconstruction.asm \
silence_decoder.asm \
synthesis_subband_filter.asm \
write_audio_samples.asm \
write_padding_bits.asm \
write_scale_factors.asm \
wbs_acl_decode.asm \
wbs_acl_encode.asm \
initialise_tables.asm

header_files = sbc.h \
sbc_library.h

FL_WBS_DE = -DWBS_DECOUPLED

$(eval $(call header_rules,$(header_files)))

$(eval $(call rules,$(asm_files)))

# one line per variant...
# build the debug variant with profiling enabled, for both encoder and decoder
$(eval $(call rules_variant,debug, $(FL_DEBUG) -DDEBUG_SBCDEC -DPROFILE_SBCDEC -DDEBUG_SBCENC -DPROFILE_SBCENC,$(asm_files)))
$(eval $(call rules_variant,wbs,-DSBC_WBS_ONLY,$(asm_files)))
$(eval $(call rules_variant,wbs_acl,-DSBC_WBS_ACL,$(wbs_acl_asm_files)))
$(eval $(call rules_variant,wbs_acl_base_regs, $(FL_BASE_REG) -DSBC_WBS_ACL,$(wbs_acl_asm_files)))



# some flags we use
FL_WBS_DE = -DWBS_DECOUPLED
# build the external and decoupled combinations
$(eval $(call rules_variant,patch_libs, $(FL_WBS_DE) $(FL_PATCH),$(asm_files) wbs_sco_decode.asm wbs_sco_encode.asm ))
$(eval $(call rules_variant,decoupled,                    $(FL_WBS_DE)            ,$(asm_files) wbs_sco_decode.asm wbs_sco_encode.asm ))

# build the base register combinations
$(foreach hw,$(KAL_BASE_REG_CORES), \
  $(eval $(call rules_variant_core,base_regs,                      $(FL_BASE_REG)                                   ,$(asm_files)                                      ,$(hw))) \
  $(eval $(call rules_variant_core,wbs_base_regs,                  $(FL_BASE_REG) -DSBC_WBS_ONLY                    ,$(asm_files)                                      ,$(hw))) \
  $(eval $(call rules_variant_core,decoupled_base_regs,            $(FL_BASE_REG) $(FL_WBS_DE)            ,$(asm_files) wbs_sco_decode.asm wbs_sco_encode.asm,$(hw))) \
  $(eval $(call rules_variant_core,decoupled_base_regs_patch_libs, $(FL_BASE_REG) $(FL_WBS_DE) $(FL_PATCH),$(asm_files) wbs_sco_decode.asm wbs_sco_encode.asm,$(hw))) \
)

