
/* *************************************************************************  *
   COMMERCIAL IN CONFIDENCE
   Copyright (C) 2017 Qualcomm Technologies International Ltd.

   Qualcomm Technologies International Ltd.
   Churchill House
   Cambridge Business Park
   Cambridge, UK
   CB4 0WZ
   http://www.csr.com

   DESCRIPTION
      Hardware Abstraction Layer macros.

   THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT IT, CHANGES WILL BE LOST
*  *************************************************************************  */

#define __HAL_MACROS_H__

#include "hal_utils.h"




#ifndef __HAL_MACROS_H__MODULE_K32_TRACE
#define __HAL_MACROS_H__MODULE_K32_TRACE

/* -- Kalimba 32-bit Trace Control registers. -- */

 /* Field K32_TRACE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p0_access_permission() ((k32_trace__p0_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION))
#define hal_set_k32_trace__p0_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P0_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p1_access_permission() ((k32_trace__p1_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION))
#define hal_set_k32_trace__p1_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P1_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p2_access_permission() ((k32_trace__p2_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION))
#define hal_set_k32_trace__p2_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P2_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field K32_TRACE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_trace__p3_access_permission() ((k32_trace__p3_access_permission) hal_get_register_field8(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION))
#define hal_set_k32_trace__p3_access_permission(x) hal_set_register_field(TRACE_ACCESS_CTRL,K32_TRACE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_TRACE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_TRACE__P3_ACCESS_PERMISSION TRACE_ACCESS_CTRL

 /* Field TRACE_0_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_base_addr() hal_get_register_field32(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR)
#define hal_set_trace_0_dmem_base_addr(x) hal_set_register_field(TRACE_0_DMEM_BASE_ADDR,TRACE_0_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_BASE_ADDR TRACE_0_DMEM_BASE_ADDR

 /* Field TRACE_0_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_length() hal_get_register_field16(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH)
#define hal_set_trace_0_dmem_cfg_length(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_LENGTH TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_dmem_cfg_wrap() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP)
#define hal_set_trace_0_dmem_cfg_wrap(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_CFG_WRAP TRACE_0_DMEM_CFG

 /* Field TRACE_0_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_0_dmem_en() hal_get_register_field8(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN)
#define hal_set_trace_0_dmem_en(x) hal_set_register_field(TRACE_0_DMEM_CFG,TRACE_0_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_DMEM_EN TRACE_0_DMEM_CFG

 /* Field TRACE_0_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_end_trigger() hal_get_register_field32(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER)
#define hal_set_trace_0_end_trigger(x) hal_set_register_field(TRACE_0_END_TRIGGER,TRACE_0_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_END_TRIGGER TRACE_0_END_TRIGGER

 /* Field TRACE_0_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_0_start_trigger() hal_get_register_field32(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER)
#define hal_set_trace_0_start_trigger(x) hal_set_register_field(TRACE_0_START_TRIGGER,TRACE_0_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_START_TRIGGER TRACE_0_START_TRIGGER

 /* Field TRACE_0_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_base_addr() hal_get_register_field32(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR)
#define hal_set_trace_0_tbus_base_addr(x) hal_set_register_field(TRACE_0_TBUS_BASE_ADDR,TRACE_0_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_BASE_ADDR TRACE_0_TBUS_BASE_ADDR

 /* Field TRACE_0_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK)
#define hal_set_trace_0_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS)
#define hal_set_trace_0_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_DEST_SYS TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_length() hal_get_register_field16(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH)
#define hal_set_trace_0_tbus_cfg_length(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_LENGTH TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_src_blk() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK)
#define hal_set_trace_0_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_SRC_BLK TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tag() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG)
#define hal_set_trace_0_tbus_cfg_tag(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TAG TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_tran_type() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_0_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_TRAN_TYPE TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_0_tbus_cfg_wrap() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP)
#define hal_set_trace_0_tbus_cfg_wrap(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_CFG_WRAP TRACE_0_TBUS_CFG

 /* Field TRACE_0_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_0_tbus_en() hal_get_register_field8(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN)
#define hal_set_trace_0_tbus_en(x) hal_set_register_field(TRACE_0_TBUS_CFG,TRACE_0_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_0_TBUS_EN TRACE_0_TBUS_CFG

 /* Field TRACE_1_DMEM_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_base_addr() hal_get_register_field32(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR)
#define hal_set_trace_1_dmem_base_addr(x) hal_set_register_field(TRACE_1_DMEM_BASE_ADDR,TRACE_1_DMEM_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_BASE_ADDR TRACE_1_DMEM_BASE_ADDR

 /* Field TRACE_1_DMEM_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_length() hal_get_register_field16(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH)
#define hal_set_trace_1_dmem_cfg_length(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_LENGTH TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_dmem_cfg_wrap() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP)
#define hal_set_trace_1_dmem_cfg_wrap(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_CFG_WRAP TRACE_1_DMEM_CFG

 /* Field TRACE_1_DMEM_EN */
 /* Accessor macros */
#define hal_get_trace_1_dmem_en() hal_get_register_field8(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN)
#define hal_set_trace_1_dmem_en(x) hal_set_register_field(TRACE_1_DMEM_CFG,TRACE_1_DMEM_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_DMEM_EN TRACE_1_DMEM_CFG

 /* Field TRACE_1_END_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_end_trigger() hal_get_register_field32(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER)
#define hal_set_trace_1_end_trigger(x) hal_set_register_field(TRACE_1_END_TRIGGER,TRACE_1_END_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_END_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_END_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_END_TRIGGER TRACE_1_END_TRIGGER

 /* Field TRACE_1_START_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_trace_1_start_trigger() hal_get_register_field32(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER)
#define hal_set_trace_1_start_trigger(x) hal_set_register_field(TRACE_1_START_TRIGGER,TRACE_1_START_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER
#define FIELDS_MASKS_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_START_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_START_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_START_TRIGGER TRACE_1_START_TRIGGER

 /* Field TRACE_1_TBUS_BASE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_base_addr() hal_get_register_field32(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR)
#define hal_set_trace_1_tbus_base_addr(x) hal_set_register_field(TRACE_1_TBUS_BASE_ADDR,TRACE_1_TBUS_BASE_ADDR,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_BASE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_BASE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_BASE_ADDR TRACE_1_TBUS_BASE_ADDR

 /* Field TRACE_1_TBUS_CFG_DEST_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK)
#define hal_set_trace_1_tbus_cfg_dest_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_DEST_SYS_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_dest_sys() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS)
#define hal_set_trace_1_tbus_cfg_dest_sys(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_DEST_SYS,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_DEST_SYS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_DEST_SYS TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_length() hal_get_register_field16(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH)
#define hal_set_trace_1_tbus_cfg_length(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_LENGTH TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_SRC_BLK_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_src_blk() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK)
#define hal_set_trace_1_tbus_cfg_src_blk(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_SRC_BLK,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_SRC_BLK(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_SRC_BLK TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TAG_LSB */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tag() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG)
#define hal_set_trace_1_tbus_cfg_tag(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TAG,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TAG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TAG TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_TRAN_TYPE */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_tran_type() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE)
#define hal_set_trace_1_tbus_cfg_tran_type(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_TRAN_TYPE,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_TRAN_TYPE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_TRAN_TYPE TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_CFG_WRAP */
 /* Accessor macros */
#define hal_get_trace_1_tbus_cfg_wrap() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP)
#define hal_set_trace_1_tbus_cfg_wrap(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_CFG_WRAP,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG_WRAP(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_CFG_WRAP TRACE_1_TBUS_CFG

 /* Field TRACE_1_TBUS_EN */
 /* Accessor macros */
#define hal_get_trace_1_tbus_en() hal_get_register_field8(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN)
#define hal_set_trace_1_tbus_en(x) hal_set_register_field(TRACE_1_TBUS_CFG,TRACE_1_TBUS_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_1_TBUS_EN TRACE_1_TBUS_CFG

 /* Field TRACE_CFG_0_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_0_clr_stored_on_sync() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_0_clr_stored_on_sync(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CLR_STORED_ON_SYNC TRACE_0_CFG

 /* Field TRACE_CFG_0_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_cpu_select() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT)
#define hal_set_trace_cfg_0_cpu_select(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_CPU_SELECT TRACE_0_CFG

 /* Field TRACE_CFG_0_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_0_enable() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_ENABLE)
#define hal_set_trace_cfg_0_enable(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_ENABLE TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_ENABLE TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_bitgen() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN)
#define hal_set_trace_cfg_0_flush_bitgen(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_BITGEN TRACE_0_CFG

 /* Field TRACE_CFG_0_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_0_flush_fifo() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO)
#define hal_set_trace_cfg_0_flush_fifo(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_FLUSH_FIFO TRACE_0_CFG

 /* Field TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_0_stall_core_on_trace_full() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_0_stall_core_on_trace_full(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_STALL_CORE_ON_TRACE_FULL TRACE_0_CFG

 /* Field TRACE_CFG_0_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_0_sync_interval() hal_get_register_field8(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL)
#define hal_set_trace_cfg_0_sync_interval(x) hal_set_register_field(TRACE_0_CFG,TRACE_CFG_0_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_0_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_0_SYNC_INTERVAL TRACE_0_CFG

 /* Field TRACE_CFG_1_CLR_STORED_ON_SYNC */
 /* Accessor macros */
#define hal_get_trace_cfg_1_clr_stored_on_sync() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC)
#define hal_set_trace_cfg_1_clr_stored_on_sync(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CLR_STORED_ON_SYNC,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CLR_STORED_ON_SYNC(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CLR_STORED_ON_SYNC TRACE_1_CFG

 /* Field TRACE_CFG_1_CPU_SELECT_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_cpu_select() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT)
#define hal_set_trace_cfg_1_cpu_select(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_CPU_SELECT,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_CPU_SELECT(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_CPU_SELECT TRACE_1_CFG

 /* Field TRACE_CFG_1_ENABLE */
 /* Accessor macros */
#define hal_get_trace_cfg_1_enable() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_ENABLE)
#define hal_set_trace_cfg_1_enable(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_ENABLE,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_ENABLE TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_ENABLE TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_BITGEN */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_bitgen() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN)
#define hal_set_trace_cfg_1_flush_bitgen(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_BITGEN,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_BITGEN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_BITGEN TRACE_1_CFG

 /* Field TRACE_CFG_1_FLUSH_FIFO */
 /* Accessor macros */
#define hal_get_trace_cfg_1_flush_fifo() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO)
#define hal_set_trace_cfg_1_flush_fifo(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_FLUSH_FIFO,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_FLUSH_FIFO(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_FLUSH_FIFO TRACE_1_CFG

 /* Field TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL */
 /* Accessor macros */
#define hal_get_trace_cfg_1_stall_core_on_trace_full() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL)
#define hal_set_trace_cfg_1_stall_core_on_trace_full(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_STALL_CORE_ON_TRACE_FULL TRACE_1_CFG

 /* Field TRACE_CFG_1_SYNC_INTERVAL_LSB */
 /* Accessor macros */
#define hal_get_trace_cfg_1_sync_interval() hal_get_register_field8(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL)
#define hal_set_trace_cfg_1_sync_interval(x) hal_set_register_field(TRACE_1_CFG,TRACE_CFG_1_SYNC_INTERVAL,(x))
 /* Workings */
#define TYPE_OF_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_1_SYNC_INTERVAL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_CFG_1_SYNC_INTERVAL TRACE_1_CFG

 /* Field TRACE_DEBUG_SEL_LSB */
 /* Accessor macros */
#define hal_get_trace_debug_sel() hal_get_register_field8(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL)
#define hal_set_trace_debug_sel(x) hal_set_register_field(TRACE_DEBUG_SEL,TRACE_DEBUG_SEL,(x))
 /* Workings */
#define TYPE_OF_TRACE_DEBUG_SEL TRACE_DEBUG_SEL
#define FIELDS_MASKS_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DEBUG_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DEBUG_SEL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DEBUG_SEL TRACE_DEBUG_SEL

 /* Field TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_0_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_0_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_1_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_1_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_2_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_2_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_dmem_status_cntl_3_dump_done() hal_get_register_field8(TRACE_DMEM_STATUS,TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_DMEM_STATUS_CNTL_3_DUMP_DONE TRACE_DMEM_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_0_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_0_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_1_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_1_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_2_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_2_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE */
 /* Accessor macros */
#define hal_get_trace_tbus_status_cntl_3_dump_done() hal_get_register_field8(TRACE_TBUS_STATUS,TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE)
 /* Workings */
#define TYPE_OF_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TBUS_STATUS_CNTL_3_DUMP_DONE TRACE_TBUS_STATUS

 /* Field TRACE_TRIGGER_CFG_END_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_end_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_end_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN)
#define hal_set_trace_trigger_cfg_end_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_END_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_END_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_END_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_START_TRIG_EN */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_start_trig_en_0_trigger_cfg() hal_get_register_field8(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
#define hal_get_trace_trigger_cfg_start_trig_en_1_trigger_cfg() hal_get_register_field8(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN)
#define hal_set_trace_trigger_cfg_start_trig_en_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_START_TRIG_EN,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_START_TRIG_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_START_TRIG_EN TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_CFG_TRIGGER_LENGTH_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_cfg_trigger_length_0_trigger_cfg() hal_get_register_field16(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_0_trigger_cfg(x) hal_set_register_field(TRACE_0_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
#define hal_get_trace_trigger_cfg_trigger_length_1_trigger_cfg() hal_get_register_field16(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH)
#define hal_set_trace_trigger_cfg_trigger_length_1_trigger_cfg(x) hal_set_register_field(TRACE_1_TRIGGER_CFG,TRACE_TRIGGER_CFG_TRIGGER_LENGTH,(x))
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_CFG_TRIGGER_LENGTH(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_CFG_TRIGGER_LENGTH TRACE_CFG_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
#define hal_get_trace_trigger_status_end_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_END_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_end_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
#define hal_get_trace_trigger_status_end_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_END_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_END_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_END_FOUND TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_SMDBG_LSB */
 /* Accessor macros */
#define hal_get_trace_trigger_status_smdbg_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
#define hal_get_trace_trigger_status_smdbg_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_SMDBG)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_SMDBG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_SMDBG TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_COMPL */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_compl_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
#define hal_get_trace_trigger_status_start_compl_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_COMPL)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_COMPL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_COMPL TRACE_TRIG_STATUS_ENUM

 /* Field TRACE_TRIGGER_STATUS_START_FOUND */
 /* Accessor macros */
#define hal_get_trace_trigger_status_start_found_0_trigger_status() hal_get_register_field8(TRACE_0_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
#define hal_get_trace_trigger_status_start_found_1_trigger_status() hal_get_register_field8(TRACE_1_TRIGGER_STATUS,TRACE_TRIGGER_STATUS_START_FOUND)
 /* Workings */
#define TYPE_OF_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM
#define FIELDS_MASKS_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIGGER_STATUS_START_FOUND(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TRACE_TRIGGER_STATUS_START_FOUND TRACE_TRIG_STATUS_ENUM

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TRACE_0_CFG_TRACE_0_CFG
#define CHECK_FIELD_TYPE_TRACE_0_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_TRACE_0_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_TRACE_0_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_0_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_TRACE_0_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_TRACE_0_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_0_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_TRACE_0_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_TRACE_0_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_0_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_0_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_1_CFG_TRACE_1_CFG
#define CHECK_FIELD_TYPE_TRACE_1_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_TRACE_1_DMEM_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_TRACE_1_DMEM_CFG
#define CHECK_FIELD_TYPE_TRACE_1_DMEM_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_TRACE_1_END_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_END_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_TRACE_1_START_TRIGGER
#define CHECK_FIELD_TYPE_TRACE_1_START_TRIGGER_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_TRACE_1_TBUS_BASE_ADDR
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_BASE_ADDR_END
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_TRACE_1_TBUS_CFG
#define CHECK_FIELD_TYPE_TRACE_1_TBUS_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_CFG_END
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_1_TRIGGER_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_TRACE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_TRACE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_TRACE_CFG_ENUM
#define CHECK_FIELD_TYPE_TRACE_CFG_ENUM_END
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_TRACE_DEBUG_SEL
#define CHECK_FIELD_TYPE_TRACE_DEBUG_SEL_END
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_TRACE_DMEM_STATUS
#define CHECK_FIELD_TYPE_TRACE_DMEM_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_TRACE_TBUS_STATUS
#define CHECK_FIELD_TYPE_TRACE_TBUS_STATUS_END
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_TRACE_TRIG_STATUS_ENUM
#define CHECK_FIELD_TYPE_TRACE_TRIG_STATUS_ENUM_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_0_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_0_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_DMEM_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_DMEM_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TBUS_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TBUS_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_CFG(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_CFG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_1_TRIGGER_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_1_TRIGGER_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_CFG_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_CFG_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_DMEM_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_DMEM_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TBUS_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TBUS_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TRACE_TRIG_STATUS_ENUM(next, val, rest) \
   (CHECK_FIELD_TYPE(TRACE_TRIG_STATUS_ENUM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define TRACE_0_CFG_REG_BITS (10u)
#define hal_set_reg_trace_0_cfg(x) hal_set_register(TRACE_0_CFG, x, 1)
#define hal_get_reg_trace_0_cfg() hal_get_register(TRACE_0_CFG, 1)
#define TRACE_0_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_dmem_base_addr(x) hal_set_register(TRACE_0_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_dmem_base_addr() hal_get_register(TRACE_0_DMEM_BASE_ADDR, 1)
#define TRACE_0_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_0_dmem_cfg(x) hal_set_register(TRACE_0_DMEM_CFG, x, 1)
#define hal_get_reg_trace_0_dmem_cfg() hal_get_register(TRACE_0_DMEM_CFG, 1)
#define TRACE_0_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_end_trigger(x) hal_set_register(TRACE_0_END_TRIGGER, x, 1)
#define hal_get_reg_trace_0_end_trigger() hal_get_register(TRACE_0_END_TRIGGER, 1)
#define TRACE_0_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_0_start_trigger(x) hal_set_register(TRACE_0_START_TRIGGER, x, 1)
#define hal_get_reg_trace_0_start_trigger() hal_get_register(TRACE_0_START_TRIGGER, 1)
#define TRACE_0_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_0_tbus_base_addr(x) hal_set_register(TRACE_0_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_0_tbus_base_addr() hal_get_register(TRACE_0_TBUS_BASE_ADDR, 1)
#define TRACE_0_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_0_tbus_cfg(x) hal_set_register(TRACE_0_TBUS_CFG, x, 1)
#define hal_get_reg_trace_0_tbus_cfg() hal_get_register(TRACE_0_TBUS_CFG, 1)
#define TRACE_0_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_0_trigger_cfg(x) hal_set_register(TRACE_0_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_0_trigger_cfg() hal_get_register(TRACE_0_TRIGGER_CFG, 1)
#define TRACE_0_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_0_trigger_status() hal_get_register(TRACE_0_TRIGGER_STATUS, 1)
#define TRACE_1_CFG_REG_BITS (10u)
#define hal_set_reg_trace_1_cfg(x) hal_set_register(TRACE_1_CFG, x, 1)
#define hal_get_reg_trace_1_cfg() hal_get_register(TRACE_1_CFG, 1)
#define TRACE_1_DMEM_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_dmem_base_addr(x) hal_set_register(TRACE_1_DMEM_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_dmem_base_addr() hal_get_register(TRACE_1_DMEM_BASE_ADDR, 1)
#define TRACE_1_DMEM_CFG_REG_BITS (13u)
#define hal_set_reg_trace_1_dmem_cfg(x) hal_set_register(TRACE_1_DMEM_CFG, x, 1)
#define hal_get_reg_trace_1_dmem_cfg() hal_get_register(TRACE_1_DMEM_CFG, 1)
#define TRACE_1_END_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_end_trigger(x) hal_set_register(TRACE_1_END_TRIGGER, x, 1)
#define hal_get_reg_trace_1_end_trigger() hal_get_register(TRACE_1_END_TRIGGER, 1)
#define TRACE_1_START_TRIGGER_REG_BITS (32u)
#define hal_set_reg_trace_1_start_trigger(x) hal_set_register(TRACE_1_START_TRIGGER, x, 1)
#define hal_get_reg_trace_1_start_trigger() hal_get_register(TRACE_1_START_TRIGGER, 1)
#define TRACE_1_TBUS_BASE_ADDR_REG_BITS (32u)
#define hal_set_reg_trace_1_tbus_base_addr(x) hal_set_register(TRACE_1_TBUS_BASE_ADDR, x, 1)
#define hal_get_reg_trace_1_tbus_base_addr() hal_get_register(TRACE_1_TBUS_BASE_ADDR, 1)
#define TRACE_1_TBUS_CFG_REG_BITS (30u)
#define hal_set_reg_trace_1_tbus_cfg(x) hal_set_register(TRACE_1_TBUS_CFG, x, 1)
#define hal_get_reg_trace_1_tbus_cfg() hal_get_register(TRACE_1_TBUS_CFG, 1)
#define TRACE_1_TRIGGER_CFG_REG_BITS (12u)
#define hal_set_reg_trace_1_trigger_cfg(x) hal_set_register(TRACE_1_TRIGGER_CFG, x, 1)
#define hal_get_reg_trace_1_trigger_cfg() hal_get_register(TRACE_1_TRIGGER_CFG, 1)
#define TRACE_1_TRIGGER_STATUS_REG_BITS (6u)
#define hal_get_reg_trace_1_trigger_status() hal_get_register(TRACE_1_TRIGGER_STATUS, 1)
#define TRACE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_trace_access_ctrl(x) hal_set_register(TRACE_ACCESS_CTRL, x, 1)
#define hal_get_reg_trace_access_ctrl() hal_get_register(TRACE_ACCESS_CTRL, 1)
#define TRACE_DEBUG_SEL_REG_BITS (4u)
#define hal_set_reg_trace_debug_sel(x) hal_set_register(TRACE_DEBUG_SEL, x, 1)
#define hal_get_reg_trace_debug_sel() hal_get_register(TRACE_DEBUG_SEL, 1)
#define TRACE_DMEM_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_dmem_status() hal_get_register(TRACE_DMEM_STATUS, 1)
#define TRACE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_trace_mutex_lock(x) hal_set_register(TRACE_MUTEX_LOCK, x, 1)
#define hal_get_reg_trace_mutex_lock() hal_get_register(TRACE_MUTEX_LOCK, 1)
#define TRACE_TBUS_STATUS_REG_BITS (4u)
#define hal_get_reg_trace_tbus_status() hal_get_register(TRACE_TBUS_STATUS, 1)

 /* Workings */
#define SETTER_FOR_TRACE_0_CFG hal_set_reg_trace_0_cfg
#define GETTER_FOR_TRACE_0_CFG hal_get_reg_trace_0_cfg
#define SETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_set_reg_trace_0_dmem_base_addr
#define GETTER_FOR_TRACE_0_DMEM_BASE_ADDR hal_get_reg_trace_0_dmem_base_addr
#define SETTER_FOR_TRACE_0_DMEM_CFG hal_set_reg_trace_0_dmem_cfg
#define GETTER_FOR_TRACE_0_DMEM_CFG hal_get_reg_trace_0_dmem_cfg
#define SETTER_FOR_TRACE_0_END_TRIGGER hal_set_reg_trace_0_end_trigger
#define GETTER_FOR_TRACE_0_END_TRIGGER hal_get_reg_trace_0_end_trigger
#define SETTER_FOR_TRACE_0_START_TRIGGER hal_set_reg_trace_0_start_trigger
#define GETTER_FOR_TRACE_0_START_TRIGGER hal_get_reg_trace_0_start_trigger
#define SETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_set_reg_trace_0_tbus_base_addr
#define GETTER_FOR_TRACE_0_TBUS_BASE_ADDR hal_get_reg_trace_0_tbus_base_addr
#define SETTER_FOR_TRACE_0_TBUS_CFG hal_set_reg_trace_0_tbus_cfg
#define GETTER_FOR_TRACE_0_TBUS_CFG hal_get_reg_trace_0_tbus_cfg
#define SETTER_FOR_TRACE_0_TRIGGER_CFG hal_set_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_CFG hal_get_reg_trace_0_trigger_cfg
#define GETTER_FOR_TRACE_0_TRIGGER_STATUS hal_get_reg_trace_0_trigger_status
#define SETTER_FOR_TRACE_1_CFG hal_set_reg_trace_1_cfg
#define GETTER_FOR_TRACE_1_CFG hal_get_reg_trace_1_cfg
#define SETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_set_reg_trace_1_dmem_base_addr
#define GETTER_FOR_TRACE_1_DMEM_BASE_ADDR hal_get_reg_trace_1_dmem_base_addr
#define SETTER_FOR_TRACE_1_DMEM_CFG hal_set_reg_trace_1_dmem_cfg
#define GETTER_FOR_TRACE_1_DMEM_CFG hal_get_reg_trace_1_dmem_cfg
#define SETTER_FOR_TRACE_1_END_TRIGGER hal_set_reg_trace_1_end_trigger
#define GETTER_FOR_TRACE_1_END_TRIGGER hal_get_reg_trace_1_end_trigger
#define SETTER_FOR_TRACE_1_START_TRIGGER hal_set_reg_trace_1_start_trigger
#define GETTER_FOR_TRACE_1_START_TRIGGER hal_get_reg_trace_1_start_trigger
#define SETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_set_reg_trace_1_tbus_base_addr
#define GETTER_FOR_TRACE_1_TBUS_BASE_ADDR hal_get_reg_trace_1_tbus_base_addr
#define SETTER_FOR_TRACE_1_TBUS_CFG hal_set_reg_trace_1_tbus_cfg
#define GETTER_FOR_TRACE_1_TBUS_CFG hal_get_reg_trace_1_tbus_cfg
#define SETTER_FOR_TRACE_1_TRIGGER_CFG hal_set_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_CFG hal_get_reg_trace_1_trigger_cfg
#define GETTER_FOR_TRACE_1_TRIGGER_STATUS hal_get_reg_trace_1_trigger_status
#define SETTER_FOR_TRACE_ACCESS_CTRL hal_set_reg_trace_access_ctrl
#define GETTER_FOR_TRACE_ACCESS_CTRL hal_get_reg_trace_access_ctrl
#define SETTER_FOR_TRACE_DEBUG_SEL hal_set_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DEBUG_SEL hal_get_reg_trace_debug_sel
#define GETTER_FOR_TRACE_DMEM_STATUS hal_get_reg_trace_dmem_status
#define SETTER_FOR_TRACE_MUTEX_LOCK hal_set_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_MUTEX_LOCK hal_get_reg_trace_mutex_lock
#define GETTER_FOR_TRACE_TBUS_STATUS hal_get_reg_trace_tbus_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TRACE) */


#ifndef __HAL_MACROS_H__MODULE_K32_DOLOOP_CACHE
#define __HAL_MACROS_H__MODULE_K32_DOLOOP_CACHE

/* -- Kalimba 32-bit DoLoop Cache Control registers. -- */

 /* Field DOLOOP_CACHE_CONFIG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_doloop_cache_config_counters_en() hal_get_register_field8(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_COUNTERS_EN)
#define hal_set_doloop_cache_config_counters_en(x) hal_set_register_field(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_CONFIG_COUNTERS_EN DOLOOP_CACHE_CONFIG
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_CONFIG_COUNTERS_EN DOLOOP_CACHE_CONFIG

 /* Field DOLOOP_CACHE_CONFIG_DOLOOP_EN */
 /* Accessor macros */
#define hal_get_doloop_cache_config_doloop_en() hal_get_register_field8(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_DOLOOP_EN)
#define hal_set_doloop_cache_config_doloop_en(x) hal_set_register_field(DOLOOP_CACHE_CONFIG,DOLOOP_CACHE_CONFIG_DOLOOP_EN,(x))
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_CONFIG_DOLOOP_EN DOLOOP_CACHE_CONFIG
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG_DOLOOP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG_DOLOOP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_CONFIG_DOLOOP_EN DOLOOP_CACHE_CONFIG

 /* Field DOLOOP_CACHE_FILL_COUNT_LSB */
 /* Accessor macros */
#define hal_get_doloop_cache_fill_count() hal_get_register_field32(DOLOOP_CACHE_FILL_COUNT,DOLOOP_CACHE_FILL_COUNT)
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_FILL_COUNT DOLOOP_CACHE_FILL_COUNT
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_FILL_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_FILL_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_FILL_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_FILL_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_FILL_COUNT DOLOOP_CACHE_FILL_COUNT

 /* Field DOLOOP_CACHE_HIT_COUNT_LSB */
 /* Accessor macros */
#define hal_get_doloop_cache_hit_count() hal_get_register_field32(DOLOOP_CACHE_HIT_COUNT,DOLOOP_CACHE_HIT_COUNT)
 /* Workings */
#define TYPE_OF_DOLOOP_CACHE_HIT_COUNT DOLOOP_CACHE_HIT_COUNT
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_HIT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_HIT_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_HIT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_HIT_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DOLOOP_CACHE_HIT_COUNT DOLOOP_CACHE_HIT_COUNT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_CONFIG_DOLOOP_CACHE_CONFIG
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_CONFIG_END
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_FILL_COUNT_DOLOOP_CACHE_FILL_COUNT
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_FILL_COUNT_END
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_HIT_COUNT_DOLOOP_CACHE_HIT_COUNT
#define CHECK_FIELD_TYPE_DOLOOP_CACHE_HIT_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_DOLOOP_CACHE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DOLOOP_CACHE_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(DOLOOP_CACHE_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define DOLOOP_CACHE_CONFIG_REG_BITS (2u)
#define hal_set_reg_doloop_cache_config(x) hal_set_register(DOLOOP_CACHE_CONFIG, x, 1)
#define hal_get_reg_doloop_cache_config() hal_get_register(DOLOOP_CACHE_CONFIG, 1)
#define DOLOOP_CACHE_FILL_COUNT_REG_BITS (32u)
#define hal_get_reg_doloop_cache_fill_count() hal_get_register(DOLOOP_CACHE_FILL_COUNT, 1)
#define DOLOOP_CACHE_HIT_COUNT_REG_BITS (32u)
#define hal_get_reg_doloop_cache_hit_count() hal_get_register(DOLOOP_CACHE_HIT_COUNT, 1)

 /* Workings */
#define SETTER_FOR_DOLOOP_CACHE_CONFIG hal_set_reg_doloop_cache_config
#define GETTER_FOR_DOLOOP_CACHE_CONFIG hal_get_reg_doloop_cache_config
#define GETTER_FOR_DOLOOP_CACHE_FILL_COUNT hal_get_reg_doloop_cache_fill_count
#define GETTER_FOR_DOLOOP_CACHE_HIT_COUNT hal_get_reg_doloop_cache_hit_count

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_DOLOOP_CACHE) */





#ifndef __HAL_MACROS_H__MODULE_K32_TIMERS
#define __HAL_MACROS_H__MODULE_K32_TIMERS

/* -- Kalimba 32-bit Timers Control registers -- */

 /* Field TIMER1_EN */
 /* Accessor macros */
#define hal_get_timer1_en() hal_get_register_field8(TIMER1_EN,TIMER1_EN)
#define hal_set_timer1_en(x) hal_set_register_field(TIMER1_EN,TIMER1_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER1_EN TIMER1_EN
#define FIELDS_MASKS_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_EN TIMER1_EN

 /* Field TIMER1_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer1_trigger() hal_get_register_field32(TIMER1_TRIGGER,TIMER1_TRIGGER)
#define hal_set_timer1_trigger(x) hal_set_register_field(TIMER1_TRIGGER,TIMER1_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER1_TRIGGER TIMER1_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER1_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER1_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER1_TRIGGER TIMER1_TRIGGER

 /* Field TIMER2_EN */
 /* Accessor macros */
#define hal_get_timer2_en() hal_get_register_field8(TIMER2_EN,TIMER2_EN)
#define hal_set_timer2_en(x) hal_set_register_field(TIMER2_EN,TIMER2_EN,(x))
 /* Workings */
#define TYPE_OF_TIMER2_EN TIMER2_EN
#define FIELDS_MASKS_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_EN TIMER2_EN

 /* Field TIMER2_TRIGGER_LSB */
 /* Accessor macros */
#define hal_get_timer2_trigger() hal_get_register_field32(TIMER2_TRIGGER,TIMER2_TRIGGER)
#define hal_set_timer2_trigger(x) hal_set_register_field(TIMER2_TRIGGER,TIMER2_TRIGGER,(x))
 /* Workings */
#define TYPE_OF_TIMER2_TRIGGER TIMER2_TRIGGER
#define FIELDS_MASKS_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER2_TRIGGER(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER2_TRIGGER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER2_TRIGGER TIMER2_TRIGGER

 /* Field TIMER_TIME_LSB */
 /* Accessor macros */
#define hal_get_timer_time() hal_get_register_field32(TIMER_TIME,TIMER_TIME)
 /* Workings */
#define TYPE_OF_TIMER_TIME TIMER_TIME
#define FIELDS_MASKS_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TIMER_TIME(next, val, rest) \
   (CHECK_FIELD_TYPE(TIMER_TIME, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TIMER_TIME TIMER_TIME

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_TIMER1_EN_TIMER1_EN
#define CHECK_FIELD_TYPE_TIMER1_EN_END
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_TIMER1_TRIGGER
#define CHECK_FIELD_TYPE_TIMER1_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER2_EN_TIMER2_EN
#define CHECK_FIELD_TYPE_TIMER2_EN_END
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_TIMER2_TRIGGER
#define CHECK_FIELD_TYPE_TIMER2_TRIGGER_END
#define CHECK_FIELD_TYPE_TIMER_TIME_TIMER_TIME
#define CHECK_FIELD_TYPE_TIMER_TIME_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define TIMER1_EN_REG_BITS (1u)
#define hal_set_reg_timer1_en(x) hal_set_register(TIMER1_EN, x, 1)
#define hal_get_reg_timer1_en() hal_get_register(TIMER1_EN, 1)
#define TIMER1_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer1_trigger(x) hal_set_register(TIMER1_TRIGGER, x, 1)
#define hal_get_reg_timer1_trigger() hal_get_register(TIMER1_TRIGGER, 1)
#define TIMER2_EN_REG_BITS (1u)
#define hal_set_reg_timer2_en(x) hal_set_register(TIMER2_EN, x, 1)
#define hal_get_reg_timer2_en() hal_get_register(TIMER2_EN, 1)
#define TIMER2_TRIGGER_REG_BITS (32u)
#define hal_set_reg_timer2_trigger(x) hal_set_register(TIMER2_TRIGGER, x, 1)
#define hal_get_reg_timer2_trigger() hal_get_register(TIMER2_TRIGGER, 1)
#define TIMER_TIME_REG_BITS (32u)
#define hal_get_reg_timer_time() hal_get_register(TIMER_TIME, 1)

 /* Workings */
#define SETTER_FOR_TIMER1_EN hal_set_reg_timer1_en
#define GETTER_FOR_TIMER1_EN hal_get_reg_timer1_en
#define SETTER_FOR_TIMER1_TRIGGER hal_set_reg_timer1_trigger
#define GETTER_FOR_TIMER1_TRIGGER hal_get_reg_timer1_trigger
#define SETTER_FOR_TIMER2_EN hal_set_reg_timer2_en
#define GETTER_FOR_TIMER2_EN hal_get_reg_timer2_en
#define SETTER_FOR_TIMER2_TRIGGER hal_set_reg_timer2_trigger
#define GETTER_FOR_TIMER2_TRIGGER hal_get_reg_timer2_trigger
#define GETTER_FOR_TIMER_TIME hal_get_reg_timer_time

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_TIMERS) */






#ifndef __HAL_MACROS_H__MODULE_K32_PREFETCH
#define __HAL_MACROS_H__MODULE_K32_PREFETCH

/* -- Kalimba 32-bit Prefetch Control registers. -- */

 /* Field PREFETCH_CONFIG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_prefetch_config_counters_en() hal_get_register_field8(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN)
#define hal_set_prefetch_config_counters_en(x) hal_set_register_field(PREFETCH_CONFIG,PREFETCH_CONFIG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_CONFIG_COUNTERS_EN PREFETCH_CONFIG

 /* Field PREFETCH_DEBUG_ALOW_PREFETCHING_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_alow_prefetching() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_ALOW_PREFETCHING)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ALOW_PREFETCHING(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_ALOW_PREFETCHING PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MEM_REQUEST_REG */
 /* Accessor macros */
#define hal_get_prefetch_debug_mem_request_reg() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MEM_REQUEST_REG)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MEM_REQUEST_REG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MEM_REQUEST_REG PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T1 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t1() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T1)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T1(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T1 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_MISS_SEQ_T2 */
 /* Accessor macros */
#define hal_get_prefetch_debug_miss_seq_t2() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_MISS_SEQ_T2)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_MISS_SEQ_T2(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_MISS_SEQ_T2 PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_NEXT_MEMREQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_next_memrequest() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_NEXT_MEMREQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_NEXT_MEMREQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_NEXT_MEMREQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PMADDRIN_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrin() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDRIN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDRIN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDRIN PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMADDROUT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmaddrout() hal_get_register_field16(PREFETCH_DEBUG_ADDR,PREFETCH_DEBUG_PMADDROUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMADDROUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMADDROUT PREFETCH_DEBUG_ADDR

 /* Field PREFETCH_DEBUG_PMEM_REQUEST */
 /* Accessor macros */
#define hal_get_prefetch_debug_pmem_request() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PMEM_REQUEST)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PMEM_REQUEST(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PMEM_REQUEST PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PM_WAIT_IN_PREV */
 /* Accessor macros */
#define hal_get_prefetch_debug_pm_wait_in_prev() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PM_WAIT_IN_PREV)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PM_WAIT_IN_PREV(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PM_WAIT_IN_PREV PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_HIT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_hit() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_HIT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_HIT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_HIT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALID */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valid() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALID)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALID(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALID PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_PREFETCH_VALIDS_LSB */
 /* Accessor macros */
#define hal_get_prefetch_debug_prefetch_valids() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_PREFETCH_VALIDS)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_PREFETCH_VALIDS(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_PREFETCH_VALIDS PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_READ_EN_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_read_en_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_READ_EN_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_READ_EN_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_READ_EN_OUT PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_VALID_PREFETCH_DATA */
 /* Accessor macros */
#define hal_get_prefetch_debug_valid_prefetch_data() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_VALID_PREFETCH_DATA)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_VALID_PREFETCH_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_VALID_PREFETCH_DATA PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_IN */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_in() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_IN)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_IN(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_IN PREFETCH_DEBUG

 /* Field PREFETCH_DEBUG_WAIT_OUT */
 /* Accessor macros */
#define hal_get_prefetch_debug_wait_out() hal_get_register_field8(PREFETCH_DEBUG,PREFETCH_DEBUG_WAIT_OUT)
 /* Workings */
#define TYPE_OF_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_WAIT_OUT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_DEBUG_WAIT_OUT PREFETCH_DEBUG

 /* Field PREFETCH_FLUSH */
 /* Accessor macros */
#define hal_get_prefetch_flush() hal_get_register_field8(PREFETCH_FLUSH,PREFETCH_FLUSH)
#define hal_set_prefetch_flush(x) hal_set_register_field(PREFETCH_FLUSH,PREFETCH_FLUSH,(x))
 /* Workings */
#define TYPE_OF_PREFETCH_FLUSH PREFETCH_FLUSH
#define FIELDS_MASKS_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_FLUSH(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_FLUSH, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_FLUSH PREFETCH_FLUSH

 /* Field PREFETCH_PREFETCH_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_prefetch_count() hal_get_register_field32(PREFETCH_PREFETCH_COUNT,PREFETCH_PREFETCH_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_PREFETCH_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_PREFETCH_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_PREFETCH_COUNT PREFETCH_PREFETCH_COUNT

 /* Field PREFETCH_REQUEST_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_request_count() hal_get_register_field32(PREFETCH_REQUEST_COUNT,PREFETCH_REQUEST_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_REQUEST_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_REQUEST_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_REQUEST_COUNT PREFETCH_REQUEST_COUNT

 /* Field PREFETCH_WAIT_OUT_COUNT_LSB */
 /* Accessor macros */
#define hal_get_prefetch_wait_out_count() hal_get_register_field32(PREFETCH_WAIT_OUT_COUNT,PREFETCH_WAIT_OUT_COUNT)
 /* Workings */
#define TYPE_OF_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT
#define FIELDS_MASKS_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_WAIT_OUT_COUNT(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_WAIT_OUT_COUNT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PREFETCH_WAIT_OUT_COUNT PREFETCH_WAIT_OUT_COUNT

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_PREFETCH_CONFIG
#define CHECK_FIELD_TYPE_PREFETCH_CONFIG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_PREFETCH_DEBUG
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_END
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_PREFETCH_DEBUG_ADDR
#define CHECK_FIELD_TYPE_PREFETCH_DEBUG_ADDR_END
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_PREFETCH_FLUSH
#define CHECK_FIELD_TYPE_PREFETCH_FLUSH_END
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_PREFETCH_PREFETCH_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_PREFETCH_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_PREFETCH_REQUEST_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_REQUEST_COUNT_END
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_PREFETCH_WAIT_OUT_COUNT
#define CHECK_FIELD_TYPE_PREFETCH_WAIT_OUT_COUNT_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_CONFIG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_CONFIG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PREFETCH_DEBUG_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PREFETCH_DEBUG_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define PREFETCH_CONFIG_REG_BITS (1u)
#define hal_set_reg_prefetch_config(x) hal_set_register(PREFETCH_CONFIG, x, 1)
#define hal_get_reg_prefetch_config() hal_get_register(PREFETCH_CONFIG, 1)
#define PREFETCH_DEBUG_REG_BITS (25u)
#define hal_get_reg_prefetch_debug() hal_get_register(PREFETCH_DEBUG, 1)
#define PREFETCH_DEBUG_ADDR_REG_BITS (32u)
#define hal_get_reg_prefetch_debug_addr() hal_get_register(PREFETCH_DEBUG_ADDR, 1)
#define PREFETCH_FLUSH_REG_BITS (1u)
#define hal_set_reg_prefetch_flush(x) hal_set_register(PREFETCH_FLUSH, x, 1)
#define hal_get_reg_prefetch_flush() hal_get_register(PREFETCH_FLUSH, 1)
#define PREFETCH_PREFETCH_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_prefetch_count() hal_get_register(PREFETCH_PREFETCH_COUNT, 1)
#define PREFETCH_REQUEST_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_request_count() hal_get_register(PREFETCH_REQUEST_COUNT, 1)
#define PREFETCH_WAIT_OUT_COUNT_REG_BITS (32u)
#define hal_get_reg_prefetch_wait_out_count() hal_get_register(PREFETCH_WAIT_OUT_COUNT, 1)

 /* Workings */
#define SETTER_FOR_PREFETCH_CONFIG hal_set_reg_prefetch_config
#define GETTER_FOR_PREFETCH_CONFIG hal_get_reg_prefetch_config
#define GETTER_FOR_PREFETCH_DEBUG hal_get_reg_prefetch_debug
#define GETTER_FOR_PREFETCH_DEBUG_ADDR hal_get_reg_prefetch_debug_addr
#define SETTER_FOR_PREFETCH_FLUSH hal_set_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_FLUSH hal_get_reg_prefetch_flush
#define GETTER_FOR_PREFETCH_PREFETCH_COUNT hal_get_reg_prefetch_prefetch_count
#define GETTER_FOR_PREFETCH_REQUEST_COUNT hal_get_reg_prefetch_request_count
#define GETTER_FOR_PREFETCH_WAIT_OUT_COUNT hal_get_reg_prefetch_wait_out_count

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_PREFETCH) */













#ifndef __HAL_MACROS_H__MODULE_K32_MC_INTER_PROC_KEYHOLE
#define __HAL_MACROS_H__MODULE_K32_MC_INTER_PROC_KEYHOLE

/* -- Kalimba 32-bit Multicore inter-processor communication keyhole register block -- */

 /* Field INTER_PROC_KEYHOLE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_addr() hal_get_register_field32(INTER_PROC_KEYHOLE_ADDR,INTER_PROC_KEYHOLE_ADDR)
#define hal_set_inter_proc_keyhole_addr(x) hal_set_register_field(INTER_PROC_KEYHOLE_ADDR,INTER_PROC_KEYHOLE_ADDR,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_ADDR INTER_PROC_KEYHOLE_ADDR
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_ADDR INTER_PROC_KEYHOLE_ADDR

 /* Field INTER_PROC_KEYHOLE_CTRL_BYTE_SEL_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_byte_sel() hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_BYTE_SEL)
#define hal_set_inter_proc_keyhole_ctrl_byte_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_BYTE_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_BYTE_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_CPU_SEL_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_cpu_sel() hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_CPU_SEL)
#define hal_set_inter_proc_keyhole_ctrl_cpu_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_CPU_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_CPU_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_CPU_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_CPU_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_CPU_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_pm_dm_sel() ((inter_proc_keyhole_ctrl_pm_dm_sel) hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL))
#define hal_set_inter_proc_keyhole_ctrl_pm_dm_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_PM_DM_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_ctrl_read_write_sel() ((inter_proc_keyhole_ctrl_read_write_sel) hal_get_register_field8(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL))
#define hal_set_inter_proc_keyhole_ctrl_read_write_sel(x) hal_set_register_field(INTER_PROC_KEYHOLE_CTRL,INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL INTER_PROC_KEYHOLE_CTRL
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_CTRL_READ_WRITE_SEL INTER_PROC_KEYHOLE_CTRL

 /* Field INTER_PROC_KEYHOLE_READ_DATA_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_read_data() hal_get_register_field32(INTER_PROC_KEYHOLE_READ_DATA,INTER_PROC_KEYHOLE_READ_DATA)
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_READ_DATA INTER_PROC_KEYHOLE_READ_DATA
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_READ_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_READ_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_READ_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_READ_DATA INTER_PROC_KEYHOLE_READ_DATA

 /* Field INTER_PROC_KEYHOLE_WRITE_DATA_LSB */
 /* Accessor macros */
#define hal_get_inter_proc_keyhole_write_data() hal_get_register_field32(INTER_PROC_KEYHOLE_WRITE_DATA,INTER_PROC_KEYHOLE_WRITE_DATA)
#define hal_set_inter_proc_keyhole_write_data(x) hal_set_register_field(INTER_PROC_KEYHOLE_WRITE_DATA,INTER_PROC_KEYHOLE_WRITE_DATA,(x))
 /* Workings */
#define TYPE_OF_INTER_PROC_KEYHOLE_WRITE_DATA INTER_PROC_KEYHOLE_WRITE_DATA
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_WRITE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_WRITE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_WRITE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_WRITE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA INTER_PROC_KEYHOLE_WRITE_DATA

 /* Field K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p0_access_permission() ((k32_mc_inter_proc_keyhole__p0_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p0_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P0_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p1_access_permission() ((k32_mc_inter_proc_keyhole__p1_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p1_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P1_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p2_access_permission() ((k32_mc_inter_proc_keyhole__p2_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p2_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P2_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Field K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION */
 /* Accessor macros */
#define hal_get_k32_mc_inter_proc_keyhole__p3_access_permission() ((k32_mc_inter_proc_keyhole__p3_access_permission) hal_get_register_field8(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION))
#define hal_set_k32_mc_inter_proc_keyhole__p3_access_permission(x) hal_set_register_field(INTER_PROC_KEYHOLE_ACCESS_CTRL,K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION,(x))
 /* Workings */
#define TYPE_OF_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL
#define FIELDS_MASKS_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_K32_MC_INTER_PROC_KEYHOLE__P3_ACCESS_PERMISSION INTER_PROC_KEYHOLE_ACCESS_CTRL

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ACCESS_CTRL_INTER_PROC_KEYHOLE_ACCESS_CTRL
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ACCESS_CTRL_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ADDR_INTER_PROC_KEYHOLE_ADDR
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_ADDR_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_CTRL_INTER_PROC_KEYHOLE_CTRL
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_CTRL_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_READ_DATA_INTER_PROC_KEYHOLE_READ_DATA
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_READ_DATA_END
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_WRITE_DATA_INTER_PROC_KEYHOLE_WRITE_DATA
#define CHECK_FIELD_TYPE_INTER_PROC_KEYHOLE_WRITE_DATA_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_ACCESS_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_ACCESS_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_INTER_PROC_KEYHOLE_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_INTER_PROC_KEYHOLE_CTRL(next, val, rest) \
   (CHECK_FIELD_TYPE(INTER_PROC_KEYHOLE_CTRL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define INTER_PROC_KEYHOLE_ACCESS_CTRL_REG_BITS (4u)
#define hal_set_reg_inter_proc_keyhole_access_ctrl(x) hal_set_register(INTER_PROC_KEYHOLE_ACCESS_CTRL, x, 1)
#define hal_get_reg_inter_proc_keyhole_access_ctrl() hal_get_register(INTER_PROC_KEYHOLE_ACCESS_CTRL, 1)
#define INTER_PROC_KEYHOLE_ADDR_REG_BITS (32u)
#define hal_set_reg_inter_proc_keyhole_addr(x) hal_set_register(INTER_PROC_KEYHOLE_ADDR, x, 1)
#define hal_get_reg_inter_proc_keyhole_addr() hal_get_register(INTER_PROC_KEYHOLE_ADDR, 1)
#define INTER_PROC_KEYHOLE_CTRL_REG_BITS (8u)
#define hal_set_reg_inter_proc_keyhole_ctrl(x) hal_set_register(INTER_PROC_KEYHOLE_CTRL, x, 1)
#define hal_get_reg_inter_proc_keyhole_ctrl() hal_get_register(INTER_PROC_KEYHOLE_CTRL, 1)
#define INTER_PROC_KEYHOLE_MUTEX_LOCK_REG_BITS (4u)
#define hal_set_reg_inter_proc_keyhole_mutex_lock(x) hal_set_register(INTER_PROC_KEYHOLE_MUTEX_LOCK, x, 1)
#define hal_get_reg_inter_proc_keyhole_mutex_lock() hal_get_register(INTER_PROC_KEYHOLE_MUTEX_LOCK, 1)
#define INTER_PROC_KEYHOLE_READ_DATA_REG_BITS (32u)
#define hal_get_reg_inter_proc_keyhole_read_data() hal_get_register(INTER_PROC_KEYHOLE_READ_DATA, 1)
#define INTER_PROC_KEYHOLE_STATUS_REG_BITS (1u)
#define hal_get_reg_inter_proc_keyhole_status() hal_get_register(INTER_PROC_KEYHOLE_STATUS, 1)
#define INTER_PROC_KEYHOLE_WRITE_DATA_REG_BITS (32u)
#define hal_set_reg_inter_proc_keyhole_write_data(x) hal_set_register(INTER_PROC_KEYHOLE_WRITE_DATA, x, 1)
#define hal_get_reg_inter_proc_keyhole_write_data() hal_get_register(INTER_PROC_KEYHOLE_WRITE_DATA, 1)

 /* Workings */
#define SETTER_FOR_INTER_PROC_KEYHOLE_ACCESS_CTRL hal_set_reg_inter_proc_keyhole_access_ctrl
#define GETTER_FOR_INTER_PROC_KEYHOLE_ACCESS_CTRL hal_get_reg_inter_proc_keyhole_access_ctrl
#define SETTER_FOR_INTER_PROC_KEYHOLE_ADDR hal_set_reg_inter_proc_keyhole_addr
#define GETTER_FOR_INTER_PROC_KEYHOLE_ADDR hal_get_reg_inter_proc_keyhole_addr
#define SETTER_FOR_INTER_PROC_KEYHOLE_CTRL hal_set_reg_inter_proc_keyhole_ctrl
#define GETTER_FOR_INTER_PROC_KEYHOLE_CTRL hal_get_reg_inter_proc_keyhole_ctrl
#define SETTER_FOR_INTER_PROC_KEYHOLE_MUTEX_LOCK hal_set_reg_inter_proc_keyhole_mutex_lock
#define GETTER_FOR_INTER_PROC_KEYHOLE_MUTEX_LOCK hal_get_reg_inter_proc_keyhole_mutex_lock
#define GETTER_FOR_INTER_PROC_KEYHOLE_READ_DATA hal_get_reg_inter_proc_keyhole_read_data
#define GETTER_FOR_INTER_PROC_KEYHOLE_STATUS hal_get_reg_inter_proc_keyhole_status
#define SETTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA hal_set_reg_inter_proc_keyhole_write_data
#define GETTER_FOR_INTER_PROC_KEYHOLE_WRITE_DATA hal_get_reg_inter_proc_keyhole_write_data

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MC_INTER_PROC_KEYHOLE) */
















#ifndef __HAL_MACROS_H__MODULE_K32_CORE
#define __HAL_MACROS_H__MODULE_K32_CORE

/* -- Kalimba 32-bit Core Control registers -- */

 /* Field ADDSUB_SATURATE_ON_OVERFLOW */
 /* Accessor macros */
#define hal_get_addsub_saturate_on_overflow() hal_get_register_field8(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW)
#define hal_set_addsub_saturate_on_overflow(x) hal_set_register_field(ARITHMETIC_MODE,ADDSUB_SATURATE_ON_OVERFLOW,(x))
 /* Workings */
#define TYPE_OF_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ADDSUB_SATURATE_ON_OVERFLOW(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ADDSUB_SATURATE_ON_OVERFLOW ARITHMETIC_MODE

 /* Field ARITHMETIC_16BIT_MODE */
 /* Accessor macros */
#define hal_get_arithmetic_16bit_mode() hal_get_register_field8(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE)
#define hal_set_arithmetic_16bit_mode(x) hal_set_register_field(ARITHMETIC_MODE,ARITHMETIC_16BIT_MODE,(x))
 /* Workings */
#define TYPE_OF_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_16BIT_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ARITHMETIC_16BIT_MODE ARITHMETIC_MODE

 /* Field BITREVERSE_ADDR_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_addr() hal_get_register_field32(BITREVERSE_ADDR,BITREVERSE_ADDR)
 /* Workings */
#define TYPE_OF_BITREVERSE_ADDR BITREVERSE_ADDR
#define FIELDS_MASKS_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_ADDR BITREVERSE_ADDR

 /* Field BITREVERSE_DATA16_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data16() hal_get_register_field32(BITREVERSE_DATA16,BITREVERSE_DATA16)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA16 BITREVERSE_DATA16
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA16(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA16, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA16 BITREVERSE_DATA16

 /* Field BITREVERSE_DATA_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_data() hal_get_register_field32(BITREVERSE_DATA,BITREVERSE_DATA)
 /* Workings */
#define TYPE_OF_BITREVERSE_DATA BITREVERSE_DATA
#define FIELDS_MASKS_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_DATA(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_DATA, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_DATA BITREVERSE_DATA

 /* Field BITREVERSE_VAL_LSB */
 /* Accessor macros */
#define hal_get_bitreverse_val() hal_get_register_field32(BITREVERSE_VAL,BITREVERSE_VAL)
#define hal_set_bitreverse_val(x) hal_set_register_field(BITREVERSE_VAL,BITREVERSE_VAL,(x))
 /* Workings */
#define TYPE_OF_BITREVERSE_VAL BITREVERSE_VAL
#define FIELDS_MASKS_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_BITREVERSE_VAL(next, val, rest) \
   (CHECK_FIELD_TYPE(BITREVERSE_VAL, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_BITREVERSE_VAL BITREVERSE_VAL

 /* Field DBG_COUNTERS_EN */
 /* Accessor macros */
#define hal_get_dbg_counters_en() hal_get_register_field8(DBG_COUNTERS_EN,DBG_COUNTERS_EN)
#define hal_set_dbg_counters_en(x) hal_set_register_field(DBG_COUNTERS_EN,DBG_COUNTERS_EN,(x))
 /* Workings */
#define TYPE_OF_DBG_COUNTERS_EN DBG_COUNTERS_EN
#define FIELDS_MASKS_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DBG_COUNTERS_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(DBG_COUNTERS_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DBG_COUNTERS_EN DBG_COUNTERS_EN

 /* Field DISABLE_FRAC_MULT_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_frac_mult_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING)
#define hal_set_disable_frac_mult_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_FRAC_MULT_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_FRAC_MULT_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_FRAC_MULT_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_RMAC_STORE_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_rmac_store_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING)
#define hal_set_disable_rmac_store_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_RMAC_STORE_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_RMAC_STORE_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_RMAC_STORE_ROUNDING ARITHMETIC_MODE

 /* Field DISABLE_UNBIASED_ROUNDING */
 /* Accessor macros */
#define hal_get_disable_unbiased_rounding() hal_get_register_field8(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING)
#define hal_set_disable_unbiased_rounding(x) hal_set_register_field(ARITHMETIC_MODE,DISABLE_UNBIASED_ROUNDING,(x))
 /* Workings */
#define TYPE_OF_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE
#define FIELDS_MASKS_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_UNBIASED_ROUNDING(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_UNBIASED_ROUNDING ARITHMETIC_MODE

 /* Field FRAME_POINTER_LSB */
 /* Accessor macros */
#define hal_get_frame_pointer() hal_get_register_field32(FRAME_POINTER,FRAME_POINTER)
#define hal_set_frame_pointer(x) hal_set_register_field(FRAME_POINTER,FRAME_POINTER,(x))
 /* Workings */
#define TYPE_OF_FRAME_POINTER FRAME_POINTER
#define FIELDS_MASKS_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_FRAME_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(FRAME_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_FRAME_POINTER FRAME_POINTER

 /* Field MM_DOLOOP_END_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_end() hal_get_register_field32(MM_DOLOOP_END,MM_DOLOOP_END)
#define hal_set_mm_doloop_end(x) hal_set_register_field(MM_DOLOOP_END,MM_DOLOOP_END,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_END MM_DOLOOP_END
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_END(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_END, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_END MM_DOLOOP_END

 /* Field MM_DOLOOP_START_LSB */
 /* Accessor macros */
#define hal_get_mm_doloop_start() hal_get_register_field32(MM_DOLOOP_START,MM_DOLOOP_START)
#define hal_set_mm_doloop_start(x) hal_set_register_field(MM_DOLOOP_START,MM_DOLOOP_START,(x))
 /* Workings */
#define TYPE_OF_MM_DOLOOP_START MM_DOLOOP_START
#define FIELDS_MASKS_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_DOLOOP_START(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_DOLOOP_START, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_DOLOOP_START MM_DOLOOP_START

 /* Field MM_QUOTIENT_LSB */
 /* Accessor macros */
#define hal_get_mm_quotient() hal_get_register_field32(MM_QUOTIENT,MM_QUOTIENT)
#define hal_set_mm_quotient(x) hal_set_register_field(MM_QUOTIENT,MM_QUOTIENT,(x))
 /* Workings */
#define TYPE_OF_MM_QUOTIENT MM_QUOTIENT
#define FIELDS_MASKS_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_QUOTIENT(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_QUOTIENT, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_QUOTIENT MM_QUOTIENT

 /* Field MM_REM_LSB */
 /* Accessor macros */
#define hal_get_mm_rem() hal_get_register_field32(MM_REM,MM_REM)
#define hal_set_mm_rem(x) hal_set_register_field(MM_REM,MM_REM,(x))
 /* Workings */
#define TYPE_OF_MM_REM MM_REM
#define FIELDS_MASKS_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_REM(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_REM, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_REM MM_REM

 /* Field MM_RINTLINK_LSB */
 /* Accessor macros */
#define hal_get_mm_rintlink() hal_get_register_field32(MM_RINTLINK,MM_RINTLINK)
#define hal_set_mm_rintlink(x) hal_set_register_field(MM_RINTLINK,MM_RINTLINK,(x))
 /* Workings */
#define TYPE_OF_MM_RINTLINK MM_RINTLINK
#define FIELDS_MASKS_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_MM_RINTLINK(next, val, rest) \
   (CHECK_FIELD_TYPE(MM_RINTLINK, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_MM_RINTLINK MM_RINTLINK

 /* Field NUM_CORE_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_core_stalls() hal_get_register_field32(NUM_CORE_STALLS,NUM_CORE_STALLS)
 /* Workings */
#define TYPE_OF_NUM_CORE_STALLS NUM_CORE_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_CORE_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_CORE_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_CORE_STALLS NUM_CORE_STALLS

 /* Field NUM_INSTRS_LSB */
 /* Accessor macros */
#define hal_get_num_instrs() hal_get_register_field32(NUM_INSTRS,NUM_INSTRS)
 /* Workings */
#define TYPE_OF_NUM_INSTRS NUM_INSTRS
#define FIELDS_MASKS_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTRS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTRS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTRS NUM_INSTRS

 /* Field NUM_INSTR_EXPAND_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_instr_expand_stalls() hal_get_register_field32(NUM_INSTR_EXPAND_STALLS,NUM_INSTR_EXPAND_STALLS)
 /* Workings */
#define TYPE_OF_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_INSTR_EXPAND_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_INSTR_EXPAND_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_INSTR_EXPAND_STALLS NUM_INSTR_EXPAND_STALLS

 /* Field NUM_MEM_ACCESS_STALLS_LSB */
 /* Accessor macros */
#define hal_get_num_mem_access_stalls() hal_get_register_field32(NUM_MEM_ACCESS_STALLS,NUM_MEM_ACCESS_STALLS)
 /* Workings */
#define TYPE_OF_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS
#define FIELDS_MASKS_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_MEM_ACCESS_STALLS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_MEM_ACCESS_STALLS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_MEM_ACCESS_STALLS NUM_MEM_ACCESS_STALLS

 /* Field NUM_RUN_CLKS_LSB */
 /* Accessor macros */
#define hal_get_num_run_clks() hal_get_register_field32(NUM_RUN_CLKS,NUM_RUN_CLKS)
 /* Workings */
#define TYPE_OF_NUM_RUN_CLKS NUM_RUN_CLKS
#define FIELDS_MASKS_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_NUM_RUN_CLKS(next, val, rest) \
   (CHECK_FIELD_TYPE(NUM_RUN_CLKS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_NUM_RUN_CLKS NUM_RUN_CLKS

 /* Field PC_STATUS_LSB */
 /* Accessor macros */
#define hal_get_pc_status() hal_get_register_field32(PC_STATUS,PC_STATUS)
 /* Workings */
#define TYPE_OF_PC_STATUS PC_STATUS
#define FIELDS_MASKS_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PC_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(PC_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PC_STATUS PC_STATUS

 /* Field STACK_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_end_addr() hal_get_register_field32(STACK_END_ADDR,STACK_END_ADDR)
#define hal_set_stack_end_addr(x) hal_set_register_field(STACK_END_ADDR,STACK_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_END_ADDR STACK_END_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_END_ADDR STACK_END_ADDR

 /* Field STACK_OVERFLOW_PC_LSB */
 /* Accessor macros */
#define hal_get_stack_overflow_pc() hal_get_register_field32(STACK_OVERFLOW_PC,STACK_OVERFLOW_PC)
 /* Workings */
#define TYPE_OF_STACK_OVERFLOW_PC STACK_OVERFLOW_PC
#define FIELDS_MASKS_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_OVERFLOW_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_OVERFLOW_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_OVERFLOW_PC STACK_OVERFLOW_PC

 /* Field STACK_POINTER_LSB */
 /* Accessor macros */
#define hal_get_stack_pointer() hal_get_register_field32(STACK_POINTER,STACK_POINTER)
#define hal_set_stack_pointer(x) hal_set_register_field(STACK_POINTER,STACK_POINTER,(x))
 /* Workings */
#define TYPE_OF_STACK_POINTER STACK_POINTER
#define FIELDS_MASKS_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_POINTER(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_POINTER, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_POINTER STACK_POINTER

 /* Field STACK_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_stack_start_addr() hal_get_register_field32(STACK_START_ADDR,STACK_START_ADDR)
#define hal_set_stack_start_addr(x) hal_set_register_field(STACK_START_ADDR,STACK_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_STACK_START_ADDR STACK_START_ADDR
#define FIELDS_MASKS_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_STACK_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(STACK_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_STACK_START_ADDR STACK_START_ADDR

 /* Field TEST_REG_0_LSB */
 /* Accessor macros */
#define hal_get_test_reg_0() hal_get_register_field32(TEST_REG_0,TEST_REG_0)
#define hal_set_test_reg_0(x) hal_set_register_field(TEST_REG_0,TEST_REG_0,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_0 TEST_REG_0
#define FIELDS_MASKS_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_0(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_0, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_0 TEST_REG_0

 /* Field TEST_REG_1_LSB */
 /* Accessor macros */
#define hal_get_test_reg_1() hal_get_register_field32(TEST_REG_1,TEST_REG_1)
#define hal_set_test_reg_1(x) hal_set_register_field(TEST_REG_1,TEST_REG_1,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_1 TEST_REG_1
#define FIELDS_MASKS_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_1(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_1, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_1 TEST_REG_1

 /* Field TEST_REG_2_LSB */
 /* Accessor macros */
#define hal_get_test_reg_2() hal_get_register_field32(TEST_REG_2,TEST_REG_2)
#define hal_set_test_reg_2(x) hal_set_register_field(TEST_REG_2,TEST_REG_2,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_2 TEST_REG_2
#define FIELDS_MASKS_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_2(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_2, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_2 TEST_REG_2

 /* Field TEST_REG_3_LSB */
 /* Accessor macros */
#define hal_get_test_reg_3() hal_get_register_field32(TEST_REG_3,TEST_REG_3)
#define hal_set_test_reg_3(x) hal_set_register_field(TEST_REG_3,TEST_REG_3,(x))
 /* Workings */
#define TYPE_OF_TEST_REG_3 TEST_REG_3
#define FIELDS_MASKS_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_TEST_REG_3(next, val, rest) \
   (CHECK_FIELD_TYPE(TEST_REG_3, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_TEST_REG_3 TEST_REG_3

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_ARITHMETIC_MODE
#define CHECK_FIELD_TYPE_ARITHMETIC_MODE_END
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_BITREVERSE_ADDR
#define CHECK_FIELD_TYPE_BITREVERSE_ADDR_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_BITREVERSE_DATA
#define CHECK_FIELD_TYPE_BITREVERSE_DATA_END
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_BITREVERSE_DATA16
#define CHECK_FIELD_TYPE_BITREVERSE_DATA16_END
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_BITREVERSE_VAL
#define CHECK_FIELD_TYPE_BITREVERSE_VAL_END
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_DBG_COUNTERS_EN
#define CHECK_FIELD_TYPE_DBG_COUNTERS_EN_END
#define CHECK_FIELD_TYPE_FRAME_POINTER_FRAME_POINTER
#define CHECK_FIELD_TYPE_FRAME_POINTER_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_MM_DOLOOP_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_END_END
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_MM_DOLOOP_START
#define CHECK_FIELD_TYPE_MM_DOLOOP_START_END
#define CHECK_FIELD_TYPE_MM_QUOTIENT_MM_QUOTIENT
#define CHECK_FIELD_TYPE_MM_QUOTIENT_END
#define CHECK_FIELD_TYPE_MM_REM_MM_REM
#define CHECK_FIELD_TYPE_MM_REM_END
#define CHECK_FIELD_TYPE_MM_RINTLINK_MM_RINTLINK
#define CHECK_FIELD_TYPE_MM_RINTLINK_END
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_NUM_CORE_STALLS
#define CHECK_FIELD_TYPE_NUM_CORE_STALLS_END
#define CHECK_FIELD_TYPE_NUM_INSTRS_NUM_INSTRS
#define CHECK_FIELD_TYPE_NUM_INSTRS_END
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_NUM_INSTR_EXPAND_STALLS
#define CHECK_FIELD_TYPE_NUM_INSTR_EXPAND_STALLS_END
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_NUM_MEM_ACCESS_STALLS
#define CHECK_FIELD_TYPE_NUM_MEM_ACCESS_STALLS_END
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_NUM_RUN_CLKS
#define CHECK_FIELD_TYPE_NUM_RUN_CLKS_END
#define CHECK_FIELD_TYPE_PC_STATUS_PC_STATUS
#define CHECK_FIELD_TYPE_PC_STATUS_END
#define CHECK_FIELD_TYPE_STACK_END_ADDR_STACK_END_ADDR
#define CHECK_FIELD_TYPE_STACK_END_ADDR_END
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_STACK_OVERFLOW_PC
#define CHECK_FIELD_TYPE_STACK_OVERFLOW_PC_END
#define CHECK_FIELD_TYPE_STACK_POINTER_STACK_POINTER
#define CHECK_FIELD_TYPE_STACK_POINTER_END
#define CHECK_FIELD_TYPE_STACK_START_ADDR_STACK_START_ADDR
#define CHECK_FIELD_TYPE_STACK_START_ADDR_END
#define CHECK_FIELD_TYPE_TEST_REG_0_TEST_REG_0
#define CHECK_FIELD_TYPE_TEST_REG_0_END
#define CHECK_FIELD_TYPE_TEST_REG_1_TEST_REG_1
#define CHECK_FIELD_TYPE_TEST_REG_1_END
#define CHECK_FIELD_TYPE_TEST_REG_2_TEST_REG_2
#define CHECK_FIELD_TYPE_TEST_REG_2_END
#define CHECK_FIELD_TYPE_TEST_REG_3_TEST_REG_3
#define CHECK_FIELD_TYPE_TEST_REG_3_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ARITHMETIC_MODE(next, val, rest) \
   (CHECK_FIELD_TYPE(ARITHMETIC_MODE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define ARITHMETIC_MODE_REG_BITS (5u)
#define hal_set_reg_arithmetic_mode(x) hal_set_register(ARITHMETIC_MODE, x, 1)
#define hal_get_reg_arithmetic_mode() hal_get_register(ARITHMETIC_MODE, 1)
#define BITREVERSE_ADDR_REG_BITS (32u)
#define hal_get_reg_bitreverse_addr() hal_get_register(BITREVERSE_ADDR, 1)
#define BITREVERSE_DATA_REG_BITS (32u)
#define hal_get_reg_bitreverse_data() hal_get_register(BITREVERSE_DATA, 1)
#define BITREVERSE_DATA16_REG_BITS (32u)
#define hal_get_reg_bitreverse_data16() hal_get_register(BITREVERSE_DATA16, 1)
#define BITREVERSE_VAL_REG_BITS (32u)
#define hal_set_reg_bitreverse_val(x) hal_set_register(BITREVERSE_VAL, x, 1)
#define hal_get_reg_bitreverse_val() hal_get_register(BITREVERSE_VAL, 1)
#define DBG_COUNTERS_EN_REG_BITS (1u)
#define hal_set_reg_dbg_counters_en(x) hal_set_register(DBG_COUNTERS_EN, x, 1)
#define hal_get_reg_dbg_counters_en() hal_get_register(DBG_COUNTERS_EN, 1)
#define FRAME_POINTER_REG_BITS (32u)
#define hal_set_reg_frame_pointer(x) hal_set_register(FRAME_POINTER, x, 1)
#define hal_get_reg_frame_pointer() hal_get_register(FRAME_POINTER, 1)
#define MM_DOLOOP_END_REG_BITS (32u)
#define hal_set_reg_mm_doloop_end(x) hal_set_register(MM_DOLOOP_END, x, 1)
#define hal_get_reg_mm_doloop_end() hal_get_register(MM_DOLOOP_END, 1)
#define MM_DOLOOP_START_REG_BITS (32u)
#define hal_set_reg_mm_doloop_start(x) hal_set_register(MM_DOLOOP_START, x, 1)
#define hal_get_reg_mm_doloop_start() hal_get_register(MM_DOLOOP_START, 1)
#define MM_QUOTIENT_REG_BITS (32u)
#define hal_set_reg_mm_quotient(x) hal_set_register(MM_QUOTIENT, x, 1)
#define hal_get_reg_mm_quotient() hal_get_register(MM_QUOTIENT, 1)
#define MM_REM_REG_BITS (32u)
#define hal_set_reg_mm_rem(x) hal_set_register(MM_REM, x, 1)
#define hal_get_reg_mm_rem() hal_get_register(MM_REM, 1)
#define MM_RINTLINK_REG_BITS (32u)
#define hal_set_reg_mm_rintlink(x) hal_set_register(MM_RINTLINK, x, 1)
#define hal_get_reg_mm_rintlink() hal_get_register(MM_RINTLINK, 1)
#define NUM_CORE_STALLS_REG_BITS (32u)
#define hal_get_reg_num_core_stalls() hal_get_register(NUM_CORE_STALLS, 1)
#define NUM_INSTRS_REG_BITS (32u)
#define hal_get_reg_num_instrs() hal_get_register(NUM_INSTRS, 1)
#define NUM_INSTR_EXPAND_STALLS_REG_BITS (32u)
#define hal_get_reg_num_instr_expand_stalls() hal_get_register(NUM_INSTR_EXPAND_STALLS, 1)
#define NUM_MEM_ACCESS_STALLS_REG_BITS (32u)
#define hal_get_reg_num_mem_access_stalls() hal_get_register(NUM_MEM_ACCESS_STALLS, 1)
#define NUM_RUN_CLKS_REG_BITS (32u)
#define hal_get_reg_num_run_clks() hal_get_register(NUM_RUN_CLKS, 1)
#define PC_STATUS_REG_BITS (32u)
#define hal_get_reg_pc_status() hal_get_register(PC_STATUS, 1)
#define STACK_END_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_end_addr(x) hal_set_register(STACK_END_ADDR, x, 1)
#define hal_get_reg_stack_end_addr() hal_get_register(STACK_END_ADDR, 1)
#define STACK_OVERFLOW_PC_REG_BITS (32u)
#define hal_get_reg_stack_overflow_pc() hal_get_register(STACK_OVERFLOW_PC, 1)
#define STACK_POINTER_REG_BITS (32u)
#define hal_set_reg_stack_pointer(x) hal_set_register(STACK_POINTER, x, 1)
#define hal_get_reg_stack_pointer() hal_get_register(STACK_POINTER, 1)
#define STACK_START_ADDR_REG_BITS (32u)
#define hal_set_reg_stack_start_addr(x) hal_set_register(STACK_START_ADDR, x, 1)
#define hal_get_reg_stack_start_addr() hal_get_register(STACK_START_ADDR, 1)
#define TEST_REG_0_REG_BITS (32u)
#define hal_set_reg_test_reg_0(x) hal_set_register(TEST_REG_0, x, 1)
#define hal_get_reg_test_reg_0() hal_get_register(TEST_REG_0, 1)
#define TEST_REG_1_REG_BITS (32u)
#define hal_set_reg_test_reg_1(x) hal_set_register(TEST_REG_1, x, 1)
#define hal_get_reg_test_reg_1() hal_get_register(TEST_REG_1, 1)
#define TEST_REG_2_REG_BITS (32u)
#define hal_set_reg_test_reg_2(x) hal_set_register(TEST_REG_2, x, 1)
#define hal_get_reg_test_reg_2() hal_get_register(TEST_REG_2, 1)
#define TEST_REG_3_REG_BITS (32u)
#define hal_set_reg_test_reg_3(x) hal_set_register(TEST_REG_3, x, 1)
#define hal_get_reg_test_reg_3() hal_get_register(TEST_REG_3, 1)

 /* Workings */
#define SETTER_FOR_ARITHMETIC_MODE hal_set_reg_arithmetic_mode
#define GETTER_FOR_ARITHMETIC_MODE hal_get_reg_arithmetic_mode
#define GETTER_FOR_BITREVERSE_ADDR hal_get_reg_bitreverse_addr
#define GETTER_FOR_BITREVERSE_DATA hal_get_reg_bitreverse_data
#define GETTER_FOR_BITREVERSE_DATA16 hal_get_reg_bitreverse_data16
#define SETTER_FOR_BITREVERSE_VAL hal_set_reg_bitreverse_val
#define GETTER_FOR_BITREVERSE_VAL hal_get_reg_bitreverse_val
#define SETTER_FOR_DBG_COUNTERS_EN hal_set_reg_dbg_counters_en
#define GETTER_FOR_DBG_COUNTERS_EN hal_get_reg_dbg_counters_en
#define SETTER_FOR_FRAME_POINTER hal_set_reg_frame_pointer
#define GETTER_FOR_FRAME_POINTER hal_get_reg_frame_pointer
#define SETTER_FOR_MM_DOLOOP_END hal_set_reg_mm_doloop_end
#define GETTER_FOR_MM_DOLOOP_END hal_get_reg_mm_doloop_end
#define SETTER_FOR_MM_DOLOOP_START hal_set_reg_mm_doloop_start
#define GETTER_FOR_MM_DOLOOP_START hal_get_reg_mm_doloop_start
#define SETTER_FOR_MM_QUOTIENT hal_set_reg_mm_quotient
#define GETTER_FOR_MM_QUOTIENT hal_get_reg_mm_quotient
#define SETTER_FOR_MM_REM hal_set_reg_mm_rem
#define GETTER_FOR_MM_REM hal_get_reg_mm_rem
#define SETTER_FOR_MM_RINTLINK hal_set_reg_mm_rintlink
#define GETTER_FOR_MM_RINTLINK hal_get_reg_mm_rintlink
#define GETTER_FOR_NUM_CORE_STALLS hal_get_reg_num_core_stalls
#define GETTER_FOR_NUM_INSTRS hal_get_reg_num_instrs
#define GETTER_FOR_NUM_INSTR_EXPAND_STALLS hal_get_reg_num_instr_expand_stalls
#define GETTER_FOR_NUM_MEM_ACCESS_STALLS hal_get_reg_num_mem_access_stalls
#define GETTER_FOR_NUM_RUN_CLKS hal_get_reg_num_run_clks
#define GETTER_FOR_PC_STATUS hal_get_reg_pc_status
#define SETTER_FOR_STACK_END_ADDR hal_set_reg_stack_end_addr
#define GETTER_FOR_STACK_END_ADDR hal_get_reg_stack_end_addr
#define GETTER_FOR_STACK_OVERFLOW_PC hal_get_reg_stack_overflow_pc
#define SETTER_FOR_STACK_POINTER hal_set_reg_stack_pointer
#define GETTER_FOR_STACK_POINTER hal_get_reg_stack_pointer
#define SETTER_FOR_STACK_START_ADDR hal_set_reg_stack_start_addr
#define GETTER_FOR_STACK_START_ADDR hal_get_reg_stack_start_addr
#define SETTER_FOR_TEST_REG_0 hal_set_reg_test_reg_0
#define GETTER_FOR_TEST_REG_0 hal_get_reg_test_reg_0
#define SETTER_FOR_TEST_REG_1 hal_set_reg_test_reg_1
#define GETTER_FOR_TEST_REG_1 hal_get_reg_test_reg_1
#define SETTER_FOR_TEST_REG_2 hal_set_reg_test_reg_2
#define GETTER_FOR_TEST_REG_2 hal_get_reg_test_reg_2
#define SETTER_FOR_TEST_REG_3 hal_set_reg_test_reg_3
#define GETTER_FOR_TEST_REG_3 hal_get_reg_test_reg_3

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_CORE) */





#ifndef __HAL_MACROS_H__MODULE_K32_MONITOR
#define __HAL_MACROS_H__MODULE_K32_MONITOR

/* -- Kalimba 32-bit Monitor Control registers. -- */

 /* Field DM1_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm1_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM1_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM1_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_end_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm1_prog_exception_region_end_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_END_ADDR,DM1_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR DM1_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM1_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm1_prog_exception_region_start_addr() hal_get_register_field32(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm1_prog_exception_region_start_addr(x) hal_set_register_field(DM1_PROG_EXCEPTION_REGION_START_ADDR,DM1_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM1_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM1_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR DM1_PROG_EXCEPTION_REGION_START_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_dm2_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,DM2_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field DM2_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_end_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_dm2_prog_exception_region_end_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_END_ADDR,DM2_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR DM2_PROG_EXCEPTION_REGION_END_ADDR

 /* Field DM2_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_dm2_prog_exception_region_start_addr() hal_get_register_field32(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_dm2_prog_exception_region_start_addr(x) hal_set_register_field(DM2_PROG_EXCEPTION_REGION_START_ADDR,DM2_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DM2_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(DM2_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR DM2_PROG_EXCEPTION_REGION_START_ADDR

 /* Field EXCEPTION_EN_BREAK */
 /* Accessor macros */
#define hal_get_exception_en_break() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_BREAK)
#define hal_set_exception_en_break(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_BREAK,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_BREAK EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_BREAK(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_BREAK EXCEPTION_EN

 /* Field EXCEPTION_EN_IRQ */
 /* Accessor macros */
#define hal_get_exception_en_irq() hal_get_register_field8(EXCEPTION_EN,EXCEPTION_EN_IRQ)
#define hal_set_exception_en_irq(x) hal_set_register_field(EXCEPTION_EN,EXCEPTION_EN_IRQ,(x))
 /* Workings */
#define TYPE_OF_EXCEPTION_EN_IRQ EXCEPTION_EN
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN_IRQ(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_EN_IRQ EXCEPTION_EN

 /* Field EXCEPTION_PC_LSB */
 /* Accessor macros */
#define hal_get_exception_pc() hal_get_register_field32(EXCEPTION_PC,EXCEPTION_PC)
 /* Workings */
#define TYPE_OF_EXCEPTION_PC EXCEPTION_PC
#define FIELDS_MASKS_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_PC(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_PC, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_EXCEPTION_PC EXCEPTION_PC

 /* Field PM_PROG_EXCEPTION_OOB_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_oob_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE)
#define hal_set_pm_prog_exception_oob_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_OOB_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_OOB_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_OOB_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_ENABLE */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_enable() hal_get_register_field8(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE)
#define hal_set_pm_prog_exception_region_enable(x) hal_set_register_field(PROG_EXCEPTION_REGION_ENABLE,PM_PROG_EXCEPTION_REGION_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_ENABLE PROG_EXCEPTION_REGION_ENABLE

 /* Field PM_PROG_EXCEPTION_REGION_END_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_end_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR)
#define hal_set_pm_prog_exception_region_end_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_END_ADDR,PM_PROG_EXCEPTION_REGION_END_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_END_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_END_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR PM_PROG_EXCEPTION_REGION_END_ADDR

 /* Field PM_PROG_EXCEPTION_REGION_START_ADDR_LSB */
 /* Accessor macros */
#define hal_get_pm_prog_exception_region_start_addr() hal_get_register_field32(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR)
#define hal_set_pm_prog_exception_region_start_addr(x) hal_set_register_field(PM_PROG_EXCEPTION_REGION_START_ADDR,PM_PROG_EXCEPTION_REGION_START_ADDR,(x))
 /* Workings */
#define TYPE_OF_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR
#define FIELDS_MASKS_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PM_PROG_EXCEPTION_REGION_START_ADDR(next, val, rest) \
   (CHECK_FIELD_TYPE(PM_PROG_EXCEPTION_REGION_START_ADDR, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR PM_PROG_EXCEPTION_REGION_START_ADDR

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_DM1_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_DM1_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM1_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_DM2_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_DM2_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_DM2_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_EXCEPTION_EN_EXCEPTION_EN
#define CHECK_FIELD_TYPE_EXCEPTION_EN_END
#define CHECK_FIELD_TYPE_EXCEPTION_PC_EXCEPTION_PC
#define CHECK_FIELD_TYPE_EXCEPTION_PC_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_PM_PROG_EXCEPTION_REGION_END_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_END_ADDR_END
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_PM_PROG_EXCEPTION_REGION_START_ADDR
#define CHECK_FIELD_TYPE_PM_PROG_EXCEPTION_REGION_START_ADDR_END
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_PROG_EXCEPTION_REGION_ENABLE
#define CHECK_FIELD_TYPE_PROG_EXCEPTION_REGION_ENABLE_END

 /* Multi-field accessor macros */
#define FIELDS_MASKS_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_EXCEPTION_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(EXCEPTION_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define FIELDS_MASKS_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROG_EXCEPTION_REGION_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PROG_EXCEPTION_REGION_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)

 /* All Registers for direct writes */
#define DM1_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_end_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_end_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM1_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm1_prog_exception_region_start_addr(x) hal_set_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm1_prog_exception_region_start_addr() hal_get_register(DM1_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_end_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_end_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define DM2_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_dm2_prog_exception_region_start_addr(x) hal_set_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_dm2_prog_exception_region_start_addr() hal_get_register(DM2_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define EXCEPTION_EN_REG_BITS (2u)
#define hal_set_reg_exception_en(x) hal_set_register(EXCEPTION_EN, x, 1)
#define hal_get_reg_exception_en() hal_get_register(EXCEPTION_EN, 1)
#define EXCEPTION_PC_REG_BITS (32u)
#define hal_get_reg_exception_pc() hal_get_register(EXCEPTION_PC, 1)
#define EXCEPTION_TYPE_REG_BITS (4u)
#define hal_get_reg_exception_type() hal_get_register(EXCEPTION_TYPE, 1)
#define PM_PROG_EXCEPTION_REGION_END_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_end_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_END_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_end_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_END_ADDR, 1)
#define PM_PROG_EXCEPTION_REGION_START_ADDR_REG_BITS (32u)
#define hal_set_reg_pm_prog_exception_region_start_addr(x) hal_set_register(PM_PROG_EXCEPTION_REGION_START_ADDR, x, 1)
#define hal_get_reg_pm_prog_exception_region_start_addr() hal_get_register(PM_PROG_EXCEPTION_REGION_START_ADDR, 1)
#define PROG_EXCEPTION_REGION_ENABLE_REG_BITS (4u)
#define hal_set_reg_prog_exception_region_enable(x) hal_set_register(PROG_EXCEPTION_REGION_ENABLE, x, 1)
#define hal_get_reg_prog_exception_region_enable() hal_get_register(PROG_EXCEPTION_REGION_ENABLE, 1)

 /* Workings */
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm1_prog_exception_region_end_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm1_prog_exception_region_end_addr
#define SETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm1_prog_exception_region_start_addr
#define GETTER_FOR_DM1_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm1_prog_exception_region_start_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_dm2_prog_exception_region_end_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_dm2_prog_exception_region_end_addr
#define SETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_dm2_prog_exception_region_start_addr
#define GETTER_FOR_DM2_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_dm2_prog_exception_region_start_addr
#define SETTER_FOR_EXCEPTION_EN hal_set_reg_exception_en
#define GETTER_FOR_EXCEPTION_EN hal_get_reg_exception_en
#define GETTER_FOR_EXCEPTION_PC hal_get_reg_exception_pc
#define GETTER_FOR_EXCEPTION_TYPE hal_get_reg_exception_type
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_set_reg_pm_prog_exception_region_end_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_END_ADDR hal_get_reg_pm_prog_exception_region_end_addr
#define SETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_set_reg_pm_prog_exception_region_start_addr
#define GETTER_FOR_PM_PROG_EXCEPTION_REGION_START_ADDR hal_get_reg_pm_prog_exception_region_start_addr
#define SETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_set_reg_prog_exception_region_enable
#define GETTER_FOR_PROG_EXCEPTION_REGION_ENABLE hal_get_reg_prog_exception_region_enable

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MONITOR) */












#ifndef __HAL_MACROS_H__MODULE_K32_MISC
#define __HAL_MACROS_H__MODULE_K32_MISC

/* -- Kalimba 32-bit Misc Control registers -- */

 /* Field ALLOW_GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
#define hal_get_allow_goto_shallow_sleep() hal_get_register_field8(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP)
#define hal_set_allow_goto_shallow_sleep(x) hal_set_register_field(ALLOW_GOTO_SHALLOW_SLEEP,ALLOW_GOTO_SHALLOW_SLEEP,(x))
 /* Workings */
#define TYPE_OF_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_ALLOW_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(ALLOW_GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP ALLOW_GOTO_SHALLOW_SLEEP

 /* Field CLOCK_CONT_SHALLOW_SLEEP_RATE_LSB */
 /* Accessor macros */
#define hal_get_clock_cont_shallow_sleep_rate() hal_get_register_field8(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE)
#define hal_set_clock_cont_shallow_sleep_rate(x) hal_set_register_field(CLOCK_CONT_SHALLOW_SLEEP_RATE,CLOCK_CONT_SHALLOW_SLEEP_RATE,(x))
 /* Workings */
#define TYPE_OF_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE
#define FIELDS_MASKS_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_CONT_SHALLOW_SLEEP_RATE(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_CONT_SHALLOW_SLEEP_RATE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE CLOCK_CONT_SHALLOW_SLEEP_RATE

 /* Field CLOCK_STOP_WIND_DOWN_SEQUENCE_EN */
 /* Accessor macros */
#define hal_get_clock_stop_wind_down_sequence_en() hal_get_register_field8(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN)
#define hal_set_clock_stop_wind_down_sequence_en(x) hal_set_register_field(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,CLOCK_STOP_WIND_DOWN_SEQUENCE_EN,(x))
 /* Workings */
#define TYPE_OF_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define FIELDS_MASKS_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN CLOCK_STOP_WIND_DOWN_SEQUENCE_EN

 /* Field DISABLE_MUTEX_AND_ACCESS_IMMUNITY */
 /* Accessor macros */
#define hal_get_disable_mutex_and_access_immunity() hal_get_register_field8(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY)
#define hal_set_disable_mutex_and_access_immunity(x) hal_set_register_field(DISABLE_MUTEX_AND_ACCESS_IMMUNITY,DISABLE_MUTEX_AND_ACCESS_IMMUNITY,(x))
 /* Workings */
#define TYPE_OF_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define FIELDS_MASKS_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_DISABLE_MUTEX_AND_ACCESS_IMMUNITY(next, val, rest) \
   (CHECK_FIELD_TYPE(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY DISABLE_MUTEX_AND_ACCESS_IMMUNITY

 /* Field GOTO_SHALLOW_SLEEP */
 /* Accessor macros */
 /* Workings */
#define TYPE_OF_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP
#define FIELDS_MASKS_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_GOTO_SHALLOW_SLEEP(next, val, rest) \
   (CHECK_FIELD_TYPE(GOTO_SHALLOW_SLEEP, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_GOTO_SHALLOW_SLEEP GOTO_SHALLOW_SLEEP

 /* Field PMWIN_ENABLE */
 /* Accessor macros */
#define hal_get_pmwin_enable() hal_get_register_field8(PMWIN_ENABLE,PMWIN_ENABLE)
#define hal_set_pmwin_enable(x) hal_set_register_field(PMWIN_ENABLE,PMWIN_ENABLE,(x))
 /* Workings */
#define TYPE_OF_PMWIN_ENABLE PMWIN_ENABLE
#define FIELDS_MASKS_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PMWIN_ENABLE(next, val, rest) \
   (CHECK_FIELD_TYPE(PMWIN_ENABLE, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PMWIN_ENABLE PMWIN_ENABLE

 /* Field PROCESSOR_ID */
 /* Accessor macros */
#define hal_get_processor_id() hal_get_register_field8(PROCESSOR_ID,PROCESSOR_ID)
 /* Workings */
#define TYPE_OF_PROCESSOR_ID PROCESSOR_ID
#define FIELDS_MASKS_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROCESSOR_ID(next, val, rest) \
   (CHECK_FIELD_TYPE(PROCESSOR_ID, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROCESSOR_ID PROCESSOR_ID

 /* Field PROC_DEEP_SLEEP_EN */
 /* Accessor macros */
#define hal_get_proc_deep_sleep_en() hal_get_register_field8(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN)
#define hal_set_proc_deep_sleep_en(x) hal_set_register_field(PROC_DEEP_SLEEP_EN,PROC_DEEP_SLEEP_EN,(x))
 /* Workings */
#define TYPE_OF_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN
#define FIELDS_MASKS_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_PROC_DEEP_SLEEP_EN(next, val, rest) \
   (CHECK_FIELD_TYPE(PROC_DEEP_SLEEP_EN, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_PROC_DEEP_SLEEP_EN PROC_DEEP_SLEEP_EN

 /* Field SHALLOW_SLEEP_STATUS */
 /* Accessor macros */
#define hal_get_shallow_sleep_status() hal_get_register_field8(SHALLOW_SLEEP_STATUS,SHALLOW_SLEEP_STATUS)
 /* Workings */
#define TYPE_OF_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS
#define FIELDS_MASKS_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) FIELD_MASK_SHIFTED(next) | \
    FIELDS_MASKS_SHIFTED_ ## next rest)
#define FIELDS_VALUES_SHIFTED_SHALLOW_SLEEP_STATUS(next, val, rest) \
   (CHECK_FIELD_TYPE(SHALLOW_SLEEP_STATUS, next) ((uint32) (val) << FIELD_SHIFT(next)) | \
    FIELDS_VALUES_SHIFTED_ ## next rest)
#define REGISTER_FOR_SHALLOW_SLEEP_STATUS SHALLOW_SLEEP_STATUS

 /* Type checking definitions */
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_ALLOW_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_ALLOW_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_CLOCK_CONT_SHALLOW_SLEEP_RATE
#define CHECK_FIELD_TYPE_CLOCK_CONT_SHALLOW_SLEEP_RATE_END
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN
#define CHECK_FIELD_TYPE_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_END
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_DISABLE_MUTEX_AND_ACCESS_IMMUNITY
#define CHECK_FIELD_TYPE_DISABLE_MUTEX_AND_ACCESS_IMMUNITY_END
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_GOTO_SHALLOW_SLEEP
#define CHECK_FIELD_TYPE_GOTO_SHALLOW_SLEEP_END
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_PMWIN_ENABLE
#define CHECK_FIELD_TYPE_PMWIN_ENABLE_END
#define CHECK_FIELD_TYPE_PROCESSOR_ID_PROCESSOR_ID
#define CHECK_FIELD_TYPE_PROCESSOR_ID_END
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_PROC_DEEP_SLEEP_EN
#define CHECK_FIELD_TYPE_PROC_DEEP_SLEEP_EN_END
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_SHALLOW_SLEEP_STATUS
#define CHECK_FIELD_TYPE_SHALLOW_SLEEP_STATUS_END

 /* Multi-field accessor macros */

 /* All Registers for direct writes */
#define ALLOW_GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_allow_goto_shallow_sleep(x) hal_set_register(ALLOW_GOTO_SHALLOW_SLEEP, x, 1)
#define hal_get_reg_allow_goto_shallow_sleep() hal_get_register(ALLOW_GOTO_SHALLOW_SLEEP, 1)
#define CLOCK_CONT_SHALLOW_SLEEP_RATE_REG_BITS (8u)
#define hal_set_reg_clock_cont_shallow_sleep_rate(x) hal_set_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, x, 1)
#define hal_get_reg_clock_cont_shallow_sleep_rate() hal_get_register(CLOCK_CONT_SHALLOW_SLEEP_RATE, 1)
#define CLOCK_DIVIDE_RATE_REG_BITS (2u)
#define hal_set_reg_clock_divide_rate(x) hal_set_register(CLOCK_DIVIDE_RATE, x, 1)
#define hal_get_reg_clock_divide_rate() hal_get_register(CLOCK_DIVIDE_RATE, 1)
#define CLOCK_STOP_WIND_DOWN_SEQUENCE_EN_REG_BITS (1u)
#define hal_set_reg_clock_stop_wind_down_sequence_en(x) hal_set_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, x, 1)
#define hal_get_reg_clock_stop_wind_down_sequence_en() hal_get_register(CLOCK_STOP_WIND_DOWN_SEQUENCE_EN, 1)
#define DISABLE_MUTEX_AND_ACCESS_IMMUNITY_REG_BITS (1u)
#define hal_set_reg_disable_mutex_and_access_immunity(x) hal_set_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, x, 1)
#define hal_get_reg_disable_mutex_and_access_immunity() hal_get_register(DISABLE_MUTEX_AND_ACCESS_IMMUNITY, 1)
#define GOTO_SHALLOW_SLEEP_REG_BITS (1u)
#define hal_set_reg_goto_shallow_sleep(x) hal_set_register(GOTO_SHALLOW_SLEEP, x, 1)
#define PMWIN_ENABLE_REG_BITS (1u)
#define hal_set_reg_pmwin_enable(x) hal_set_register(PMWIN_ENABLE, x, 1)
#define hal_get_reg_pmwin_enable() hal_get_register(PMWIN_ENABLE, 1)
#define PROCESSOR_ID_REG_BITS (1u)
#define hal_get_reg_processor_id() hal_get_register(PROCESSOR_ID, 1)
#define PROC_DEEP_SLEEP_EN_REG_BITS (1u)
#define hal_set_reg_proc_deep_sleep_en(x) hal_set_register(PROC_DEEP_SLEEP_EN, x, 1)
#define hal_get_reg_proc_deep_sleep_en() hal_get_register(PROC_DEEP_SLEEP_EN, 1)
#define SHALLOW_SLEEP_STATUS_REG_BITS (1u)
#define hal_get_reg_shallow_sleep_status() hal_get_register(SHALLOW_SLEEP_STATUS, 1)

 /* Workings */
#define SETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_set_reg_allow_goto_shallow_sleep
#define GETTER_FOR_ALLOW_GOTO_SHALLOW_SLEEP hal_get_reg_allow_goto_shallow_sleep
#define SETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_set_reg_clock_cont_shallow_sleep_rate
#define GETTER_FOR_CLOCK_CONT_SHALLOW_SLEEP_RATE hal_get_reg_clock_cont_shallow_sleep_rate
#define SETTER_FOR_CLOCK_DIVIDE_RATE hal_set_reg_clock_divide_rate
#define GETTER_FOR_CLOCK_DIVIDE_RATE hal_get_reg_clock_divide_rate
#define SETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_set_reg_clock_stop_wind_down_sequence_en
#define GETTER_FOR_CLOCK_STOP_WIND_DOWN_SEQUENCE_EN hal_get_reg_clock_stop_wind_down_sequence_en
#define SETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_set_reg_disable_mutex_and_access_immunity
#define GETTER_FOR_DISABLE_MUTEX_AND_ACCESS_IMMUNITY hal_get_reg_disable_mutex_and_access_immunity
#define SETTER_FOR_GOTO_SHALLOW_SLEEP hal_set_reg_goto_shallow_sleep
#define SETTER_FOR_PMWIN_ENABLE hal_set_reg_pmwin_enable
#define GETTER_FOR_PMWIN_ENABLE hal_get_reg_pmwin_enable
#define GETTER_FOR_PROCESSOR_ID hal_get_reg_processor_id
#define SETTER_FOR_PROC_DEEP_SLEEP_EN hal_set_reg_proc_deep_sleep_en
#define GETTER_FOR_PROC_DEEP_SLEEP_EN hal_get_reg_proc_deep_sleep_en
#define GETTER_FOR_SHALLOW_SLEEP_STATUS hal_get_reg_shallow_sleep_status

#endif /* !defined(IO_DEFS_LIMIT_MODULES) || defined(IO_DEFS_MODULE_K32_MISC) */


/* -- Banked register macros -- */










































































































/* -- Banked register field macros -- */
























































































































































