/*****************************************************************************
Copyright (c) 2018 Qualcomm Technologies International, Ltd.
*********************************************************************************/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: device.proto */

#ifndef PROTOBUF_C_device_2eproto__INCLUDED
#define PROTOBUF_C_device_2eproto__INCLUDED

#include <protobuf.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common.pb-c.h"

typedef struct _DeviceBattery DeviceBattery;
typedef struct _DeviceStatus DeviceStatus;
typedef struct _DeviceInformation DeviceInformation;
typedef struct _GetDeviceInformation GetDeviceInformation;
typedef struct _DeviceConfiguration DeviceConfiguration;
typedef struct _GetDeviceConfiguration GetDeviceConfiguration;
typedef struct _OverrideAssistant OverrideAssistant;
typedef struct _StartSetup StartSetup;
typedef struct _CompleteSetup CompleteSetup;
typedef struct _NotifyDeviceConfiguration NotifyDeviceConfiguration;
typedef struct _UpdateDeviceInformation UpdateDeviceInformation;
typedef struct _NotifyDeviceInformation NotifyDeviceInformation;


/* --- enums --- */

typedef enum _DeviceBattery__Status {
  DEVICE_BATTERY__STATUS__UNKNOWN = 0,
  DEVICE_BATTERY__STATUS__CHARGING = 1,
  DEVICE_BATTERY__STATUS__DISCHARGING = 2,
  DEVICE_BATTERY__STATUS__FULL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_BATTERY__STATUS)
} DeviceBattery__Status;
typedef enum _ConnectionStatus {
  CONNECTION_STATUS__CONNECTION_STATUS_UNKNOWN = 0,
  CONNECTION_STATUS__CONNECTION_STATUS_CONNECTED = 1,
  CONNECTION_STATUS__CONNECTION_STATUS_DISCONNECTED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONNECTION_STATUS)
} ConnectionStatus;
typedef enum _DevicePresence {
  DEVICE_PRESENCE__DEVICE_PRESENCE_UNKNOWN = 0,
  DEVICE_PRESENCE__DEVICE_PRESENCE_ACTIVE = 1,
  DEVICE_PRESENCE__DEVICE_PRESENCE_INACTIVE = 2,
  DEVICE_PRESENCE__DEVICE_PRESENCE_ACCESSIBLE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_PRESENCE)
} DevicePresence;

/* --- messages --- */

struct  _DeviceBattery
{
  ProtobufCMessage base;
  uint32_t level;
  uint32_t scale;
  DeviceBattery__Status status;
};
#define DEVICE_BATTERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_battery__descriptor) \
    , 0, 0, DEVICE_BATTERY__STATUS__UNKNOWN }


struct  _DeviceStatus
{
  ProtobufCMessage base;
  ConnectionStatus link;
  ConnectionStatus nfmi;
  DevicePresence presence;
};
#define DEVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_status__descriptor) \
    , CONNECTION_STATUS__CONNECTION_STATUS_UNKNOWN, CONNECTION_STATUS__CONNECTION_STATUS_UNKNOWN, DEVICE_PRESENCE__DEVICE_PRESENCE_UNKNOWN }


struct  _DeviceInformation
{
  ProtobufCMessage base;
  char *serial_number;
  char *name;
  size_t n_supported_transports;
  Transport *supported_transports;
  char *device_type;
  uint32_t device_id;
  DeviceBattery *battery;
  DeviceStatus *status;
  uint32_t product_color;
};
#define DEVICE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_information__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0, NULL, NULL, 0 }


struct  _GetDeviceInformation
{
  ProtobufCMessage base;
  uint32_t device_id;
};
#define GET_DEVICE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_device_information__descriptor) \
    , 0 }


struct  _DeviceConfiguration
{
  ProtobufCMessage base;
  protobuf_c_boolean needs_assistant_override;
  protobuf_c_boolean needs_setup;
};
#define DEVICE_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_configuration__descriptor) \
    , 0, 0 }


struct  _GetDeviceConfiguration
{
  ProtobufCMessage base;
};
#define GET_DEVICE_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_device_configuration__descriptor) \
     }


struct  _OverrideAssistant
{
  ProtobufCMessage base;
  ErrorCode error_code;
};
#define OVERRIDE_ASSISTANT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&override_assistant__descriptor) \
    , ERROR_CODE__SUCCESS }


struct  _StartSetup
{
  ProtobufCMessage base;
};
#define START_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_setup__descriptor) \
     }


struct  _CompleteSetup
{
  ProtobufCMessage base;
  ErrorCode error_code;
};
#define COMPLETE_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_setup__descriptor) \
    , ERROR_CODE__SUCCESS }


struct  _NotifyDeviceConfiguration
{
  ProtobufCMessage base;
  DeviceConfiguration *device_configuration;
};
#define NOTIFY_DEVICE_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_device_configuration__descriptor) \
    , NULL }


struct  _UpdateDeviceInformation
{
  ProtobufCMessage base;
  char *name;
};
#define UPDATE_DEVICE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_device_information__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _NotifyDeviceInformation
{
  ProtobufCMessage base;
  DeviceInformation *device_information;
};
#define NOTIFY_DEVICE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_device_information__descriptor) \
    , NULL }


/* DeviceBattery methods */
void   device_battery__init
                     (DeviceBattery         *message);
size_t device_battery__get_packed_size
                     (const DeviceBattery   *message);
size_t device_battery__pack
                     (const DeviceBattery   *message,
                      uint8_t             *out);
size_t device_battery__pack_to_buffer
                     (const DeviceBattery   *message,
                      ProtobufCBuffer     *buffer);
DeviceBattery *
       device_battery__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_battery__free_unpacked
                     (DeviceBattery *message,
                      ProtobufCAllocator *allocator);
/* DeviceStatus methods */
void   device_status__init
                     (DeviceStatus         *message);
size_t device_status__get_packed_size
                     (const DeviceStatus   *message);
size_t device_status__pack
                     (const DeviceStatus   *message,
                      uint8_t             *out);
size_t device_status__pack_to_buffer
                     (const DeviceStatus   *message,
                      ProtobufCBuffer     *buffer);
DeviceStatus *
       device_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_status__free_unpacked
                     (DeviceStatus *message,
                      ProtobufCAllocator *allocator);
/* DeviceInformation methods */
void   device_information__init
                     (DeviceInformation         *message);
size_t device_information__get_packed_size
                     (const DeviceInformation   *message);
size_t device_information__pack
                     (const DeviceInformation   *message,
                      uint8_t             *out);
size_t device_information__pack_to_buffer
                     (const DeviceInformation   *message,
                      ProtobufCBuffer     *buffer);
DeviceInformation *
       device_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_information__free_unpacked
                     (DeviceInformation *message,
                      ProtobufCAllocator *allocator);
/* GetDeviceInformation methods */
void   get_device_information__init
                     (GetDeviceInformation         *message);
size_t get_device_information__get_packed_size
                     (const GetDeviceInformation   *message);
size_t get_device_information__pack
                     (const GetDeviceInformation   *message,
                      uint8_t             *out);
size_t get_device_information__pack_to_buffer
                     (const GetDeviceInformation   *message,
                      ProtobufCBuffer     *buffer);
GetDeviceInformation *
       get_device_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_device_information__free_unpacked
                     (GetDeviceInformation *message,
                      ProtobufCAllocator *allocator);
/* DeviceConfiguration methods */
void   device_configuration__init
                     (DeviceConfiguration         *message);
size_t device_configuration__get_packed_size
                     (const DeviceConfiguration   *message);
size_t device_configuration__pack
                     (const DeviceConfiguration   *message,
                      uint8_t             *out);
size_t device_configuration__pack_to_buffer
                     (const DeviceConfiguration   *message,
                      ProtobufCBuffer     *buffer);
DeviceConfiguration *
       device_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_configuration__free_unpacked
                     (DeviceConfiguration *message,
                      ProtobufCAllocator *allocator);
/* GetDeviceConfiguration methods */
void   get_device_configuration__init
                     (GetDeviceConfiguration         *message);
size_t get_device_configuration__get_packed_size
                     (const GetDeviceConfiguration   *message);
size_t get_device_configuration__pack
                     (const GetDeviceConfiguration   *message,
                      uint8_t             *out);
size_t get_device_configuration__pack_to_buffer
                     (const GetDeviceConfiguration   *message,
                      ProtobufCBuffer     *buffer);
GetDeviceConfiguration *
       get_device_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_device_configuration__free_unpacked
                     (GetDeviceConfiguration *message,
                      ProtobufCAllocator *allocator);
/* OverrideAssistant methods */
void   override_assistant__init
                     (OverrideAssistant         *message);
size_t override_assistant__get_packed_size
                     (const OverrideAssistant   *message);
size_t override_assistant__pack
                     (const OverrideAssistant   *message,
                      uint8_t             *out);
size_t override_assistant__pack_to_buffer
                     (const OverrideAssistant   *message,
                      ProtobufCBuffer     *buffer);
OverrideAssistant *
       override_assistant__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   override_assistant__free_unpacked
                     (OverrideAssistant *message,
                      ProtobufCAllocator *allocator);
/* StartSetup methods */
void   start_setup__init
                     (StartSetup         *message);
size_t start_setup__get_packed_size
                     (const StartSetup   *message);
size_t start_setup__pack
                     (const StartSetup   *message,
                      uint8_t             *out);
size_t start_setup__pack_to_buffer
                     (const StartSetup   *message,
                      ProtobufCBuffer     *buffer);
StartSetup *
       start_setup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_setup__free_unpacked
                     (StartSetup *message,
                      ProtobufCAllocator *allocator);
/* CompleteSetup methods */
void   complete_setup__init
                     (CompleteSetup         *message);
size_t complete_setup__get_packed_size
                     (const CompleteSetup   *message);
size_t complete_setup__pack
                     (const CompleteSetup   *message,
                      uint8_t             *out);
size_t complete_setup__pack_to_buffer
                     (const CompleteSetup   *message,
                      ProtobufCBuffer     *buffer);
CompleteSetup *
       complete_setup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_setup__free_unpacked
                     (CompleteSetup *message,
                      ProtobufCAllocator *allocator);
/* NotifyDeviceConfiguration methods */
void   notify_device_configuration__init
                     (NotifyDeviceConfiguration         *message);
size_t notify_device_configuration__get_packed_size
                     (const NotifyDeviceConfiguration   *message);
size_t notify_device_configuration__pack
                     (const NotifyDeviceConfiguration   *message,
                      uint8_t             *out);
size_t notify_device_configuration__pack_to_buffer
                     (const NotifyDeviceConfiguration   *message,
                      ProtobufCBuffer     *buffer);
NotifyDeviceConfiguration *
       notify_device_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_device_configuration__free_unpacked
                     (NotifyDeviceConfiguration *message,
                      ProtobufCAllocator *allocator);
/* UpdateDeviceInformation methods */
void   update_device_information__init
                     (UpdateDeviceInformation         *message);
size_t update_device_information__get_packed_size
                     (const UpdateDeviceInformation   *message);
size_t update_device_information__pack
                     (const UpdateDeviceInformation   *message,
                      uint8_t             *out);
size_t update_device_information__pack_to_buffer
                     (const UpdateDeviceInformation   *message,
                      ProtobufCBuffer     *buffer);
UpdateDeviceInformation *
       update_device_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_device_information__free_unpacked
                     (UpdateDeviceInformation *message,
                      ProtobufCAllocator *allocator);
/* NotifyDeviceInformation methods */
void   notify_device_information__init
                     (NotifyDeviceInformation         *message);
size_t notify_device_information__get_packed_size
                     (const NotifyDeviceInformation   *message);
size_t notify_device_information__pack
                     (const NotifyDeviceInformation   *message,
                      uint8_t             *out);
size_t notify_device_information__pack_to_buffer
                     (const NotifyDeviceInformation   *message,
                      ProtobufCBuffer     *buffer);
NotifyDeviceInformation *
       notify_device_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_device_information__free_unpacked
                     (NotifyDeviceInformation *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DeviceBattery_Closure)
                 (const DeviceBattery *message,
                  void *closure_data);
typedef void (*DeviceStatus_Closure)
                 (const DeviceStatus *message,
                  void *closure_data);
typedef void (*DeviceInformation_Closure)
                 (const DeviceInformation *message,
                  void *closure_data);
typedef void (*GetDeviceInformation_Closure)
                 (const GetDeviceInformation *message,
                  void *closure_data);
typedef void (*DeviceConfiguration_Closure)
                 (const DeviceConfiguration *message,
                  void *closure_data);
typedef void (*GetDeviceConfiguration_Closure)
                 (const GetDeviceConfiguration *message,
                  void *closure_data);
typedef void (*OverrideAssistant_Closure)
                 (const OverrideAssistant *message,
                  void *closure_data);
typedef void (*StartSetup_Closure)
                 (const StartSetup *message,
                  void *closure_data);
typedef void (*CompleteSetup_Closure)
                 (const CompleteSetup *message,
                  void *closure_data);
typedef void (*NotifyDeviceConfiguration_Closure)
                 (const NotifyDeviceConfiguration *message,
                  void *closure_data);
typedef void (*UpdateDeviceInformation_Closure)
                 (const UpdateDeviceInformation *message,
                  void *closure_data);
typedef void (*NotifyDeviceInformation_Closure)
                 (const NotifyDeviceInformation *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    connection_status__descriptor;
extern const ProtobufCEnumDescriptor    device_presence__descriptor;
extern const ProtobufCMessageDescriptor device_battery__descriptor;
extern const ProtobufCEnumDescriptor    device_battery__status__descriptor;
extern const ProtobufCMessageDescriptor device_status__descriptor;
extern const ProtobufCMessageDescriptor device_information__descriptor;
extern const ProtobufCMessageDescriptor get_device_information__descriptor;
extern const ProtobufCMessageDescriptor device_configuration__descriptor;
extern const ProtobufCMessageDescriptor get_device_configuration__descriptor;
extern const ProtobufCMessageDescriptor override_assistant__descriptor;
extern const ProtobufCMessageDescriptor start_setup__descriptor;
extern const ProtobufCMessageDescriptor complete_setup__descriptor;
extern const ProtobufCMessageDescriptor notify_device_configuration__descriptor;
extern const ProtobufCMessageDescriptor update_device_information__descriptor;
extern const ProtobufCMessageDescriptor notify_device_information__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_device_2eproto__INCLUDED */
